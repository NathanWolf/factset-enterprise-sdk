/*
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeQuotes.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.RealTimeQuotes.models.InlineResponse20062DataCostsAndChargesExAnte;
import com.factset.sdk.RealTimeQuotes.models.InlineResponse20062DataCostsAndChargesExPost;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeQuotes.JSON;


/**
 * MiFID cost is the disclosure of information on costs and charges related to an investment product and on the investment or ancillary service provided to a client. MiFID distinguishes between ex-ante and ex-post disclosure of costs.
 */
@ApiModel(description = "MiFID cost is the disclosure of information on costs and charges related to an investment product and on the investment or ancillary service provided to a client. MiFID distinguishes between ex-ante and ex-post disclosure of costs.")
@JsonPropertyOrder({
  InlineResponse20062DataCostsAndCharges.JSON_PROPERTY_QUOTATION,
  InlineResponse20062DataCostsAndCharges.JSON_PROPERTY_EX_ANTE,
  InlineResponse20062DataCostsAndCharges.JSON_PROPERTY_EX_POST
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse20062DataCostsAndCharges implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Quotation type originally used for providing most of the cost items of the investment product.
   */
  public enum QuotationEnum {
    CURRENCY("currency"),
    
    PERCENT("percent");

    private String value;

    QuotationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static QuotationEnum fromValue(String value) {
      for (QuotationEnum b : QuotationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_QUOTATION = "quotation";
  private JsonNullable<QuotationEnum> quotation = JsonNullable.<QuotationEnum>undefined();

  public static final String JSON_PROPERTY_EX_ANTE = "exAnte";
  private InlineResponse20062DataCostsAndChargesExAnte exAnte;

  public static final String JSON_PROPERTY_EX_POST = "exPost";
  private InlineResponse20062DataCostsAndChargesExPost exPost;

  public InlineResponse20062DataCostsAndCharges() { 
  }

  public InlineResponse20062DataCostsAndCharges quotation(QuotationEnum quotation) {
    this.quotation = JsonNullable.<QuotationEnum>of(quotation);
    return this;
  }

   /**
   * Quotation type originally used for providing most of the cost items of the investment product.
   * @return quotation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Quotation type originally used for providing most of the cost items of the investment product.")
  @JsonIgnore

  public QuotationEnum getQuotation() {
        return quotation.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_QUOTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<QuotationEnum> getQuotation_JsonNullable() {
    return quotation;
  }
  
  @JsonProperty(JSON_PROPERTY_QUOTATION)
  public void setQuotation_JsonNullable(JsonNullable<QuotationEnum> quotation) {
    this.quotation = quotation;
  }

  public void setQuotation(QuotationEnum quotation) {
    this.quotation = JsonNullable.<QuotationEnum>of(quotation);
  }


  public InlineResponse20062DataCostsAndCharges exAnte(InlineResponse20062DataCostsAndChargesExAnte exAnte) {
    this.exAnte = exAnte;
    return this;
  }

   /**
   * Get exAnte
   * @return exAnte
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EX_ANTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20062DataCostsAndChargesExAnte getExAnte() {
    return exAnte;
  }


  @JsonProperty(JSON_PROPERTY_EX_ANTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExAnte(InlineResponse20062DataCostsAndChargesExAnte exAnte) {
    this.exAnte = exAnte;
  }


  public InlineResponse20062DataCostsAndCharges exPost(InlineResponse20062DataCostsAndChargesExPost exPost) {
    this.exPost = exPost;
    return this;
  }

   /**
   * Get exPost
   * @return exPost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EX_POST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20062DataCostsAndChargesExPost getExPost() {
    return exPost;
  }


  @JsonProperty(JSON_PROPERTY_EX_POST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExPost(InlineResponse20062DataCostsAndChargesExPost exPost) {
    this.exPost = exPost;
  }


  /**
   * Return true if this inline_response_200_62_data_costsAndCharges object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20062DataCostsAndCharges inlineResponse20062DataCostsAndCharges = (InlineResponse20062DataCostsAndCharges) o;
    return equalsNullable(this.quotation, inlineResponse20062DataCostsAndCharges.quotation) &&
        Objects.equals(this.exAnte, inlineResponse20062DataCostsAndCharges.exAnte) &&
        Objects.equals(this.exPost, inlineResponse20062DataCostsAndCharges.exPost);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(quotation), exAnte, exPost);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20062DataCostsAndCharges {\n");
    sb.append("    quotation: ").append(toIndentedString(quotation)).append("\n");
    sb.append("    exAnte: ").append(toIndentedString(exAnte)).append("\n");
    sb.append("    exPost: ").append(toIndentedString(exPost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

