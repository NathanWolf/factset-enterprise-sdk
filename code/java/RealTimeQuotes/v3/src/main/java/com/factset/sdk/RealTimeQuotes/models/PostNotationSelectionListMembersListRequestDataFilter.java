/*
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeQuotes.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.RealTimeQuotes.models.PostInstrumentSelectionListMembersListRequestDataFilterAssetClass;
import com.factset.sdk.RealTimeQuotes.models.PostNotationSelectionListMembersListRequestDataFilterInstrumentCategory;
import com.factset.sdk.RealTimeQuotes.models.PostNotationSelectionListMembersListRequestDataFilterMarket;
import com.factset.sdk.RealTimeQuotes.models.PostNotationSelectionListMembersListRequestDataFilterValueUnit;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeQuotes.JSON;


/**
 * Criteria that filter the items in the response list; only items that match all of the criteria are returned.
 */
@ApiModel(description = "Criteria that filter the items in the response list; only items that match all of the criteria are returned.")
@JsonPropertyOrder({
  PostNotationSelectionListMembersListRequestDataFilter.JSON_PROPERTY_MARKET,
  PostNotationSelectionListMembersListRequestDataFilter.JSON_PROPERTY_VALUE_UNIT,
  PostNotationSelectionListMembersListRequestDataFilter.JSON_PROPERTY_ASSET_CLASS,
  PostNotationSelectionListMembersListRequestDataFilter.JSON_PROPERTY_INSTRUMENT_CATEGORY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class PostNotationSelectionListMembersListRequestDataFilter implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_MARKET = "market";
  private PostNotationSelectionListMembersListRequestDataFilterMarket market;

  public static final String JSON_PROPERTY_VALUE_UNIT = "valueUnit";
  private PostNotationSelectionListMembersListRequestDataFilterValueUnit valueUnit;

  public static final String JSON_PROPERTY_ASSET_CLASS = "assetClass";
  private PostInstrumentSelectionListMembersListRequestDataFilterAssetClass assetClass;

  public static final String JSON_PROPERTY_INSTRUMENT_CATEGORY = "instrumentCategory";
  private PostNotationSelectionListMembersListRequestDataFilterInstrumentCategory instrumentCategory;

  public PostNotationSelectionListMembersListRequestDataFilter() { 
  }

  public PostNotationSelectionListMembersListRequestDataFilter market(PostNotationSelectionListMembersListRequestDataFilterMarket market) {
    this.market = market;
    return this;
  }

   /**
   * Get market
   * @return market
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostNotationSelectionListMembersListRequestDataFilterMarket getMarket() {
    return market;
  }


  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarket(PostNotationSelectionListMembersListRequestDataFilterMarket market) {
    this.market = market;
  }


  public PostNotationSelectionListMembersListRequestDataFilter valueUnit(PostNotationSelectionListMembersListRequestDataFilterValueUnit valueUnit) {
    this.valueUnit = valueUnit;
    return this;
  }

   /**
   * Get valueUnit
   * @return valueUnit
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VALUE_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostNotationSelectionListMembersListRequestDataFilterValueUnit getValueUnit() {
    return valueUnit;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueUnit(PostNotationSelectionListMembersListRequestDataFilterValueUnit valueUnit) {
    this.valueUnit = valueUnit;
  }


  public PostNotationSelectionListMembersListRequestDataFilter assetClass(PostInstrumentSelectionListMembersListRequestDataFilterAssetClass assetClass) {
    this.assetClass = assetClass;
    return this;
  }

   /**
   * Get assetClass
   * @return assetClass
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ASSET_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostInstrumentSelectionListMembersListRequestDataFilterAssetClass getAssetClass() {
    return assetClass;
  }


  @JsonProperty(JSON_PROPERTY_ASSET_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAssetClass(PostInstrumentSelectionListMembersListRequestDataFilterAssetClass assetClass) {
    this.assetClass = assetClass;
  }


  public PostNotationSelectionListMembersListRequestDataFilter instrumentCategory(PostNotationSelectionListMembersListRequestDataFilterInstrumentCategory instrumentCategory) {
    this.instrumentCategory = instrumentCategory;
    return this;
  }

   /**
   * Get instrumentCategory
   * @return instrumentCategory
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INSTRUMENT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostNotationSelectionListMembersListRequestDataFilterInstrumentCategory getInstrumentCategory() {
    return instrumentCategory;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUMENT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstrumentCategory(PostNotationSelectionListMembersListRequestDataFilterInstrumentCategory instrumentCategory) {
    this.instrumentCategory = instrumentCategory;
  }


  /**
   * Return true if this PostNotationSelectionListMembersListRequest_data_filter object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostNotationSelectionListMembersListRequestDataFilter postNotationSelectionListMembersListRequestDataFilter = (PostNotationSelectionListMembersListRequestDataFilter) o;
    return Objects.equals(this.market, postNotationSelectionListMembersListRequestDataFilter.market) &&
        Objects.equals(this.valueUnit, postNotationSelectionListMembersListRequestDataFilter.valueUnit) &&
        Objects.equals(this.assetClass, postNotationSelectionListMembersListRequestDataFilter.assetClass) &&
        Objects.equals(this.instrumentCategory, postNotationSelectionListMembersListRequestDataFilter.instrumentCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(market, valueUnit, assetClass, instrumentCategory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostNotationSelectionListMembersListRequestDataFilter {\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    valueUnit: ").append(toIndentedString(valueUnit)).append("\n");
    sb.append("    assetClass: ").append(toIndentedString(assetClass)).append("\n");
    sb.append("    instrumentCategory: ").append(toIndentedString(instrumentCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

