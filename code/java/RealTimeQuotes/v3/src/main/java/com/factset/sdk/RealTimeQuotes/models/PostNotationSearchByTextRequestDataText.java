/*
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeQuotes.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeQuotes.JSON;


/**
 * Text-related parameters.
 */
@ApiModel(description = "Text-related parameters.")
@JsonPropertyOrder({
  PostNotationSearchByTextRequestDataText.JSON_PROPERTY_ATTRIBUTES,
  PostNotationSearchByTextRequestDataText.JSON_PROPERTY_VALUE,
  PostNotationSearchByTextRequestDataText.JSON_PROPERTY_MINIMUM_MATCH_SCORE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PostNotationSearchByTextRequestDataText implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets attributes
   */
  public enum AttributesEnum {
    ALLENTITLED("allEntitled"),
    
    ISIN("isin"),
    
    WKN("wkn"),
    
    VALOR("valor"),
    
    SEDOL("sedol"),
    
    CUSIP("cusip"),
    
    SYMBOL("symbol"),
    
    NORMALIZEDSYMBOL("normalizedSymbol"),
    
    LONGNAME("longName"),
    
    SHORTNAME("shortName");

    private String value;

    AttributesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AttributesEnum fromValue(String value) {
      for (AttributesEnum b : AttributesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private java.util.Set<AttributesEnum> attributes = null;

  public static final String JSON_PROPERTY_VALUE = "value";
  private String value;

  public static final String JSON_PROPERTY_MINIMUM_MATCH_SCORE = "minimumMatchScore";
  private BigDecimal minimumMatchScore = new BigDecimal("0.25");

  public PostNotationSearchByTextRequestDataText() { 
  }

  @JsonCreator
  public PostNotationSearchByTextRequestDataText(
    @JsonProperty(value=JSON_PROPERTY_VALUE, required=true) String value
  ) {
    this();
    this.value = value;
  }

  public PostNotationSearchByTextRequestDataText attributes(java.util.Set<AttributesEnum> attributes) {
    this.attributes = attributes;
    return this;
  }

  public PostNotationSearchByTextRequestDataText addAttributesItem(AttributesEnum attributesItem) {
    if (this.attributes == null) {
      this.attributes = new java.util.LinkedHashSet<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * List of attributes to be searched in. The value &#x60;allEntitled&#x60; cannot appear with any other value.
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of attributes to be searched in. The value `allEntitled` cannot appear with any other value.")
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.Set<AttributesEnum> getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(java.util.Set<AttributesEnum> attributes) {
    this.attributes = attributes;
  }


  public PostNotationSearchByTextRequestDataText value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Full-text search string. It may be enclosed in double quotes (\&quot;). No escaping is provided, therefore it is impossible to specify a search string containing double quotes. Relevance of word starts is indicated by a phrase starting with a space character, such as \&quot; daimler\&quot;. If only two characters are submitted, the search is executed as an exact search.
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Full-text search string. It may be enclosed in double quotes (\"). No escaping is provided, therefore it is impossible to specify a search string containing double quotes. Relevance of word starts is indicated by a phrase starting with a space character, such as \" daimler\". If only two characters are submitted, the search is executed as an exact search.")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(String value) {
    this.value = value;
  }


  public PostNotationSearchByTextRequestDataText minimumMatchScore(BigDecimal minimumMatchScore) {
    this.minimumMatchScore = minimumMatchScore;
    return this;
  }

   /**
   * Minimum match score for the text string. The match score has a value between 0 and 1 (inclusive), where a higher value indicates a better match than a lower one.      Examples for the two most relevant thresholds:       0.25: Exact substring match after case-folding and modifier elimination - \&quot;Münchner Rück\&quot; is a match for the search string \&quot;Munch\&quot; but not for \&quot;Muench\&quot;.        0.50: Exact substring match - \&quot;Münchner Rück\&quot; is a match for the search string \&quot;Münch\&quot; but not for \&quot;Munch\&quot; or \&quot;münch\&quot;.
   * minimum: 0.1
   * maximum: 1
   * @return minimumMatchScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minimum match score for the text string. The match score has a value between 0 and 1 (inclusive), where a higher value indicates a better match than a lower one.      Examples for the two most relevant thresholds:       0.25: Exact substring match after case-folding and modifier elimination - \"Münchner Rück\" is a match for the search string \"Munch\" but not for \"Muench\".        0.50: Exact substring match - \"Münchner Rück\" is a match for the search string \"Münch\" but not for \"Munch\" or \"münch\".")
  @JsonProperty(JSON_PROPERTY_MINIMUM_MATCH_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMinimumMatchScore() {
    return minimumMatchScore;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_MATCH_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumMatchScore(BigDecimal minimumMatchScore) {
    this.minimumMatchScore = minimumMatchScore;
  }


  /**
   * Return true if this PostNotationSearchByTextRequest_data_text object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostNotationSearchByTextRequestDataText postNotationSearchByTextRequestDataText = (PostNotationSearchByTextRequestDataText) o;
    return Objects.equals(this.attributes, postNotationSearchByTextRequestDataText.attributes) &&
        Objects.equals(this.value, postNotationSearchByTextRequestDataText.value) &&
        Objects.equals(this.minimumMatchScore, postNotationSearchByTextRequestDataText.minimumMatchScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, value, minimumMatchScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostNotationSearchByTextRequestDataText {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    minimumMatchScore: ").append(toIndentedString(minimumMatchScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

