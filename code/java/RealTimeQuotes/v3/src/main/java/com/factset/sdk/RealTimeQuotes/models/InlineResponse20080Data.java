/*
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeQuotes.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.RealTimeQuotes.models.InlineResponse20078DataHigh;
import com.factset.sdk.RealTimeQuotes.models.InlineResponse20078DataLow;
import com.factset.sdk.RealTimeQuotes.models.InlineResponse20078DataPerformance;
import com.factset.sdk.RealTimeQuotes.models.InlineResponse20080DataTradingVolume;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeQuotes.JSON;


/**
 * EOD key figures.
 */
@ApiModel(description = "EOD key figures.")
@JsonPropertyOrder({
  InlineResponse20080Data.JSON_PROPERTY_ID_NOTATION,
  InlineResponse20080Data.JSON_PROPERTY_SOURCE_IDENTIFIER,
  InlineResponse20080Data.JSON_PROPERTY_REFERENCE_DATE,
  InlineResponse20080Data.JSON_PROPERTY_PERFORMANCE,
  InlineResponse20080Data.JSON_PROPERTY_HIGH,
  InlineResponse20080Data.JSON_PROPERTY_LOW,
  InlineResponse20080Data.JSON_PROPERTY_AVERAGE_PRICE,
  InlineResponse20080Data.JSON_PROPERTY_TRADING_VOLUME,
  InlineResponse20080Data.JSON_PROPERTY_TRADING_VALUE,
  InlineResponse20080Data.JSON_PROPERTY_VOLATILITY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InlineResponse20080Data implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID_NOTATION = "idNotation";
  private JsonNullable<String> idNotation = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SOURCE_IDENTIFIER = "sourceIdentifier";
  private JsonNullable<String> sourceIdentifier = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_REFERENCE_DATE = "referenceDate";
  private JsonNullable<LocalDate> referenceDate = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_PERFORMANCE = "performance";
  private InlineResponse20078DataPerformance performance;

  public static final String JSON_PROPERTY_HIGH = "high";
  private InlineResponse20078DataHigh high;

  public static final String JSON_PROPERTY_LOW = "low";
  private InlineResponse20078DataLow low;

  public static final String JSON_PROPERTY_AVERAGE_PRICE = "averagePrice";
  private JsonNullable<BigDecimal> averagePrice = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_TRADING_VOLUME = "tradingVolume";
  private InlineResponse20080DataTradingVolume tradingVolume;

  public static final String JSON_PROPERTY_TRADING_VALUE = "tradingValue";
  private JsonNullable<BigDecimal> tradingValue = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_VOLATILITY = "volatility";
  private JsonNullable<BigDecimal> volatility = JsonNullable.<BigDecimal>undefined();

  public InlineResponse20080Data() { 
  }

  public InlineResponse20080Data idNotation(String idNotation) {
    this.idNotation = JsonNullable.<String>of(idNotation);
    return this;
  }

   /**
   * MDG identifier of the listing.
   * @return idNotation
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "MDG identifier of the listing.")
  @JsonIgnore

  public String getIdNotation() {
        return idNotation.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ID_NOTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getIdNotation_JsonNullable() {
    return idNotation;
  }
  
  @JsonProperty(JSON_PROPERTY_ID_NOTATION)
  public void setIdNotation_JsonNullable(JsonNullable<String> idNotation) {
    this.idNotation = idNotation;
  }

  public void setIdNotation(String idNotation) {
    this.idNotation = JsonNullable.<String>of(idNotation);
  }


  public InlineResponse20080Data sourceIdentifier(String sourceIdentifier) {
    this.sourceIdentifier = JsonNullable.<String>of(sourceIdentifier);
    return this;
  }

   /**
   * Identifier used in the request.
   * @return sourceIdentifier
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Identifier used in the request.")
  @JsonIgnore

  public String getSourceIdentifier() {
        return sourceIdentifier.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SOURCE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSourceIdentifier_JsonNullable() {
    return sourceIdentifier;
  }
  
  @JsonProperty(JSON_PROPERTY_SOURCE_IDENTIFIER)
  public void setSourceIdentifier_JsonNullable(JsonNullable<String> sourceIdentifier) {
    this.sourceIdentifier = sourceIdentifier;
  }

  public void setSourceIdentifier(String sourceIdentifier) {
    this.sourceIdentifier = JsonNullable.<String>of(sourceIdentifier);
  }


  public InlineResponse20080Data referenceDate(LocalDate referenceDate) {
    this.referenceDate = JsonNullable.<LocalDate>of(referenceDate);
    return this;
  }

   /**
   * Reference date of the time range.
   * @return referenceDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Reference date of the time range.")
  @JsonIgnore

  public LocalDate getReferenceDate() {
        return referenceDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REFERENCE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getReferenceDate_JsonNullable() {
    return referenceDate;
  }
  
  @JsonProperty(JSON_PROPERTY_REFERENCE_DATE)
  public void setReferenceDate_JsonNullable(JsonNullable<LocalDate> referenceDate) {
    this.referenceDate = referenceDate;
  }

  public void setReferenceDate(LocalDate referenceDate) {
    this.referenceDate = JsonNullable.<LocalDate>of(referenceDate);
  }


  public InlineResponse20080Data performance(InlineResponse20078DataPerformance performance) {
    this.performance = performance;
    return this;
  }

   /**
   * Get performance
   * @return performance
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PERFORMANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20078DataPerformance getPerformance() {
    return performance;
  }


  @JsonProperty(JSON_PROPERTY_PERFORMANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPerformance(InlineResponse20078DataPerformance performance) {
    this.performance = performance;
  }


  public InlineResponse20080Data high(InlineResponse20078DataHigh high) {
    this.high = high;
    return this;
  }

   /**
   * Get high
   * @return high
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HIGH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20078DataHigh getHigh() {
    return high;
  }


  @JsonProperty(JSON_PROPERTY_HIGH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHigh(InlineResponse20078DataHigh high) {
    this.high = high;
  }


  public InlineResponse20080Data low(InlineResponse20078DataLow low) {
    this.low = low;
    return this;
  }

   /**
   * Get low
   * @return low
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20078DataLow getLow() {
    return low;
  }


  @JsonProperty(JSON_PROPERTY_LOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLow(InlineResponse20078DataLow low) {
    this.low = low;
  }


  public InlineResponse20080Data averagePrice(BigDecimal averagePrice) {
    this.averagePrice = JsonNullable.<BigDecimal>of(averagePrice);
    return this;
  }

   /**
   * Arithmetic mean of the notation&#39;s EOD closing prices for the given time range.
   * @return averagePrice
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Arithmetic mean of the notation's EOD closing prices for the given time range.")
  @JsonIgnore

  public BigDecimal getAveragePrice() {
        return averagePrice.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AVERAGE_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getAveragePrice_JsonNullable() {
    return averagePrice;
  }
  
  @JsonProperty(JSON_PROPERTY_AVERAGE_PRICE)
  public void setAveragePrice_JsonNullable(JsonNullable<BigDecimal> averagePrice) {
    this.averagePrice = averagePrice;
  }

  public void setAveragePrice(BigDecimal averagePrice) {
    this.averagePrice = JsonNullable.<BigDecimal>of(averagePrice);
  }


  public InlineResponse20080Data tradingVolume(InlineResponse20080DataTradingVolume tradingVolume) {
    this.tradingVolume = tradingVolume;
    return this;
  }

   /**
   * Get tradingVolume
   * @return tradingVolume
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRADING_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20080DataTradingVolume getTradingVolume() {
    return tradingVolume;
  }


  @JsonProperty(JSON_PROPERTY_TRADING_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTradingVolume(InlineResponse20080DataTradingVolume tradingVolume) {
    this.tradingVolume = tradingVolume;
  }


  public InlineResponse20080Data tradingValue(BigDecimal tradingValue) {
    this.tradingValue = JsonNullable.<BigDecimal>of(tradingValue);
    return this;
  }

   /**
   * Sum of the cash flow for all transactions of one notation over a certain time range. The cash flow of a transaction is its volume multiplied by its trade price.
   * @return tradingValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Sum of the cash flow for all transactions of one notation over a certain time range. The cash flow of a transaction is its volume multiplied by its trade price.")
  @JsonIgnore

  public BigDecimal getTradingValue() {
        return tradingValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRADING_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTradingValue_JsonNullable() {
    return tradingValue;
  }
  
  @JsonProperty(JSON_PROPERTY_TRADING_VALUE)
  public void setTradingValue_JsonNullable(JsonNullable<BigDecimal> tradingValue) {
    this.tradingValue = tradingValue;
  }

  public void setTradingValue(BigDecimal tradingValue) {
    this.tradingValue = JsonNullable.<BigDecimal>of(tradingValue);
  }


  public InlineResponse20080Data volatility(BigDecimal volatility) {
    this.volatility = JsonNullable.<BigDecimal>of(volatility);
    return this;
  }

   /**
   * Volatility of the daily logarithmic returns, annualized assuming 256 trading days per year.
   * @return volatility
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Volatility of the daily logarithmic returns, annualized assuming 256 trading days per year.")
  @JsonIgnore

  public BigDecimal getVolatility() {
        return volatility.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VOLATILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getVolatility_JsonNullable() {
    return volatility;
  }
  
  @JsonProperty(JSON_PROPERTY_VOLATILITY)
  public void setVolatility_JsonNullable(JsonNullable<BigDecimal> volatility) {
    this.volatility = volatility;
  }

  public void setVolatility(BigDecimal volatility) {
    this.volatility = JsonNullable.<BigDecimal>of(volatility);
  }


  /**
   * Return true if this inline_response_200_80_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20080Data inlineResponse20080Data = (InlineResponse20080Data) o;
    return equalsNullable(this.idNotation, inlineResponse20080Data.idNotation) &&
        equalsNullable(this.sourceIdentifier, inlineResponse20080Data.sourceIdentifier) &&
        equalsNullable(this.referenceDate, inlineResponse20080Data.referenceDate) &&
        Objects.equals(this.performance, inlineResponse20080Data.performance) &&
        Objects.equals(this.high, inlineResponse20080Data.high) &&
        Objects.equals(this.low, inlineResponse20080Data.low) &&
        equalsNullable(this.averagePrice, inlineResponse20080Data.averagePrice) &&
        Objects.equals(this.tradingVolume, inlineResponse20080Data.tradingVolume) &&
        equalsNullable(this.tradingValue, inlineResponse20080Data.tradingValue) &&
        equalsNullable(this.volatility, inlineResponse20080Data.volatility);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(idNotation), hashCodeNullable(sourceIdentifier), hashCodeNullable(referenceDate), performance, high, low, hashCodeNullable(averagePrice), tradingVolume, hashCodeNullable(tradingValue), hashCodeNullable(volatility));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20080Data {\n");
    sb.append("    idNotation: ").append(toIndentedString(idNotation)).append("\n");
    sb.append("    sourceIdentifier: ").append(toIndentedString(sourceIdentifier)).append("\n");
    sb.append("    referenceDate: ").append(toIndentedString(referenceDate)).append("\n");
    sb.append("    performance: ").append(toIndentedString(performance)).append("\n");
    sb.append("    high: ").append(toIndentedString(high)).append("\n");
    sb.append("    low: ").append(toIndentedString(low)).append("\n");
    sb.append("    averagePrice: ").append(toIndentedString(averagePrice)).append("\n");
    sb.append("    tradingVolume: ").append(toIndentedString(tradingVolume)).append("\n");
    sb.append("    tradingValue: ").append(toIndentedString(tradingValue)).append("\n");
    sb.append("    volatility: ").append(toIndentedString(volatility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

