/*
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeQuotes.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeQuotes.JSON;


/**
 * Describes the intended type of investors for an investment product.
 */
@ApiModel(description = "Describes the intended type of investors for an investment product.")
@JsonPropertyOrder({
  InlineResponse20062DataTargetMarketInvestorType.JSON_PROPERTY_RETAIL,
  InlineResponse20062DataTargetMarketInvestorType.JSON_PROPERTY_PROFESSIONAL,
  InlineResponse20062DataTargetMarketInvestorType.JSON_PROPERTY_ELIGIBLE_COUNTER_PARTY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InlineResponse20062DataTargetMarketInvestorType implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Indicates whether the investment product is suitable for retail clients.
   */
  public enum RetailEnum {
    YES("yes"),
    
    NO("no"),
    
    NEUTRAL("neutral");

    private String value;

    RetailEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RetailEnum fromValue(String value) {
      for (RetailEnum b : RetailEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_RETAIL = "retail";
  private JsonNullable<RetailEnum> retail = JsonNullable.<RetailEnum>undefined();

  /**
   * Indicates whether the investment product is suitable for professional clients.
   */
  public enum ProfessionalEnum {
    YES("yes"),
    
    NO("no"),
    
    NEUTRAL("neutral"),
    
    PERSE("perSe"),
    
    ELECTIVE("elective"),
    
    BOTH("both");

    private String value;

    ProfessionalEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProfessionalEnum fromValue(String value) {
      for (ProfessionalEnum b : ProfessionalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_PROFESSIONAL = "professional";
  private JsonNullable<ProfessionalEnum> professional = JsonNullable.<ProfessionalEnum>undefined();

  /**
   * Indicates whether the investment product is suitable for clients of type eligible counterparty.
   */
  public enum EligibleCounterPartyEnum {
    YES("yes"),
    
    NO("no"),
    
    NEUTRAL("neutral");

    private String value;

    EligibleCounterPartyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EligibleCounterPartyEnum fromValue(String value) {
      for (EligibleCounterPartyEnum b : EligibleCounterPartyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_ELIGIBLE_COUNTER_PARTY = "eligibleCounterParty";
  private JsonNullable<EligibleCounterPartyEnum> eligibleCounterParty = JsonNullable.<EligibleCounterPartyEnum>undefined();

  public InlineResponse20062DataTargetMarketInvestorType() { 
  }

  public InlineResponse20062DataTargetMarketInvestorType retail(RetailEnum retail) {
    this.retail = JsonNullable.<RetailEnum>of(retail);
    return this;
  }

   /**
   * Indicates whether the investment product is suitable for retail clients.
   * @return retail
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the investment product is suitable for retail clients.")
  @JsonIgnore

  public RetailEnum getRetail() {
        return retail.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RETAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<RetailEnum> getRetail_JsonNullable() {
    return retail;
  }
  
  @JsonProperty(JSON_PROPERTY_RETAIL)
  public void setRetail_JsonNullable(JsonNullable<RetailEnum> retail) {
    this.retail = retail;
  }

  public void setRetail(RetailEnum retail) {
    this.retail = JsonNullable.<RetailEnum>of(retail);
  }


  public InlineResponse20062DataTargetMarketInvestorType professional(ProfessionalEnum professional) {
    this.professional = JsonNullable.<ProfessionalEnum>of(professional);
    return this;
  }

   /**
   * Indicates whether the investment product is suitable for professional clients.
   * @return professional
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the investment product is suitable for professional clients.")
  @JsonIgnore

  public ProfessionalEnum getProfessional() {
        return professional.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROFESSIONAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ProfessionalEnum> getProfessional_JsonNullable() {
    return professional;
  }
  
  @JsonProperty(JSON_PROPERTY_PROFESSIONAL)
  public void setProfessional_JsonNullable(JsonNullable<ProfessionalEnum> professional) {
    this.professional = professional;
  }

  public void setProfessional(ProfessionalEnum professional) {
    this.professional = JsonNullable.<ProfessionalEnum>of(professional);
  }


  public InlineResponse20062DataTargetMarketInvestorType eligibleCounterParty(EligibleCounterPartyEnum eligibleCounterParty) {
    this.eligibleCounterParty = JsonNullable.<EligibleCounterPartyEnum>of(eligibleCounterParty);
    return this;
  }

   /**
   * Indicates whether the investment product is suitable for clients of type eligible counterparty.
   * @return eligibleCounterParty
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the investment product is suitable for clients of type eligible counterparty.")
  @JsonIgnore

  public EligibleCounterPartyEnum getEligibleCounterParty() {
        return eligibleCounterParty.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ELIGIBLE_COUNTER_PARTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<EligibleCounterPartyEnum> getEligibleCounterParty_JsonNullable() {
    return eligibleCounterParty;
  }
  
  @JsonProperty(JSON_PROPERTY_ELIGIBLE_COUNTER_PARTY)
  public void setEligibleCounterParty_JsonNullable(JsonNullable<EligibleCounterPartyEnum> eligibleCounterParty) {
    this.eligibleCounterParty = eligibleCounterParty;
  }

  public void setEligibleCounterParty(EligibleCounterPartyEnum eligibleCounterParty) {
    this.eligibleCounterParty = JsonNullable.<EligibleCounterPartyEnum>of(eligibleCounterParty);
  }


  /**
   * Return true if this inline_response_200_62_data_targetMarket_investorType object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20062DataTargetMarketInvestorType inlineResponse20062DataTargetMarketInvestorType = (InlineResponse20062DataTargetMarketInvestorType) o;
    return equalsNullable(this.retail, inlineResponse20062DataTargetMarketInvestorType.retail) &&
        equalsNullable(this.professional, inlineResponse20062DataTargetMarketInvestorType.professional) &&
        equalsNullable(this.eligibleCounterParty, inlineResponse20062DataTargetMarketInvestorType.eligibleCounterParty);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(retail), hashCodeNullable(professional), hashCodeNullable(eligibleCounterParty));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20062DataTargetMarketInvestorType {\n");
    sb.append("    retail: ").append(toIndentedString(retail)).append("\n");
    sb.append("    professional: ").append(toIndentedString(professional)).append("\n");
    sb.append("    eligibleCounterParty: ").append(toIndentedString(eligibleCounterParty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

