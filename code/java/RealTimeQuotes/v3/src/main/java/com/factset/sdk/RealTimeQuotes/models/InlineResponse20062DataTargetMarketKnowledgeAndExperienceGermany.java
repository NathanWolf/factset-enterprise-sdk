/*
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeQuotes.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeQuotes.JSON;


/**
 * Specific indicators for Germany.
 */
@ApiModel(description = "Specific indicators for Germany.")
@JsonPropertyOrder({
  InlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany.JSON_PROPERTY_EXPERT_INVESTOR
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Indicates whether the investment product is suitable for investors with an expert level of knowledge and experience. This regulatory requirement is available only in Germany, e.g. for investment in a contract for difference (CFD).
   */
  public enum ExpertInvestorEnum {
    YES("yes"),
    
    NO("no"),
    
    NEUTRAL("neutral"),
    
    FEEDBACK("feedback");

    private String value;

    ExpertInvestorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ExpertInvestorEnum fromValue(String value) {
      for (ExpertInvestorEnum b : ExpertInvestorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_EXPERT_INVESTOR = "expertInvestor";
  private JsonNullable<ExpertInvestorEnum> expertInvestor = JsonNullable.<ExpertInvestorEnum>undefined();

  public InlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany() { 
  }

  public InlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany expertInvestor(ExpertInvestorEnum expertInvestor) {
    this.expertInvestor = JsonNullable.<ExpertInvestorEnum>of(expertInvestor);
    return this;
  }

   /**
   * Indicates whether the investment product is suitable for investors with an expert level of knowledge and experience. This regulatory requirement is available only in Germany, e.g. for investment in a contract for difference (CFD).
   * @return expertInvestor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the investment product is suitable for investors with an expert level of knowledge and experience. This regulatory requirement is available only in Germany, e.g. for investment in a contract for difference (CFD).")
  @JsonIgnore

  public ExpertInvestorEnum getExpertInvestor() {
        return expertInvestor.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXPERT_INVESTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ExpertInvestorEnum> getExpertInvestor_JsonNullable() {
    return expertInvestor;
  }
  
  @JsonProperty(JSON_PROPERTY_EXPERT_INVESTOR)
  public void setExpertInvestor_JsonNullable(JsonNullable<ExpertInvestorEnum> expertInvestor) {
    this.expertInvestor = expertInvestor;
  }

  public void setExpertInvestor(ExpertInvestorEnum expertInvestor) {
    this.expertInvestor = JsonNullable.<ExpertInvestorEnum>of(expertInvestor);
  }


  /**
   * Return true if this inline_response_200_62_data_targetMarket_knowledgeAndExperience_germany object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany inlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany = (InlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany) o;
    return equalsNullable(this.expertInvestor, inlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany.expertInvestor);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(expertInvestor));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany {\n");
    sb.append("    expertInvestor: ").append(toIndentedString(expertInvestor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

