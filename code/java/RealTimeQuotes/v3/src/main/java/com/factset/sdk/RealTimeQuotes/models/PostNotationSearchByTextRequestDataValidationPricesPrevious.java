/*
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeQuotes.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeQuotes.JSON;


/**
 * Parameters related to the presence and age of a trade price from a preceding trading day.
 */
@ApiModel(description = "Parameters related to the presence and age of a trade price from a preceding trading day.")
@JsonPropertyOrder({
  PostNotationSearchByTextRequestDataValidationPricesPrevious.JSON_PROPERTY_AVAILABLE_ONLY,
  PostNotationSearchByTextRequestDataValidationPricesPrevious.JSON_PROPERTY_MINIMUM_DATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PostNotationSearchByTextRequestDataValidationPricesPrevious implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_AVAILABLE_ONLY = "availableOnly";
  private Boolean availableOnly;

  public static final String JSON_PROPERTY_MINIMUM_DATE = "minimumDate";
  private LocalDate minimumDate;

  public PostNotationSearchByTextRequestDataValidationPricesPrevious() { 
  }

  public PostNotationSearchByTextRequestDataValidationPricesPrevious availableOnly(Boolean availableOnly) {
    this.availableOnly = availableOnly;
    return this;
  }

   /**
   * If &#x60;true&#x60;, only notations for which a trade price from a preceding trading day is available will be returned.
   * @return availableOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If `true`, only notations for which a trade price from a preceding trading day is available will be returned.")
  @JsonProperty(JSON_PROPERTY_AVAILABLE_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAvailableOnly() {
    return availableOnly;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailableOnly(Boolean availableOnly) {
    this.availableOnly = availableOnly;
  }


  public PostNotationSearchByTextRequestDataValidationPricesPrevious minimumDate(LocalDate minimumDate) {
    this.minimumDate = minimumDate;
    return this;
  }

   /**
   * Earliest admissible date of the trade price from a preceding trading day.
   * @return minimumDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Earliest admissible date of the trade price from a preceding trading day.")
  @JsonProperty(JSON_PROPERTY_MINIMUM_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getMinimumDate() {
    return minimumDate;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumDate(LocalDate minimumDate) {
    this.minimumDate = minimumDate;
  }


  /**
   * Return true if this PostNotationSearchByTextRequest_data_validation_prices_previous object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostNotationSearchByTextRequestDataValidationPricesPrevious postNotationSearchByTextRequestDataValidationPricesPrevious = (PostNotationSearchByTextRequestDataValidationPricesPrevious) o;
    return Objects.equals(this.availableOnly, postNotationSearchByTextRequestDataValidationPricesPrevious.availableOnly) &&
        Objects.equals(this.minimumDate, postNotationSearchByTextRequestDataValidationPricesPrevious.minimumDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableOnly, minimumDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostNotationSearchByTextRequestDataValidationPricesPrevious {\n");
    sb.append("    availableOnly: ").append(toIndentedString(availableOnly)).append("\n");
    sb.append("    minimumDate: ").append(toIndentedString(minimumDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

