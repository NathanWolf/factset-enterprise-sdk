/*
 * OFDB API
 * OFDB API
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.OFDB.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.OFDB.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.math.BigDecimal;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.factset.sdk.OFDB.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonDeserialize(using = BulkDeleteArrayItemNested.BulkDeleteArrayItemNestedDeserializer.class)
@JsonSerialize(using = BulkDeleteArrayItemNested.BulkDeleteArrayItemNestedSerializer.class)
public class BulkDeleteArrayItemNested extends AbstractOpenApiSchema implements Serializable {
    private static final Logger log = Logger.getLogger(BulkDeleteArrayItemNested.class.getName());

    public static class BulkDeleteArrayItemNestedSerializer extends StdSerializer<BulkDeleteArrayItemNested> {
        public BulkDeleteArrayItemNestedSerializer(Class<BulkDeleteArrayItemNested> t) {
            super(t);
        }

        public BulkDeleteArrayItemNestedSerializer() {
            this(null);
        }

        @Override
        public void serialize(BulkDeleteArrayItemNested value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class BulkDeleteArrayItemNestedDeserializer extends StdDeserializer<BulkDeleteArrayItemNested> {
        public BulkDeleteArrayItemNestedDeserializer() {
            this(BulkDeleteArrayItemNested.class);
        }

        public BulkDeleteArrayItemNestedDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public BulkDeleteArrayItemNested deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize java.util.Map<String, java.util.List<Integer>>
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (java.util.Map.class.equals(Integer.class) || java.util.Map.class.equals(Long.class) || java.util.Map.class.equals(Float.class) || java.util.Map.class.equals(Double.class) || java.util.Map.class.equals(Boolean.class) || java.util.Map.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((java.util.Map.class.equals(Integer.class) || java.util.Map.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((java.util.Map.class.equals(Float.class) || java.util.Map.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (java.util.Map.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (java.util.Map.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<java.util.Map<String, java.util.List<Integer>>>() { });
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'java.util.Map'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'java.util.Map'", e);
            }

            // deserialize java.util.List<Integer>
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (java.util.List.class.equals(Integer.class) || java.util.List.class.equals(Long.class) || java.util.List.class.equals(Float.class) || java.util.List.class.equals(Double.class) || java.util.List.class.equals(Boolean.class) || java.util.List.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((java.util.List.class.equals(Integer.class) || java.util.List.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((java.util.List.class.equals(Float.class) || java.util.List.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (java.util.List.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (java.util.List.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<java.util.List<Integer>>() { });
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'java.util.List'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'java.util.List'", e);
            }

            if (match == 1) {
                BulkDeleteArrayItemNested ret = new BulkDeleteArrayItemNested();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for BulkDeleteArrayItemNested: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public BulkDeleteArrayItemNested getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "BulkDeleteArrayItemNested cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public BulkDeleteArrayItemNested() {
        super("oneOf", Boolean.FALSE);
    }

    static {
        schemas.put("java.util.List<Integer>", new GenericType<java.util.List<Integer>>() {
        });
        schemas.put("java.util.Map<String, java.util.List<Integer>>", new GenericType<java.util.Map<String, java.util.List<Integer>>>() {
        });
        JSON.registerDescendants(BulkDeleteArrayItemNested.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return BulkDeleteArrayItemNested.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * java.util.List<Integer>, java.util.Map<String, java.util.List<Integer>>
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        // java.util.Map<String, java.util.List<Integer>>
        if (JSON.isInstanceOf(java.util.Map.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        // java.util.List<Integer>
        if (JSON.isInstanceOf(java.util.List.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be java.util.List<Integer>, java.util.Map<String, java.util.List<Integer>>");
    }

    /**
     * Get the actual instance, which can be the following:
     * java.util.List<Integer>, java.util.Map<String, java.util.List<Integer>>
     *
     * @return The actual instance (java.util.List<Integer>, java.util.Map<String, java.util.List<Integer>>)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `java.util.Map<String, java.util.List<Integer>>`. If the actual instance is not `java.util.Map<String, java.util.List<Integer>>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `java.util.Map<String, java.util.List<Integer>>`
     * @throws ClassCastException if the instance is not `java.util.Map<String, java.util.List<Integer>>`
     */
    public java.util.Map<String, java.util.List<Integer>> getOneOf0() throws ClassCastException {
        return (java.util.Map<String, java.util.List<Integer>>)super.getActualInstance();
    }

    /**
     * Get the actual instance of `java.util.List<Integer>`. If the actual instance is not `java.util.List<Integer>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `java.util.List<Integer>`
     * @throws ClassCastException if the instance is not `java.util.List<Integer>`
     */
    public java.util.List<Integer> getOneOf1() throws ClassCastException {
        return (java.util.List<Integer>)super.getActualInstance();
    }

}

