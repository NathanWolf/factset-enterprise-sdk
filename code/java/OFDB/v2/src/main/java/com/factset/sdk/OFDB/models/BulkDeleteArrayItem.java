/*
 * OFDB API
 * OFDB API
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.OFDB.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.OFDB.models.BulkDeleteArrayItemNested;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.OFDB.JSON;


import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.factset.sdk.OFDB.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

@JsonDeserialize(using=BulkDeleteArrayItem.BulkDeleteArrayItemDeserializer.class)
@JsonSerialize(using = BulkDeleteArrayItem.BulkDeleteArrayItemSerializer.class)
public class BulkDeleteArrayItem extends AbstractOpenApiSchema implements Serializable {
    private static final Logger log = Logger.getLogger(BulkDeleteArrayItem.class.getName());

    public static class BulkDeleteArrayItemSerializer extends StdSerializer<BulkDeleteArrayItem> {
        public BulkDeleteArrayItemSerializer(Class<BulkDeleteArrayItem> t) {
            super(t);
        }

        public BulkDeleteArrayItemSerializer() {
            this(null);
        }

        @Override
        public void serialize(BulkDeleteArrayItem value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class BulkDeleteArrayItemDeserializer extends StdDeserializer<BulkDeleteArrayItem> {
        public BulkDeleteArrayItemDeserializer() {
            this(BulkDeleteArrayItem.class);
        }

        public BulkDeleteArrayItemDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public BulkDeleteArrayItem deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            Object deserialized = null;
            // deserialize java.util.Map<String, BulkDeleteArrayItemNested>
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<java.util.Map<String, BulkDeleteArrayItemNested>>(){});
                BulkDeleteArrayItem ret = new BulkDeleteArrayItem();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'BulkDeleteArrayItem'", e);
            }

            // deserialize java.util.List<String>
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<java.util.List<String>>(){});
                BulkDeleteArrayItem ret = new BulkDeleteArrayItem();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'BulkDeleteArrayItem'", e);
            }

            throw new IOException(String.format("Failed deserialization for BulkDeleteArrayItem: no match found"));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public BulkDeleteArrayItem getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "BulkDeleteArrayItem cannot be null");
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public BulkDeleteArrayItem() {
        super("anyOf", Boolean.FALSE);
    }

    public BulkDeleteArrayItem(java.util.List<String> o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BulkDeleteArrayItem(java.util.Map<String, BulkDeleteArrayItemNested> o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("java.util.List<String>", new GenericType<java.util.List<String>>() {
        });
        schemas.put("java.util.Map<String, BulkDeleteArrayItemNested>", new GenericType<java.util.Map<String, BulkDeleteArrayItemNested>>() {
        });
        JSON.registerDescendants(BulkDeleteArrayItem.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return BulkDeleteArrayItem.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * java.util.List<String>, java.util.Map<String, BulkDeleteArrayItemNested>
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(java.util.Map.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(java.util.List.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be java.util.List<String>, java.util.Map<String, BulkDeleteArrayItemNested>");
    }

    /**
     * Get the actual instance, which can be the following:
     * java.util.List<String>, java.util.Map<String, BulkDeleteArrayItemNested>
     *
     * @return The actual instance (java.util.List<String>, java.util.Map<String, BulkDeleteArrayItemNested>)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `java.util.Map<String, BulkDeleteArrayItemNested>`.
     * If the actual instance is not `java.util.Map<String, BulkDeleteArrayItemNested>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `java.util.Map<String, BulkDeleteArrayItemNested>`
     * @throws ClassCastException if the instance is not `java.util.Map<String, BulkDeleteArrayItemNested>`
     */
    public java.util.Map<String, BulkDeleteArrayItemNested> getAnyOf0() throws ClassCastException {
        return (java.util.Map<String, BulkDeleteArrayItemNested>)super.getActualInstance();
    }

    /**
     * Get the actual instance of `java.util.List<String>`.
     * If the actual instance is not `java.util.List<String>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `java.util.List<String>`
     * @throws ClassCastException if the instance is not `java.util.List<String>`
     */
    public java.util.List<String> getAnyOf1() throws ClassCastException {
        return (java.util.List<String>)super.getActualInstance();
    }

}

