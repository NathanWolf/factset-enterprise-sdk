/*
 * OFDB API
 * OFDB API
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.OFDB.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.OFDB.JSON;


/**
 * FieldProperties
 */
@JsonPropertyOrder({
  FieldProperties.JSON_PROPERTY_DESCRIPTION,
  FieldProperties.JSON_PROPERTY_ITERATION,
  FieldProperties.JSON_PROPERTY_NAME,
  FieldProperties.JSON_PROPERTY_SIZE,
  FieldProperties.JSON_PROPERTY_SPLIT_DIRECTION,
  FieldProperties.JSON_PROPERTY_TYPE,
  FieldProperties.JSON_PROPERTY_CODE_PAGE_FLAG
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FieldProperties implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  /**
   * Gets or Sets iteration
   */
  public enum IterationEnum {
    _2D("2D"),
    
    _3D("3D");

    private String value;

    IterationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IterationEnum fromValue(String value) {
      for (IterationEnum b : IterationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ITERATION = "iteration";
  private IterationEnum iteration;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_SIZE = "size";
  private Integer size;

  /**
   * Gets or Sets splitDirection
   */
  public enum SplitDirectionEnum {
    NONE("NONE"),
    
    NORMAL("NORMAL"),
    
    REVERSE("REVERSE");

    private String value;

    SplitDirectionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SplitDirectionEnum fromValue(String value) {
      for (SplitDirectionEnum b : SplitDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SPLIT_DIRECTION = "splitDirection";
  private SplitDirectionEnum splitDirection;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    INT("INT"),
    
    FLOAT("FLOAT"),
    
    DOUBLE("DOUBLE"),
    
    CHAR("CHAR"),
    
    LONG_CHAR("LONG_CHAR"),
    
    STRING("STRING"),
    
    DATE("DATE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_CODE_PAGE_FLAG = "codePageFlag";
  private String codePageFlag;

  public FieldProperties() { 
  }

  public FieldProperties description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public FieldProperties iteration(IterationEnum iteration) {
    this.iteration = iteration;
    return this;
  }

   /**
   * Get iteration
   * @return iteration
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ITERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IterationEnum getIteration() {
    return iteration;
  }


  @JsonProperty(JSON_PROPERTY_ITERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIteration(IterationEnum iteration) {
    this.iteration = iteration;
  }


  public FieldProperties name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public FieldProperties size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Integer size) {
    this.size = size;
  }


  public FieldProperties splitDirection(SplitDirectionEnum splitDirection) {
    this.splitDirection = splitDirection;
    return this;
  }

   /**
   * Get splitDirection
   * @return splitDirection
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SPLIT_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SplitDirectionEnum getSplitDirection() {
    return splitDirection;
  }


  @JsonProperty(JSON_PROPERTY_SPLIT_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSplitDirection(SplitDirectionEnum splitDirection) {
    this.splitDirection = splitDirection;
  }


  public FieldProperties type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public FieldProperties codePageFlag(String codePageFlag) {
    this.codePageFlag = codePageFlag;
    return this;
  }

   /**
   * Get codePageFlag
   * @return codePageFlag
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CODE_PAGE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCodePageFlag() {
    return codePageFlag;
  }


  @JsonProperty(JSON_PROPERTY_CODE_PAGE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodePageFlag(String codePageFlag) {
    this.codePageFlag = codePageFlag;
  }


  /**
   * Return true if this FieldProperties object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldProperties fieldProperties = (FieldProperties) o;
    return Objects.equals(this.description, fieldProperties.description) &&
        Objects.equals(this.iteration, fieldProperties.iteration) &&
        Objects.equals(this.name, fieldProperties.name) &&
        Objects.equals(this.size, fieldProperties.size) &&
        Objects.equals(this.splitDirection, fieldProperties.splitDirection) &&
        Objects.equals(this.type, fieldProperties.type) &&
        Objects.equals(this.codePageFlag, fieldProperties.codePageFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, iteration, name, size, splitDirection, type, codePageFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldProperties {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    iteration: ").append(toIndentedString(iteration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    splitDirection: ").append(toIndentedString(splitDirection)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    codePageFlag: ").append(toIndentedString(codePageFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

