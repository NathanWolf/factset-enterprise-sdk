/*
 * FactSet Options API
 * The Option Prices database provides pricing data such as mid bid-ask price, reference data (e.g., strike price), and risk measures (e.g., Greeks and implied volatility). Visit [Options Overview OA Page # 14925](https://my.apps.factset.com/oa/pages/14925) for details on database coverage. U.S. exchange-traded option bid and ask quotes are continuously updated throughout the day even when no trades have occurred on the option (zero volume). The end-of-day closing bid and ask quotes are always in line with the underlying closing price.  **Note** * Currently in Beta only **OPRA** exchanges are supported. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetOptions.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetOptions.models.ExchangeScreeningId;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetOptions.JSON;


/**
 * Options Screening Request allowing for up to three Conditions using AND Logic. |conditions|description| |---|---| |P_OPT_UNDERLYING_SECURITY_E|Underlying Security Equal To| |P_OPT_STRIKE_PRICE_E|Strike Price Equal To| |P_OPT_EXP_DATEN_E|Expiration Date (YYYYMMDD) Equal To| |P_OPT_VOLUME_G|Volume Greater Than| |P_OPT_VOLUME_GE|Volume Greater Than or Equal To| |P_OPT_VOLUME_L|Volume Less Than| |P_OPT_VOLUME_LE|Volume Less Than or Equal To| |P_OPT_VOLUME_E|Volume Equal To| |P_OPT_OPTION_TYPE_E|Option Type (1&#x3D; Equity, 2&#x3D;Index)| |P_OPT_CALL_OR_PUT_E|Call or Put (0&#x3D;Call, 1&#x3D;Put)| 
 */
@ApiModel(description = "Options Screening Request allowing for up to three Conditions using AND Logic. |conditions|description| |---|---| |P_OPT_UNDERLYING_SECURITY_E|Underlying Security Equal To| |P_OPT_STRIKE_PRICE_E|Strike Price Equal To| |P_OPT_EXP_DATEN_E|Expiration Date (YYYYMMDD) Equal To| |P_OPT_VOLUME_G|Volume Greater Than| |P_OPT_VOLUME_GE|Volume Greater Than or Equal To| |P_OPT_VOLUME_L|Volume Less Than| |P_OPT_VOLUME_LE|Volume Less Than or Equal To| |P_OPT_VOLUME_E|Volume Equal To| |P_OPT_OPTION_TYPE_E|Option Type (1= Equity, 2=Index)| |P_OPT_CALL_OR_PUT_E|Call or Put (0=Call, 1=Put)| ")
@JsonPropertyOrder({
  OptionScreeningRequest.JSON_PROPERTY_IDS,
  OptionScreeningRequest.JSON_PROPERTY_CONDITION_ONE,
  OptionScreeningRequest.JSON_PROPERTY_CONDITION_ONE_VALUE,
  OptionScreeningRequest.JSON_PROPERTY_CONDITION_TWO,
  OptionScreeningRequest.JSON_PROPERTY_CONDITION_TWO_VALUE,
  OptionScreeningRequest.JSON_PROPERTY_CONDITION_THREE,
  OptionScreeningRequest.JSON_PROPERTY_CONDITION_THREE_VALUE,
  OptionScreeningRequest.JSON_PROPERTY_DATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OptionScreeningRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_IDS = "ids";
  private ExchangeScreeningId ids = ExchangeScreeningId.USA_OPTS;

  /**
   * The primary condition.
   */
  public enum ConditionOneEnum {
    UNDERLYING_SECURITY_E("P_OPT_UNDERLYING_SECURITY_E"),
    
    STRIKE_PRICE_E("P_OPT_STRIKE_PRICE_E"),
    
    EXP_DATEN_E("P_OPT_EXP_DATEN_E"),
    
    VOLUME_G("P_OPT_VOLUME_G"),
    
    VOLUME_GE("P_OPT_VOLUME_GE"),
    
    VOLUME_L("P_OPT_VOLUME_L"),
    
    VOLUME_LE("P_OPT_VOLUME_LE"),
    
    VOLUME_E("P_OPT_VOLUME_E"),
    
    OPTION_TYPE_E("P_OPT_OPTION_TYPE_E"),
    
    CALL_OR_PUT_E("P_OPT_CALL_OR_PUT_E");

    private String value;

    ConditionOneEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ConditionOneEnum fromValue(String value) {
      for (ConditionOneEnum b : ConditionOneEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONDITION_ONE = "conditionOne";
  private ConditionOneEnum conditionOne;

  public static final String JSON_PROPERTY_CONDITION_ONE_VALUE = "conditionOneValue";
  private String conditionOneValue;

  /**
   * Gets or Sets conditionTwo
   */
  public enum ConditionTwoEnum {
    UNDERLYING_SECURITY_E("P_OPT_UNDERLYING_SECURITY_E"),
    
    STRIKE_PRICE_E("P_OPT_STRIKE_PRICE_E"),
    
    EXP_DATEN_E("P_OPT_EXP_DATEN_E"),
    
    VOLUME_G("P_OPT_VOLUME_G"),
    
    VOLUME_GE("P_OPT_VOLUME_GE"),
    
    VOLUME_L("P_OPT_VOLUME_L"),
    
    VOLUME_LE("P_OPT_VOLUME_LE"),
    
    VOLUME_E("P_OPT_VOLUME_E"),
    
    OPTION_TYPE_E("P_OPT_OPTION_TYPE_E"),
    
    CALL_OR_PUT_E("P_OPT_CALL_OR_PUT_E");

    private String value;

    ConditionTwoEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ConditionTwoEnum fromValue(String value) {
      for (ConditionTwoEnum b : ConditionTwoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONDITION_TWO = "conditionTwo";
  private ConditionTwoEnum conditionTwo;

  public static final String JSON_PROPERTY_CONDITION_TWO_VALUE = "conditionTwoValue";
  private String conditionTwoValue;

  /**
   * Gets or Sets conditionThree
   */
  public enum ConditionThreeEnum {
    UNDERLYING_SECURITY_E("P_OPT_UNDERLYING_SECURITY_E"),
    
    STRIKE_PRICE_E("P_OPT_STRIKE_PRICE_E"),
    
    EXP_DATEN_E("P_OPT_EXP_DATEN_E"),
    
    VOLUME_G("P_OPT_VOLUME_G"),
    
    VOLUME_GE("P_OPT_VOLUME_GE"),
    
    VOLUME_L("P_OPT_VOLUME_L"),
    
    VOLUME_LE("P_OPT_VOLUME_LE"),
    
    VOLUME_E("P_OPT_VOLUME_E"),
    
    OPTION_TYPE_E("P_OPT_OPTION_TYPE_E"),
    
    CALL_OR_PUT_E("P_OPT_CALL_OR_PUT_E");

    private String value;

    ConditionThreeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ConditionThreeEnum fromValue(String value) {
      for (ConditionThreeEnum b : ConditionThreeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONDITION_THREE = "conditionThree";
  private ConditionThreeEnum conditionThree;

  public static final String JSON_PROPERTY_CONDITION_THREE_VALUE = "conditionThreeValue";
  private String conditionThreeValue;

  public static final String JSON_PROPERTY_DATE = "date";
  private String date;

  public OptionScreeningRequest() { 
  }

  @JsonCreator
  public OptionScreeningRequest(
    @JsonProperty(value=JSON_PROPERTY_IDS, required=true) ExchangeScreeningId ids, 
    @JsonProperty(value=JSON_PROPERTY_CONDITION_ONE, required=true) ConditionOneEnum conditionOne, 
    @JsonProperty(value=JSON_PROPERTY_CONDITION_ONE_VALUE, required=true) String conditionOneValue
  ) {
    this();
    this.ids = ids;
    this.conditionOne = conditionOne;
    this.conditionOneValue = conditionOneValue;
  }

  public OptionScreeningRequest ids(ExchangeScreeningId ids) {
    this.ids = ids;
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ExchangeScreeningId getIds() {
    return ids;
  }


  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIds(ExchangeScreeningId ids) {
    this.ids = ids;
  }


  public OptionScreeningRequest conditionOne(ConditionOneEnum conditionOne) {
    this.conditionOne = conditionOne;
    return this;
  }

   /**
   * The primary condition.
   * @return conditionOne
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "P_OPT_UNDERLYING_SECURITY_E", required = true, value = "The primary condition.")
  @JsonProperty(JSON_PROPERTY_CONDITION_ONE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ConditionOneEnum getConditionOne() {
    return conditionOne;
  }


  @JsonProperty(JSON_PROPERTY_CONDITION_ONE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConditionOne(ConditionOneEnum conditionOne) {
    this.conditionOne = conditionOne;
  }


  public OptionScreeningRequest conditionOneValue(String conditionOneValue) {
    this.conditionOneValue = conditionOneValue;
    return this;
  }

   /**
   * Get conditionOneValue
   * @return conditionOneValue
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "AAPL", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONDITION_ONE_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getConditionOneValue() {
    return conditionOneValue;
  }


  @JsonProperty(JSON_PROPERTY_CONDITION_ONE_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConditionOneValue(String conditionOneValue) {
    this.conditionOneValue = conditionOneValue;
  }


  public OptionScreeningRequest conditionTwo(ConditionTwoEnum conditionTwo) {
    this.conditionTwo = conditionTwo;
    return this;
  }

   /**
   * Get conditionTwo
   * @return conditionTwo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "P_OPT_CALL_OR_PUT_E", value = "")
  @JsonProperty(JSON_PROPERTY_CONDITION_TWO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConditionTwoEnum getConditionTwo() {
    return conditionTwo;
  }


  @JsonProperty(JSON_PROPERTY_CONDITION_TWO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConditionTwo(ConditionTwoEnum conditionTwo) {
    this.conditionTwo = conditionTwo;
  }


  public OptionScreeningRequest conditionTwoValue(String conditionTwoValue) {
    this.conditionTwoValue = conditionTwoValue;
    return this;
  }

   /**
   * Get conditionTwoValue
   * @return conditionTwoValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")
  @JsonProperty(JSON_PROPERTY_CONDITION_TWO_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConditionTwoValue() {
    return conditionTwoValue;
  }


  @JsonProperty(JSON_PROPERTY_CONDITION_TWO_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConditionTwoValue(String conditionTwoValue) {
    this.conditionTwoValue = conditionTwoValue;
  }


  public OptionScreeningRequest conditionThree(ConditionThreeEnum conditionThree) {
    this.conditionThree = conditionThree;
    return this;
  }

   /**
   * Get conditionThree
   * @return conditionThree
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "P_OPT_VOLUME_G", value = "")
  @JsonProperty(JSON_PROPERTY_CONDITION_THREE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConditionThreeEnum getConditionThree() {
    return conditionThree;
  }


  @JsonProperty(JSON_PROPERTY_CONDITION_THREE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConditionThree(ConditionThreeEnum conditionThree) {
    this.conditionThree = conditionThree;
  }


  public OptionScreeningRequest conditionThreeValue(String conditionThreeValue) {
    this.conditionThreeValue = conditionThreeValue;
    return this;
  }

   /**
   * Get conditionThreeValue
   * @return conditionThreeValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")
  @JsonProperty(JSON_PROPERTY_CONDITION_THREE_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConditionThreeValue() {
    return conditionThreeValue;
  }


  @JsonProperty(JSON_PROPERTY_CONDITION_THREE_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConditionThreeValue(String conditionThreeValue) {
    this.conditionThreeValue = conditionThreeValue;
  }


  public OptionScreeningRequest date(String date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-03-31", value = "")
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(String date) {
    this.date = date;
  }


  /**
   * Return true if this optionScreeningRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptionScreeningRequest optionScreeningRequest = (OptionScreeningRequest) o;
    return Objects.equals(this.ids, optionScreeningRequest.ids) &&
        Objects.equals(this.conditionOne, optionScreeningRequest.conditionOne) &&
        Objects.equals(this.conditionOneValue, optionScreeningRequest.conditionOneValue) &&
        Objects.equals(this.conditionTwo, optionScreeningRequest.conditionTwo) &&
        Objects.equals(this.conditionTwoValue, optionScreeningRequest.conditionTwoValue) &&
        Objects.equals(this.conditionThree, optionScreeningRequest.conditionThree) &&
        Objects.equals(this.conditionThreeValue, optionScreeningRequest.conditionThreeValue) &&
        Objects.equals(this.date, optionScreeningRequest.date);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, conditionOne, conditionOneValue, conditionTwo, conditionTwoValue, conditionThree, conditionThreeValue, date);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptionScreeningRequest {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    conditionOne: ").append(toIndentedString(conditionOne)).append("\n");
    sb.append("    conditionOneValue: ").append(toIndentedString(conditionOneValue)).append("\n");
    sb.append("    conditionTwo: ").append(toIndentedString(conditionTwo)).append("\n");
    sb.append("    conditionTwoValue: ").append(toIndentedString(conditionTwoValue)).append("\n");
    sb.append("    conditionThree: ").append(toIndentedString(conditionThree)).append("\n");
    sb.append("    conditionThreeValue: ").append(toIndentedString(conditionThreeValue)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

