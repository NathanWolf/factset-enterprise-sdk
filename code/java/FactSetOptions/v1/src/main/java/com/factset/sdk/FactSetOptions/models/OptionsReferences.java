/*
 * FactSet Options API
 * The Option Prices database provides pricing data such as mid bid-ask price, reference data (e.g., strike price), and risk measures (e.g., Greeks and implied volatility). Visit [Options Overview OA Page # 14925](https://my.apps.factset.com/oa/pages/14925) for details on database coverage. U.S. exchange-traded option bid and ask quotes are continuously updated throughout the day even when no trades have occurred on the option (zero volume). The end-of-day closing bid and ask quotes are always in line with the underlying closing price.  **Note** * Currently in Beta only **OPRA** exchanges are supported. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetOptions.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetOptions.JSON;


/**
 * Options Reference Response Fields
 */
@ApiModel(description = "Options Reference Response Fields")
@JsonPropertyOrder({
  OptionsReferences.JSON_PROPERTY_FSYM_ID,
  OptionsReferences.JSON_PROPERTY_ADJUSTED_FLAG,
  OptionsReferences.JSON_PROPERTY_CALL_PUT_FLAG,
  OptionsReferences.JSON_PROPERTY_CALL_PUT_PAIR_SYMBOL,
  OptionsReferences.JSON_PROPERTY_CONTRACT_SIZE,
  OptionsReferences.JSON_PROPERTY_CURRENCY,
  OptionsReferences.JSON_PROPERTY_EXCHANGE,
  OptionsReferences.JSON_PROPERTY_EXPIRATION_DATE,
  OptionsReferences.JSON_PROPERTY_EXPIRATION_FREQUENCY,
  OptionsReferences.JSON_PROPERTY_EXPIRATION_MONTH,
  OptionsReferences.JSON_PROPERTY_LEPO_FLAG,
  OptionsReferences.JSON_PROPERTY_NAME,
  OptionsReferences.JSON_PROPERTY_OCC21_SYMBOL,
  OptionsReferences.JSON_PROPERTY_OPRA17_SYMBOL,
  OptionsReferences.JSON_PROPERTY_ROOT_TICKER,
  OptionsReferences.JSON_PROPERTY_STYLE,
  OptionsReferences.JSON_PROPERTY_TYPE,
  OptionsReferences.JSON_PROPERTY_UNDERLYING_FSYM_SECURITY_ID,
  OptionsReferences.JSON_PROPERTY_DATE,
  OptionsReferences.JSON_PROPERTY_SETTLEMENT_METHOD,
  OptionsReferences.JSON_PROPERTY_REQUEST_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OptionsReferences implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_FSYM_ID = "fsymId";
  private String fsymId;

  public static final String JSON_PROPERTY_ADJUSTED_FLAG = "adjustedFlag";
  private String adjustedFlag;

  public static final String JSON_PROPERTY_CALL_PUT_FLAG = "callPutFlag";
  private Integer callPutFlag;

  public static final String JSON_PROPERTY_CALL_PUT_PAIR_SYMBOL = "callPutPairSymbol";
  private String callPutPairSymbol;

  public static final String JSON_PROPERTY_CONTRACT_SIZE = "contractSize";
  private Integer contractSize;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;

  public static final String JSON_PROPERTY_EXCHANGE = "exchange";
  private String exchange;

  public static final String JSON_PROPERTY_EXPIRATION_DATE = "expirationDate";
  private LocalDate expirationDate;

  public static final String JSON_PROPERTY_EXPIRATION_FREQUENCY = "expirationFrequency";
  private String expirationFrequency;

  public static final String JSON_PROPERTY_EXPIRATION_MONTH = "expirationMonth";
  private String expirationMonth;

  public static final String JSON_PROPERTY_LEPO_FLAG = "lepoFlag";
  private Integer lepoFlag;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_OCC21_SYMBOL = "occ21Symbol";
  private String occ21Symbol;

  public static final String JSON_PROPERTY_OPRA17_SYMBOL = "opra17Symbol";
  private String opra17Symbol;

  public static final String JSON_PROPERTY_ROOT_TICKER = "rootTicker";
  private String rootTicker;

  public static final String JSON_PROPERTY_STYLE = "style";
  private Integer style;

  public static final String JSON_PROPERTY_TYPE = "type";
  private Integer type;

  public static final String JSON_PROPERTY_UNDERLYING_FSYM_SECURITY_ID = "underlyingFsymSecurityId";
  private String underlyingFsymSecurityId;

  public static final String JSON_PROPERTY_DATE = "date";
  private LocalDate date;

  public static final String JSON_PROPERTY_SETTLEMENT_METHOD = "settlementMethod";
  private String settlementMethod;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public OptionsReferences() { 
  }

  public OptionsReferences fsymId(String fsymId) {
    this.fsymId = fsymId;
    return this;
  }

   /**
   * FactSet&#39;s Option Symbol. For more detail, visit [OA 12636](https://my.apps.factset.com/oa/pages/12636#options)
   * @return fsymId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TSLA.US#C00LP", value = "FactSet's Option Symbol. For more detail, visit [OA 12636](https://my.apps.factset.com/oa/pages/12636#options)")
  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFsymId() {
    return fsymId;
  }


  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFsymId(String fsymId) {
    this.fsymId = fsymId;
  }


  public OptionsReferences adjustedFlag(String adjustedFlag) {
    this.adjustedFlag = adjustedFlag;
    return this;
  }

   /**
   * Indicates whether or not a given option contract is adjusted for corporate actions in Y/N format.
   * @return adjustedFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "N", value = "Indicates whether or not a given option contract is adjusted for corporate actions in Y/N format.")
  @JsonProperty(JSON_PROPERTY_ADJUSTED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdjustedFlag() {
    return adjustedFlag;
  }


  @JsonProperty(JSON_PROPERTY_ADJUSTED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdjustedFlag(String adjustedFlag) {
    this.adjustedFlag = adjustedFlag;
  }


  public OptionsReferences callPutFlag(Integer callPutFlag) {
    this.callPutFlag = callPutFlag;
    return this;
  }

   /**
   * Returns a 0 if the option is a call, returns a 1 if the option is a put.
   * @return callPutFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Returns a 0 if the option is a call, returns a 1 if the option is a put.")
  @JsonProperty(JSON_PROPERTY_CALL_PUT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCallPutFlag() {
    return callPutFlag;
  }


  @JsonProperty(JSON_PROPERTY_CALL_PUT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCallPutFlag(Integer callPutFlag) {
    this.callPutFlag = callPutFlag;
  }


  public OptionsReferences callPutPairSymbol(String callPutPairSymbol) {
    this.callPutPairSymbol = callPutPairSymbol;
    return this;
  }

   /**
   * Returns the corresponding put symbol given a call symbol; and vice-versa.
   * @return callPutPairSymbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TSLA.US#PGGVL", value = "Returns the corresponding put symbol given a call symbol; and vice-versa.")
  @JsonProperty(JSON_PROPERTY_CALL_PUT_PAIR_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCallPutPairSymbol() {
    return callPutPairSymbol;
  }


  @JsonProperty(JSON_PROPERTY_CALL_PUT_PAIR_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCallPutPairSymbol(String callPutPairSymbol) {
    this.callPutPairSymbol = callPutPairSymbol;
  }


  public OptionsReferences contractSize(Integer contractSize) {
    this.contractSize = contractSize;
    return this;
  }

   /**
   * The Option Contract Size
   * @return contractSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "The Option Contract Size")
  @JsonProperty(JSON_PROPERTY_CONTRACT_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getContractSize() {
    return contractSize;
  }


  @JsonProperty(JSON_PROPERTY_CONTRACT_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContractSize(Integer contractSize) {
    this.contractSize = contractSize;
  }


  public OptionsReferences currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Option Currency in ISO3 format.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "Option Currency in ISO3 format.")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public OptionsReferences exchange(String exchange) {
    this.exchange = exchange;
    return this;
  }

   /**
   * Option Exchange ISO. Visit [OA 14925](https://my.apps.factset.com/oa/pages/14925) for a list of Exchange ISOs.
   * @return exchange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USA", value = "Option Exchange ISO. Visit [OA 14925](https://my.apps.factset.com/oa/pages/14925) for a list of Exchange ISOs.")
  @JsonProperty(JSON_PROPERTY_EXCHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExchange() {
    return exchange;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExchange(String exchange) {
    this.exchange = exchange;
  }


  public OptionsReferences expirationDate(LocalDate expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * The date on which an options contract is no longer valid and, therefore, ceases to exist, in YYYY-MM-DD format
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Fri Sep 17 00:00:00 UTC 2021", value = "The date on which an options contract is no longer valid and, therefore, ceases to exist, in YYYY-MM-DD format")
  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getExpirationDate() {
    return expirationDate;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpirationDate(LocalDate expirationDate) {
    this.expirationDate = expirationDate;
  }


  public OptionsReferences expirationFrequency(String expirationFrequency) {
    this.expirationFrequency = expirationFrequency;
    return this;
  }

   /**
   * Returns the corresponding expiration frequency for a given option symbol. If an option has more than four expiration months, then a Long-term Equity Anticipation Security (LEAPS) indicator will be returned.
   * @return expirationFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "LEAPS", value = "Returns the corresponding expiration frequency for a given option symbol. If an option has more than four expiration months, then a Long-term Equity Anticipation Security (LEAPS) indicator will be returned.")
  @JsonProperty(JSON_PROPERTY_EXPIRATION_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpirationFrequency() {
    return expirationFrequency;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpirationFrequency(String expirationFrequency) {
    this.expirationFrequency = expirationFrequency;
  }


  public OptionsReferences expirationMonth(String expirationMonth) {
    this.expirationMonth = expirationMonth;
    return this;
  }

   /**
   * Option Expiration month in MMM format.
   * @return expirationMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SEP", value = "Option Expiration month in MMM format.")
  @JsonProperty(JSON_PROPERTY_EXPIRATION_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpirationMonth() {
    return expirationMonth;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpirationMonth(String expirationMonth) {
    this.expirationMonth = expirationMonth;
  }


  public OptionsReferences lepoFlag(Integer lepoFlag) {
    this.lepoFlag = lepoFlag;
    return this;
  }

   /**
   * Indicates whether or not a given options contract is a Low Exercise Price Option \&quot;LEPO\&quot; (0/1). This is unique to European Options (e.g. ASX exchange).
   * @return lepoFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether or not a given options contract is a Low Exercise Price Option \"LEPO\" (0/1). This is unique to European Options (e.g. ASX exchange).")
  @JsonProperty(JSON_PROPERTY_LEPO_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLepoFlag() {
    return lepoFlag;
  }


  @JsonProperty(JSON_PROPERTY_LEPO_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLepoFlag(Integer lepoFlag) {
    this.lepoFlag = lepoFlag;
  }


  public OptionsReferences name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Option Descriptive Security Name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Tesla Inc Call SEP21 190.00 (LEAPs)", value = "Option Descriptive Security Name")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public OptionsReferences occ21Symbol(String occ21Symbol) {
    this.occ21Symbol = occ21Symbol;
    return this;
  }

   /**
   * Options Clearing Corporation OSI Series Key This option symbol has up to 21 alphanumeric characters (excluding -ISO and # sign) and uses the following syntax- (Underlying Symbol + # + Expiration Year + Expiration Month + Expiration Day + Call/Put Indicator + Five-Digit Strike Dollar + Three-Digit Strike Decimal + - + ISO) 
   * @return occ21Symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TSLA#210917C00190000", value = "Options Clearing Corporation OSI Series Key This option symbol has up to 21 alphanumeric characters (excluding -ISO and # sign) and uses the following syntax- (Underlying Symbol + # + Expiration Year + Expiration Month + Expiration Day + Call/Put Indicator + Five-Digit Strike Dollar + Three-Digit Strike Decimal + - + ISO) ")
  @JsonProperty(JSON_PROPERTY_OCC21_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOcc21Symbol() {
    return occ21Symbol;
  }


  @JsonProperty(JSON_PROPERTY_OCC21_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOcc21Symbol(String occ21Symbol) {
    this.occ21Symbol = occ21Symbol;
  }


  public OptionsReferences opra17Symbol(String opra17Symbol) {
    this.opra17Symbol = opra17Symbol;
    return this;
  }

   /**
   * Options Price Reporting Authority&#39;s OSI Series Key. This option symbol has up to 17 alphanumeric characters (excluding the -ISO and #) and uses the following syntax - (Underlying Symbol + # + Call/Put Expiration Month Code + Expiration Day + Expiration Year + Decimal Indicator + Strike Price + - + ISO) 
   * @return opra17Symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TSLA#I1721C190000", value = "Options Price Reporting Authority's OSI Series Key. This option symbol has up to 17 alphanumeric characters (excluding the -ISO and #) and uses the following syntax - (Underlying Symbol + # + Call/Put Expiration Month Code + Expiration Day + Expiration Year + Decimal Indicator + Strike Price + - + ISO) ")
  @JsonProperty(JSON_PROPERTY_OPRA17_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOpra17Symbol() {
    return opra17Symbol;
  }


  @JsonProperty(JSON_PROPERTY_OPRA17_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOpra17Symbol(String opra17Symbol) {
    this.opra17Symbol = opra17Symbol;
  }


  public OptionsReferences rootTicker(String rootTicker) {
    this.rootTicker = rootTicker;
    return this;
  }

   /**
   * The Root Ticker for the underlying security.
   * @return rootTicker
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TSLA", value = "The Root Ticker for the underlying security.")
  @JsonProperty(JSON_PROPERTY_ROOT_TICKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRootTicker() {
    return rootTicker;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_TICKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootTicker(String rootTicker) {
    this.rootTicker = rootTicker;
  }


  public OptionsReferences style(Integer style) {
    this.style = style;
    return this;
  }

   /**
   * Returns the style of the option id requested, where -   |style|description| |---|---| |0|American| |1|European|  An American style option can be exercised anytime during its life. The majority of exchange-traded options are American.  Since investors have the freedom to exercise their American options at any point during the life of the contract, they are more valuable than European options which can only be exercised at maturity.  Consider this example -  If you bought a Ford March Call option expiring in March of 2006 in March 2005, you would have the right to exercise the call option at anytime up until its expiration date. Had the Ford option been a European option, you could only exercise the option at the expiry date in March &#39;06. During the year, the share price could have been most optimal for exercise in December of 2005, but you would have to wait to exercise your option until March 2006, where it could be out-of-the-money and virtually worthless.  Note that the name of this option style has nothing to do with the geographic location. 
   * @return style
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Returns the style of the option id requested, where -   |style|description| |---|---| |0|American| |1|European|  An American style option can be exercised anytime during its life. The majority of exchange-traded options are American.  Since investors have the freedom to exercise their American options at any point during the life of the contract, they are more valuable than European options which can only be exercised at maturity.  Consider this example -  If you bought a Ford March Call option expiring in March of 2006 in March 2005, you would have the right to exercise the call option at anytime up until its expiration date. Had the Ford option been a European option, you could only exercise the option at the expiry date in March '06. During the year, the share price could have been most optimal for exercise in December of 2005, but you would have to wait to exercise your option until March 2006, where it could be out-of-the-money and virtually worthless.  Note that the name of this option style has nothing to do with the geographic location. ")
  @JsonProperty(JSON_PROPERTY_STYLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStyle() {
    return style;
  }


  @JsonProperty(JSON_PROPERTY_STYLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStyle(Integer style) {
    this.style = style;
  }


  public OptionsReferences type(Integer type) {
    this.type = type;
    return this;
  }

   /**
   * The option type code, where  |code|description| |---|---| |0|Equity Option| |2|Index Option| |99|Option on an ETF| |60|Option on a Future| |19|Option on a Spot FX Rate| 
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The option type code, where  |code|description| |---|---| |0|Equity Option| |2|Index Option| |99|Option on an ETF| |60|Option on a Future| |19|Option on a Spot FX Rate| ")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(Integer type) {
    this.type = type;
  }


  public OptionsReferences underlyingFsymSecurityId(String underlyingFsymSecurityId) {
    this.underlyingFsymSecurityId = underlyingFsymSecurityId;
    return this;
  }

   /**
   * Underlying FactSet Security Permanent Identifier in XXXXXX-S format.
   * @return underlyingFsymSecurityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "WWDPYB-S", value = "Underlying FactSet Security Permanent Identifier in XXXXXX-S format.")
  @JsonProperty(JSON_PROPERTY_UNDERLYING_FSYM_SECURITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUnderlyingFsymSecurityId() {
    return underlyingFsymSecurityId;
  }


  @JsonProperty(JSON_PROPERTY_UNDERLYING_FSYM_SECURITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnderlyingFsymSecurityId(String underlyingFsymSecurityId) {
    this.underlyingFsymSecurityId = underlyingFsymSecurityId;
  }


  public OptionsReferences date(LocalDate date) {
    this.date = date;
    return this;
  }

   /**
   * The date the data is as of in YYYY-MM-DD format.
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Fri May 07 00:00:00 UTC 2021", value = "The date the data is as of in YYYY-MM-DD format.")
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(LocalDate date) {
    this.date = date;
  }


  public OptionsReferences settlementMethod(String settlementMethod) {
    this.settlementMethod = settlementMethod;
    return this;
  }

   /**
   * The contract settlement method. Possible values are - |method|description| |---|---| |C|Cash| |P|Physical| |NA|Not Covered| 
   * @return settlementMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The contract settlement method. Possible values are - |method|description| |---|---| |C|Cash| |P|Physical| |NA|Not Covered| ")
  @JsonProperty(JSON_PROPERTY_SETTLEMENT_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSettlementMethod() {
    return settlementMethod;
  }


  @JsonProperty(JSON_PROPERTY_SETTLEMENT_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSettlementMethod(String settlementMethod) {
    this.settlementMethod = settlementMethod;
  }


  public OptionsReferences requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * The requested identifier submitted in the query.
   * @return requestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TSLA.US#C00LP", value = "The requested identifier submitted in the query.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  /**
   * Return true if this optionsReferences object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptionsReferences optionsReferences = (OptionsReferences) o;
    return Objects.equals(this.fsymId, optionsReferences.fsymId) &&
        Objects.equals(this.adjustedFlag, optionsReferences.adjustedFlag) &&
        Objects.equals(this.callPutFlag, optionsReferences.callPutFlag) &&
        Objects.equals(this.callPutPairSymbol, optionsReferences.callPutPairSymbol) &&
        Objects.equals(this.contractSize, optionsReferences.contractSize) &&
        Objects.equals(this.currency, optionsReferences.currency) &&
        Objects.equals(this.exchange, optionsReferences.exchange) &&
        Objects.equals(this.expirationDate, optionsReferences.expirationDate) &&
        Objects.equals(this.expirationFrequency, optionsReferences.expirationFrequency) &&
        Objects.equals(this.expirationMonth, optionsReferences.expirationMonth) &&
        Objects.equals(this.lepoFlag, optionsReferences.lepoFlag) &&
        Objects.equals(this.name, optionsReferences.name) &&
        Objects.equals(this.occ21Symbol, optionsReferences.occ21Symbol) &&
        Objects.equals(this.opra17Symbol, optionsReferences.opra17Symbol) &&
        Objects.equals(this.rootTicker, optionsReferences.rootTicker) &&
        Objects.equals(this.style, optionsReferences.style) &&
        Objects.equals(this.type, optionsReferences.type) &&
        Objects.equals(this.underlyingFsymSecurityId, optionsReferences.underlyingFsymSecurityId) &&
        Objects.equals(this.date, optionsReferences.date) &&
        Objects.equals(this.settlementMethod, optionsReferences.settlementMethod) &&
        Objects.equals(this.requestId, optionsReferences.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fsymId, adjustedFlag, callPutFlag, callPutPairSymbol, contractSize, currency, exchange, expirationDate, expirationFrequency, expirationMonth, lepoFlag, name, occ21Symbol, opra17Symbol, rootTicker, style, type, underlyingFsymSecurityId, date, settlementMethod, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptionsReferences {\n");
    sb.append("    fsymId: ").append(toIndentedString(fsymId)).append("\n");
    sb.append("    adjustedFlag: ").append(toIndentedString(adjustedFlag)).append("\n");
    sb.append("    callPutFlag: ").append(toIndentedString(callPutFlag)).append("\n");
    sb.append("    callPutPairSymbol: ").append(toIndentedString(callPutPairSymbol)).append("\n");
    sb.append("    contractSize: ").append(toIndentedString(contractSize)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    expirationFrequency: ").append(toIndentedString(expirationFrequency)).append("\n");
    sb.append("    expirationMonth: ").append(toIndentedString(expirationMonth)).append("\n");
    sb.append("    lepoFlag: ").append(toIndentedString(lepoFlag)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    occ21Symbol: ").append(toIndentedString(occ21Symbol)).append("\n");
    sb.append("    opra17Symbol: ").append(toIndentedString(opra17Symbol)).append("\n");
    sb.append("    rootTicker: ").append(toIndentedString(rootTicker)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    underlyingFsymSecurityId: ").append(toIndentedString(underlyingFsymSecurityId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    settlementMethod: ").append(toIndentedString(settlementMethod)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

