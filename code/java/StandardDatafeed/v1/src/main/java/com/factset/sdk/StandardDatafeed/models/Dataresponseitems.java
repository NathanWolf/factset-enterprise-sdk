/*
 * SDF Download API
 * The Standard DataFeed (SDF) Download API provides an alternative method for users to request and retrieve SDF packages (schemas & bundles). This service is not a direct replacement and does not have 100% feature parity with the Loader Application. This API provides an alternative for users who are unable to utilize the Loader application due to following reasons:   - Inability to install 3rd party executables due to Corporate Security policies     - Inability to utilize the Loader application due to limitations or restrictions with the environment used to consume Standard Datafeed   - Clients who are utilizing existing delivery method like FTP, who may want to use a more secured & modern solution     This API allows users to retrieve maximum of latest 30 days of data     Additional parameters are available to filter requests to get the exact files users are looking for.    QFL data is delivered through Content API & Bulk Data API (SDF API)  - Content API : Provides direct access to FactSet-hosted QFL data.  Suitable for interactive, ad hoc QFL requests.  Constraints on large extracts.  Costs are based on consumption, i.e. more calls can result in more costs.  - Bulk Data API : Provides access to download locations of zip files for client download. Suitable for production processes within a client environment. Cost is based on the use case and fixed unless scope changes (same as other SDFs).
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: teammustang@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.StandardDatafeed.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.StandardDatafeed.models.DataresponseitemsRelatedBundles;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.StandardDatafeed.JSON;


/**
 * Array of data objects
 */
@ApiModel(description = "Array of data objects")
@JsonPropertyOrder({
  Dataresponseitems.JSON_PROPERTY_TYPE,
  Dataresponseitems.JSON_PROPERTY_BUNDLE,
  Dataresponseitems.JSON_PROPERTY_SCHEMA,
  Dataresponseitems.JSON_PROPERTY_SEQUENCE,
  Dataresponseitems.JSON_PROPERTY_RELATED_BUNDLES,
  Dataresponseitems.JSON_PROPERTY_TIMESTAMP,
  Dataresponseitems.JSON_PROPERTY_URL,
  Dataresponseitems.JSON_PROPERTY_FILE_SIZE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Dataresponseitems implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_BUNDLE = "bundle";
  private String bundle;

  public static final String JSON_PROPERTY_SCHEMA = "schema";
  private String schema;

  public static final String JSON_PROPERTY_SEQUENCE = "sequence";
  private String sequence;

  public static final String JSON_PROPERTY_RELATED_BUNDLES = "related_bundles";
  private java.util.List<DataresponseitemsRelatedBundles> relatedBundles = null;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private String timestamp;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_FILE_SIZE = "fileSize";
  private String fileSize;

  public Dataresponseitems() { 
  }

  public Dataresponseitems type(String type) {
    this.type = type;
    return this;
  }

   /**
   * file type, full or delta
   * @return type
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "file type, full or delta")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public Dataresponseitems bundle(String bundle) {
    this.bundle = bundle;
    return this;
  }

   /**
   * bundle name  QFL:- For QFL its Factor Group name
   * @return bundle
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "bundle name  QFL:- For QFL its Factor Group name")
  @JsonProperty(JSON_PROPERTY_BUNDLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBundle() {
    return bundle;
  }


  @JsonProperty(JSON_PROPERTY_BUNDLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBundle(String bundle) {
    this.bundle = bundle;
  }


  public Dataresponseitems schema(String schema) {
    this.schema = schema;
    return this;
  }

   /**
   * schema name  QFL:- In case of QFL its always qfl_v1
   * @return schema
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "schema name  QFL:- In case of QFL its always qfl_v1")
  @JsonProperty(JSON_PROPERTY_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSchema() {
    return schema;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchema(String schema) {
    this.schema = schema;
  }


  public Dataresponseitems sequence(String sequence) {
    this.sequence = sequence;
    return this;
  }

   /**
   * full or delta file sequence
   * @return sequence
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "full or delta file sequence")
  @JsonProperty(JSON_PROPERTY_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSequence() {
    return sequence;
  }


  @JsonProperty(JSON_PROPERTY_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSequence(String sequence) {
    this.sequence = sequence;
  }


  public Dataresponseitems relatedBundles(java.util.List<DataresponseitemsRelatedBundles> relatedBundles) {
    this.relatedBundles = relatedBundles;
    return this;
  }

  public Dataresponseitems addRelatedBundlesItem(DataresponseitemsRelatedBundles relatedBundlesItem) {
    if (this.relatedBundles == null) {
      this.relatedBundles = new java.util.ArrayList<>();
    }
    this.relatedBundles.add(relatedBundlesItem);
    return this;
  }

   /**
   * bundles related to the sequence number
   * @return relatedBundles
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "bundles related to the sequence number")
  @JsonProperty(JSON_PROPERTY_RELATED_BUNDLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<DataresponseitemsRelatedBundles> getRelatedBundles() {
    return relatedBundles;
  }


  @JsonProperty(JSON_PROPERTY_RELATED_BUNDLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelatedBundles(java.util.List<DataresponseitemsRelatedBundles> relatedBundles) {
    this.relatedBundles = relatedBundles;
  }


  public Dataresponseitems timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * time stamp of when the bundle was generated
   * @return timestamp
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "time stamp of when the bundle was generated")
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public Dataresponseitems url(String url) {
    this.url = url;
    return this;
  }

   /**
   * pre-signed downloadable url, containing the bundle information
   * @return url
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "pre-signed downloadable url, containing the bundle information")
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(String url) {
    this.url = url;
  }


  public Dataresponseitems fileSize(String fileSize) {
    this.fileSize = fileSize;
    return this;
  }

   /**
   * file size of the particular bundle
   * @return fileSize
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "file size of the particular bundle")
  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileSize() {
    return fileSize;
  }


  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileSize(String fileSize) {
    this.fileSize = fileSize;
  }


  /**
   * Return true if this dataresponseitems object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dataresponseitems dataresponseitems = (Dataresponseitems) o;
    return Objects.equals(this.type, dataresponseitems.type) &&
        Objects.equals(this.bundle, dataresponseitems.bundle) &&
        Objects.equals(this.schema, dataresponseitems.schema) &&
        Objects.equals(this.sequence, dataresponseitems.sequence) &&
        Objects.equals(this.relatedBundles, dataresponseitems.relatedBundles) &&
        Objects.equals(this.timestamp, dataresponseitems.timestamp) &&
        Objects.equals(this.url, dataresponseitems.url) &&
        Objects.equals(this.fileSize, dataresponseitems.fileSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, bundle, schema, sequence, relatedBundles, timestamp, url, fileSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dataresponseitems {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    bundle: ").append(toIndentedString(bundle)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    relatedBundles: ").append(toIndentedString(relatedBundles)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

