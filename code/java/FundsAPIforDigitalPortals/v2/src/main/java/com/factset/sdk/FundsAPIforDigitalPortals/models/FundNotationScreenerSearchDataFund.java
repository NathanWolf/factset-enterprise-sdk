/*
 * Funds API For Digital Portals
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FundsAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataFundAssetsUnderManagement;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataFundCompliance;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataFundCountryDevelopment;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataFundCurrency;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataFundDomicile;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataFundHoldingType;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataFundIndustry;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataFundIssuer;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataFundMinimumSrri;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataFundRegionalExposure;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataFundStrategy;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FundsAPIforDigitalPortals.JSON;


/**
 * Parameters related to funds. 
 */
@ApiModel(description = "Parameters related to funds. ")
@JsonPropertyOrder({
  FundNotationScreenerSearchDataFund.JSON_PROPERTY_ETF,
  FundNotationScreenerSearchDataFund.JSON_PROPERTY_CURRENCY,
  FundNotationScreenerSearchDataFund.JSON_PROPERTY_DOMICILE,
  FundNotationScreenerSearchDataFund.JSON_PROPERTY_HOLDING_TYPE,
  FundNotationScreenerSearchDataFund.JSON_PROPERTY_COUNTRY_DEVELOPMENT,
  FundNotationScreenerSearchDataFund.JSON_PROPERTY_REGIONAL_EXPOSURE,
  FundNotationScreenerSearchDataFund.JSON_PROPERTY_STRATEGY,
  FundNotationScreenerSearchDataFund.JSON_PROPERTY_INDUSTRY,
  FundNotationScreenerSearchDataFund.JSON_PROPERTY_MINIMUM_SRRI,
  FundNotationScreenerSearchDataFund.JSON_PROPERTY_ISSUER,
  FundNotationScreenerSearchDataFund.JSON_PROPERTY_ASSETS_UNDER_MANAGEMENT,
  FundNotationScreenerSearchDataFund.JSON_PROPERTY_COMPLIANCE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FundNotationScreenerSearchDataFund implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Defines whether or not notations belonging to ETF share classes are included in the result.
   */
  public enum EtfEnum {
    ONLY("only"),
    
    INCLUDE("include"),
    
    EXCLUDE("exclude");

    private String value;

    EtfEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EtfEnum fromValue(String value) {
      for (EtfEnum b : EtfEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ETF = "etf";
  private EtfEnum etf = EtfEnum.INCLUDE;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private FundNotationScreenerSearchDataFundCurrency currency;

  public static final String JSON_PROPERTY_DOMICILE = "domicile";
  private FundNotationScreenerSearchDataFundDomicile domicile;

  public static final String JSON_PROPERTY_HOLDING_TYPE = "holdingType";
  private FundNotationScreenerSearchDataFundHoldingType holdingType;

  public static final String JSON_PROPERTY_COUNTRY_DEVELOPMENT = "countryDevelopment";
  private FundNotationScreenerSearchDataFundCountryDevelopment countryDevelopment;

  public static final String JSON_PROPERTY_REGIONAL_EXPOSURE = "regionalExposure";
  private FundNotationScreenerSearchDataFundRegionalExposure regionalExposure;

  public static final String JSON_PROPERTY_STRATEGY = "strategy";
  private FundNotationScreenerSearchDataFundStrategy strategy;

  public static final String JSON_PROPERTY_INDUSTRY = "industry";
  private FundNotationScreenerSearchDataFundIndustry industry;

  public static final String JSON_PROPERTY_MINIMUM_SRRI = "minimumSrri";
  private FundNotationScreenerSearchDataFundMinimumSrri minimumSrri;

  public static final String JSON_PROPERTY_ISSUER = "issuer";
  private FundNotationScreenerSearchDataFundIssuer issuer;

  public static final String JSON_PROPERTY_ASSETS_UNDER_MANAGEMENT = "assetsUnderManagement";
  private FundNotationScreenerSearchDataFundAssetsUnderManagement assetsUnderManagement;

  public static final String JSON_PROPERTY_COMPLIANCE = "compliance";
  private FundNotationScreenerSearchDataFundCompliance compliance;

  public FundNotationScreenerSearchDataFund() { 
  }

  public FundNotationScreenerSearchDataFund etf(EtfEnum etf) {
    this.etf = etf;
    return this;
  }

   /**
   * Defines whether or not notations belonging to ETF share classes are included in the result.
   * @return etf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines whether or not notations belonging to ETF share classes are included in the result.")
  @JsonProperty(JSON_PROPERTY_ETF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EtfEnum getEtf() {
    return etf;
  }


  @JsonProperty(JSON_PROPERTY_ETF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEtf(EtfEnum etf) {
    this.etf = etf;
  }


  public FundNotationScreenerSearchDataFund currency(FundNotationScreenerSearchDataFundCurrency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataFundCurrency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(FundNotationScreenerSearchDataFundCurrency currency) {
    this.currency = currency;
  }


  public FundNotationScreenerSearchDataFund domicile(FundNotationScreenerSearchDataFundDomicile domicile) {
    this.domicile = domicile;
    return this;
  }

   /**
   * Get domicile
   * @return domicile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOMICILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataFundDomicile getDomicile() {
    return domicile;
  }


  @JsonProperty(JSON_PROPERTY_DOMICILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDomicile(FundNotationScreenerSearchDataFundDomicile domicile) {
    this.domicile = domicile;
  }


  public FundNotationScreenerSearchDataFund holdingType(FundNotationScreenerSearchDataFundHoldingType holdingType) {
    this.holdingType = holdingType;
    return this;
  }

   /**
   * Get holdingType
   * @return holdingType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HOLDING_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataFundHoldingType getHoldingType() {
    return holdingType;
  }


  @JsonProperty(JSON_PROPERTY_HOLDING_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHoldingType(FundNotationScreenerSearchDataFundHoldingType holdingType) {
    this.holdingType = holdingType;
  }


  public FundNotationScreenerSearchDataFund countryDevelopment(FundNotationScreenerSearchDataFundCountryDevelopment countryDevelopment) {
    this.countryDevelopment = countryDevelopment;
    return this;
  }

   /**
   * Get countryDevelopment
   * @return countryDevelopment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COUNTRY_DEVELOPMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataFundCountryDevelopment getCountryDevelopment() {
    return countryDevelopment;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY_DEVELOPMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountryDevelopment(FundNotationScreenerSearchDataFundCountryDevelopment countryDevelopment) {
    this.countryDevelopment = countryDevelopment;
  }


  public FundNotationScreenerSearchDataFund regionalExposure(FundNotationScreenerSearchDataFundRegionalExposure regionalExposure) {
    this.regionalExposure = regionalExposure;
    return this;
  }

   /**
   * Get regionalExposure
   * @return regionalExposure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_REGIONAL_EXPOSURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataFundRegionalExposure getRegionalExposure() {
    return regionalExposure;
  }


  @JsonProperty(JSON_PROPERTY_REGIONAL_EXPOSURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegionalExposure(FundNotationScreenerSearchDataFundRegionalExposure regionalExposure) {
    this.regionalExposure = regionalExposure;
  }


  public FundNotationScreenerSearchDataFund strategy(FundNotationScreenerSearchDataFundStrategy strategy) {
    this.strategy = strategy;
    return this;
  }

   /**
   * Get strategy
   * @return strategy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataFundStrategy getStrategy() {
    return strategy;
  }


  @JsonProperty(JSON_PROPERTY_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStrategy(FundNotationScreenerSearchDataFundStrategy strategy) {
    this.strategy = strategy;
  }


  public FundNotationScreenerSearchDataFund industry(FundNotationScreenerSearchDataFundIndustry industry) {
    this.industry = industry;
    return this;
  }

   /**
   * Get industry
   * @return industry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INDUSTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataFundIndustry getIndustry() {
    return industry;
  }


  @JsonProperty(JSON_PROPERTY_INDUSTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndustry(FundNotationScreenerSearchDataFundIndustry industry) {
    this.industry = industry;
  }


  public FundNotationScreenerSearchDataFund minimumSrri(FundNotationScreenerSearchDataFundMinimumSrri minimumSrri) {
    this.minimumSrri = minimumSrri;
    return this;
  }

   /**
   * Get minimumSrri
   * @return minimumSrri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MINIMUM_SRRI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataFundMinimumSrri getMinimumSrri() {
    return minimumSrri;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_SRRI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumSrri(FundNotationScreenerSearchDataFundMinimumSrri minimumSrri) {
    this.minimumSrri = minimumSrri;
  }


  public FundNotationScreenerSearchDataFund issuer(FundNotationScreenerSearchDataFundIssuer issuer) {
    this.issuer = issuer;
    return this;
  }

   /**
   * Get issuer
   * @return issuer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ISSUER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataFundIssuer getIssuer() {
    return issuer;
  }


  @JsonProperty(JSON_PROPERTY_ISSUER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIssuer(FundNotationScreenerSearchDataFundIssuer issuer) {
    this.issuer = issuer;
  }


  public FundNotationScreenerSearchDataFund assetsUnderManagement(FundNotationScreenerSearchDataFundAssetsUnderManagement assetsUnderManagement) {
    this.assetsUnderManagement = assetsUnderManagement;
    return this;
  }

   /**
   * Get assetsUnderManagement
   * @return assetsUnderManagement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ASSETS_UNDER_MANAGEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataFundAssetsUnderManagement getAssetsUnderManagement() {
    return assetsUnderManagement;
  }


  @JsonProperty(JSON_PROPERTY_ASSETS_UNDER_MANAGEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAssetsUnderManagement(FundNotationScreenerSearchDataFundAssetsUnderManagement assetsUnderManagement) {
    this.assetsUnderManagement = assetsUnderManagement;
  }


  public FundNotationScreenerSearchDataFund compliance(FundNotationScreenerSearchDataFundCompliance compliance) {
    this.compliance = compliance;
    return this;
  }

   /**
   * Get compliance
   * @return compliance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COMPLIANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataFundCompliance getCompliance() {
    return compliance;
  }


  @JsonProperty(JSON_PROPERTY_COMPLIANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompliance(FundNotationScreenerSearchDataFundCompliance compliance) {
    this.compliance = compliance;
  }


  /**
   * Return true if this _fund_notation_screener_search_data_fund object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundNotationScreenerSearchDataFund fundNotationScreenerSearchDataFund = (FundNotationScreenerSearchDataFund) o;
    return Objects.equals(this.etf, fundNotationScreenerSearchDataFund.etf) &&
        Objects.equals(this.currency, fundNotationScreenerSearchDataFund.currency) &&
        Objects.equals(this.domicile, fundNotationScreenerSearchDataFund.domicile) &&
        Objects.equals(this.holdingType, fundNotationScreenerSearchDataFund.holdingType) &&
        Objects.equals(this.countryDevelopment, fundNotationScreenerSearchDataFund.countryDevelopment) &&
        Objects.equals(this.regionalExposure, fundNotationScreenerSearchDataFund.regionalExposure) &&
        Objects.equals(this.strategy, fundNotationScreenerSearchDataFund.strategy) &&
        Objects.equals(this.industry, fundNotationScreenerSearchDataFund.industry) &&
        Objects.equals(this.minimumSrri, fundNotationScreenerSearchDataFund.minimumSrri) &&
        Objects.equals(this.issuer, fundNotationScreenerSearchDataFund.issuer) &&
        Objects.equals(this.assetsUnderManagement, fundNotationScreenerSearchDataFund.assetsUnderManagement) &&
        Objects.equals(this.compliance, fundNotationScreenerSearchDataFund.compliance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(etf, currency, domicile, holdingType, countryDevelopment, regionalExposure, strategy, industry, minimumSrri, issuer, assetsUnderManagement, compliance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundNotationScreenerSearchDataFund {\n");
    sb.append("    etf: ").append(toIndentedString(etf)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    domicile: ").append(toIndentedString(domicile)).append("\n");
    sb.append("    holdingType: ").append(toIndentedString(holdingType)).append("\n");
    sb.append("    countryDevelopment: ").append(toIndentedString(countryDevelopment)).append("\n");
    sb.append("    regionalExposure: ").append(toIndentedString(regionalExposure)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    minimumSrri: ").append(toIndentedString(minimumSrri)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    assetsUnderManagement: ").append(toIndentedString(assetsUnderManagement)).append("\n");
    sb.append("    compliance: ").append(toIndentedString(compliance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

