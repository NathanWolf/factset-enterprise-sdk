/*
 * Funds API For Digital Portals
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FundsAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataValidationCurrency;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataValidationInstrumentSelectionList;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataValidationMarket;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataValidationNotationSelectionList;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataValidationPrices;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FundsAPIforDigitalPortals.JSON;


/**
 * Validation parameters.
 */
@ApiModel(description = "Validation parameters.")
@JsonPropertyOrder({
  FundNotationScreenerSearchDataValidation.JSON_PROPERTY_ONLY_ACTIVE,
  FundNotationScreenerSearchDataValidation.JSON_PROPERTY_PRICES,
  FundNotationScreenerSearchDataValidation.JSON_PROPERTY_CURRENCY,
  FundNotationScreenerSearchDataValidation.JSON_PROPERTY_MARKET,
  FundNotationScreenerSearchDataValidation.JSON_PROPERTY_INSTRUMENT_SELECTION_LIST,
  FundNotationScreenerSearchDataValidation.JSON_PROPERTY_NOTATION_SELECTION_LIST
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FundNotationScreenerSearchDataValidation implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ONLY_ACTIVE = "onlyActive";
  private Boolean onlyActive = true;

  public static final String JSON_PROPERTY_PRICES = "prices";
  private FundNotationScreenerSearchDataValidationPrices prices;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private FundNotationScreenerSearchDataValidationCurrency currency;

  public static final String JSON_PROPERTY_MARKET = "market";
  private FundNotationScreenerSearchDataValidationMarket market;

  public static final String JSON_PROPERTY_INSTRUMENT_SELECTION_LIST = "instrumentSelectionList";
  private FundNotationScreenerSearchDataValidationInstrumentSelectionList instrumentSelectionList;

  public static final String JSON_PROPERTY_NOTATION_SELECTION_LIST = "notationSelectionList";
  private FundNotationScreenerSearchDataValidationNotationSelectionList notationSelectionList;

  public FundNotationScreenerSearchDataValidation() { 
  }

  public FundNotationScreenerSearchDataValidation onlyActive(Boolean onlyActive) {
    this.onlyActive = onlyActive;
    return this;
  }

   /**
   * If &#x60;true&#x60;, only active notations will be returned. The term \&quot;active\&quot; reflects the fact that notations and related data is not being deleted immediately after becoming irrelevant (e.g. because the source does not provide a price anymore), but remains in general retrievable for up to 6 months.
   * @return onlyActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If `true`, only active notations will be returned. The term \"active\" reflects the fact that notations and related data is not being deleted immediately after becoming irrelevant (e.g. because the source does not provide a price anymore), but remains in general retrievable for up to 6 months.")
  @JsonProperty(JSON_PROPERTY_ONLY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOnlyActive() {
    return onlyActive;
  }


  @JsonProperty(JSON_PROPERTY_ONLY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOnlyActive(Boolean onlyActive) {
    this.onlyActive = onlyActive;
  }


  public FundNotationScreenerSearchDataValidation prices(FundNotationScreenerSearchDataValidationPrices prices) {
    this.prices = prices;
    return this;
  }

   /**
   * Get prices
   * @return prices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PRICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataValidationPrices getPrices() {
    return prices;
  }


  @JsonProperty(JSON_PROPERTY_PRICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrices(FundNotationScreenerSearchDataValidationPrices prices) {
    this.prices = prices;
  }


  public FundNotationScreenerSearchDataValidation currency(FundNotationScreenerSearchDataValidationCurrency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataValidationCurrency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(FundNotationScreenerSearchDataValidationCurrency currency) {
    this.currency = currency;
  }


  public FundNotationScreenerSearchDataValidation market(FundNotationScreenerSearchDataValidationMarket market) {
    this.market = market;
    return this;
  }

   /**
   * Get market
   * @return market
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataValidationMarket getMarket() {
    return market;
  }


  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarket(FundNotationScreenerSearchDataValidationMarket market) {
    this.market = market;
  }


  public FundNotationScreenerSearchDataValidation instrumentSelectionList(FundNotationScreenerSearchDataValidationInstrumentSelectionList instrumentSelectionList) {
    this.instrumentSelectionList = instrumentSelectionList;
    return this;
  }

   /**
   * Get instrumentSelectionList
   * @return instrumentSelectionList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INSTRUMENT_SELECTION_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataValidationInstrumentSelectionList getInstrumentSelectionList() {
    return instrumentSelectionList;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUMENT_SELECTION_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstrumentSelectionList(FundNotationScreenerSearchDataValidationInstrumentSelectionList instrumentSelectionList) {
    this.instrumentSelectionList = instrumentSelectionList;
  }


  public FundNotationScreenerSearchDataValidation notationSelectionList(FundNotationScreenerSearchDataValidationNotationSelectionList notationSelectionList) {
    this.notationSelectionList = notationSelectionList;
    return this;
  }

   /**
   * Get notationSelectionList
   * @return notationSelectionList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NOTATION_SELECTION_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataValidationNotationSelectionList getNotationSelectionList() {
    return notationSelectionList;
  }


  @JsonProperty(JSON_PROPERTY_NOTATION_SELECTION_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotationSelectionList(FundNotationScreenerSearchDataValidationNotationSelectionList notationSelectionList) {
    this.notationSelectionList = notationSelectionList;
  }


  /**
   * Return true if this _fund_notation_screener_search_data_validation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundNotationScreenerSearchDataValidation fundNotationScreenerSearchDataValidation = (FundNotationScreenerSearchDataValidation) o;
    return Objects.equals(this.onlyActive, fundNotationScreenerSearchDataValidation.onlyActive) &&
        Objects.equals(this.prices, fundNotationScreenerSearchDataValidation.prices) &&
        Objects.equals(this.currency, fundNotationScreenerSearchDataValidation.currency) &&
        Objects.equals(this.market, fundNotationScreenerSearchDataValidation.market) &&
        Objects.equals(this.instrumentSelectionList, fundNotationScreenerSearchDataValidation.instrumentSelectionList) &&
        Objects.equals(this.notationSelectionList, fundNotationScreenerSearchDataValidation.notationSelectionList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onlyActive, prices, currency, market, instrumentSelectionList, notationSelectionList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundNotationScreenerSearchDataValidation {\n");
    sb.append("    onlyActive: ").append(toIndentedString(onlyActive)).append("\n");
    sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    instrumentSelectionList: ").append(toIndentedString(instrumentSelectionList)).append("\n");
    sb.append("    notationSelectionList: ").append(toIndentedString(notationSelectionList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

