/*
 * Funds API For Digital Portals
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FundsAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FundsAPIforDigitalPortals.models.InlineResponse2005DataShareClassFeeRedemptionCurrent;
import com.factset.sdk.FundsAPIforDigitalPortals.models.InlineResponse2005DataShareClassFeeRedemptionMaximum;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FundsAPIforDigitalPortals.JSON;


/**
 * Redemption fee. It is a proportion of the redeemed investment amount paid once by the investor to the fund company when selling fund shares of the share class. Also called selling fee or exit charge.
 */
@ApiModel(description = "Redemption fee. It is a proportion of the redeemed investment amount paid once by the investor to the fund company when selling fund shares of the share class. Also called selling fee or exit charge.")
@JsonPropertyOrder({
  InlineResponse2005DataShareClassFeeRedemption.JSON_PROPERTY_CURRENT,
  InlineResponse2005DataShareClassFeeRedemption.JSON_PROPERTY_MAXIMUM
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2005DataShareClassFeeRedemption implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CURRENT = "current";
  private InlineResponse2005DataShareClassFeeRedemptionCurrent current;

  public static final String JSON_PROPERTY_MAXIMUM = "maximum";
  private InlineResponse2005DataShareClassFeeRedemptionMaximum maximum;

  public InlineResponse2005DataShareClassFeeRedemption() { 
  }

  public InlineResponse2005DataShareClassFeeRedemption current(InlineResponse2005DataShareClassFeeRedemptionCurrent current) {
    this.current = current;
    return this;
  }

   /**
   * Get current
   * @return current
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CURRENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2005DataShareClassFeeRedemptionCurrent getCurrent() {
    return current;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrent(InlineResponse2005DataShareClassFeeRedemptionCurrent current) {
    this.current = current;
  }


  public InlineResponse2005DataShareClassFeeRedemption maximum(InlineResponse2005DataShareClassFeeRedemptionMaximum maximum) {
    this.maximum = maximum;
    return this;
  }

   /**
   * Get maximum
   * @return maximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MAXIMUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2005DataShareClassFeeRedemptionMaximum getMaximum() {
    return maximum;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximum(InlineResponse2005DataShareClassFeeRedemptionMaximum maximum) {
    this.maximum = maximum;
  }


  /**
   * Return true if this inline_response_200_5_data_shareClass_fee_redemption object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2005DataShareClassFeeRedemption inlineResponse2005DataShareClassFeeRedemption = (InlineResponse2005DataShareClassFeeRedemption) o;
    return Objects.equals(this.current, inlineResponse2005DataShareClassFeeRedemption.current) &&
        Objects.equals(this.maximum, inlineResponse2005DataShareClassFeeRedemption.maximum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(current, maximum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2005DataShareClassFeeRedemption {\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

