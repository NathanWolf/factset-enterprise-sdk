/*
 * Funds API For Digital Portals
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FundsAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataShareClassAssetsUnderManagement;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataShareClassCompliance;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataShareClassCurrency;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataShareClassFee;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataShareClassLifeCycle;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataShareClassMinimumInvestment;
import com.factset.sdk.FundsAPIforDigitalPortals.models.FundNotationScreenerSearchDataShareClassRegistrationCountry;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FundsAPIforDigitalPortals.JSON;


/**
 * Parameters related to share classes.
 */
@ApiModel(description = "Parameters related to share classes.")
@JsonPropertyOrder({
  FundNotationScreenerSearchDataShareClass.JSON_PROPERTY_CURRENCY,
  FundNotationScreenerSearchDataShareClass.JSON_PROPERTY_DISTRIBUTING,
  FundNotationScreenerSearchDataShareClass.JSON_PROPERTY_REGISTRATION_COUNTRY,
  FundNotationScreenerSearchDataShareClass.JSON_PROPERTY_LIFE_CYCLE,
  FundNotationScreenerSearchDataShareClass.JSON_PROPERTY_MINIMUM_INVESTMENT,
  FundNotationScreenerSearchDataShareClass.JSON_PROPERTY_ASSETS_UNDER_MANAGEMENT,
  FundNotationScreenerSearchDataShareClass.JSON_PROPERTY_COMPLIANCE,
  FundNotationScreenerSearchDataShareClass.JSON_PROPERTY_FEE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FundNotationScreenerSearchDataShareClass implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private FundNotationScreenerSearchDataShareClassCurrency currency;

  /**
   * Defines whether or not distributing share classes are included in the result. A share class may distribute (pay out) the earnings to the investors or may reinvest them.
   */
  public enum DistributingEnum {
    ONLY("only"),
    
    INCLUDE("include"),
    
    EXCLUDE("exclude");

    private String value;

    DistributingEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DistributingEnum fromValue(String value) {
      for (DistributingEnum b : DistributingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DISTRIBUTING = "distributing";
  private DistributingEnum distributing = DistributingEnum.INCLUDE;

  public static final String JSON_PROPERTY_REGISTRATION_COUNTRY = "registrationCountry";
  private FundNotationScreenerSearchDataShareClassRegistrationCountry registrationCountry;

  public static final String JSON_PROPERTY_LIFE_CYCLE = "lifeCycle";
  private FundNotationScreenerSearchDataShareClassLifeCycle lifeCycle;

  public static final String JSON_PROPERTY_MINIMUM_INVESTMENT = "minimumInvestment";
  private FundNotationScreenerSearchDataShareClassMinimumInvestment minimumInvestment;

  public static final String JSON_PROPERTY_ASSETS_UNDER_MANAGEMENT = "assetsUnderManagement";
  private FundNotationScreenerSearchDataShareClassAssetsUnderManagement assetsUnderManagement;

  public static final String JSON_PROPERTY_COMPLIANCE = "compliance";
  private FundNotationScreenerSearchDataShareClassCompliance compliance;

  public static final String JSON_PROPERTY_FEE = "fee";
  private FundNotationScreenerSearchDataShareClassFee fee;

  public FundNotationScreenerSearchDataShareClass() { 
  }

  public FundNotationScreenerSearchDataShareClass currency(FundNotationScreenerSearchDataShareClassCurrency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataShareClassCurrency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(FundNotationScreenerSearchDataShareClassCurrency currency) {
    this.currency = currency;
  }


  public FundNotationScreenerSearchDataShareClass distributing(DistributingEnum distributing) {
    this.distributing = distributing;
    return this;
  }

   /**
   * Defines whether or not distributing share classes are included in the result. A share class may distribute (pay out) the earnings to the investors or may reinvest them.
   * @return distributing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines whether or not distributing share classes are included in the result. A share class may distribute (pay out) the earnings to the investors or may reinvest them.")
  @JsonProperty(JSON_PROPERTY_DISTRIBUTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DistributingEnum getDistributing() {
    return distributing;
  }


  @JsonProperty(JSON_PROPERTY_DISTRIBUTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistributing(DistributingEnum distributing) {
    this.distributing = distributing;
  }


  public FundNotationScreenerSearchDataShareClass registrationCountry(FundNotationScreenerSearchDataShareClassRegistrationCountry registrationCountry) {
    this.registrationCountry = registrationCountry;
    return this;
  }

   /**
   * Get registrationCountry
   * @return registrationCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_REGISTRATION_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataShareClassRegistrationCountry getRegistrationCountry() {
    return registrationCountry;
  }


  @JsonProperty(JSON_PROPERTY_REGISTRATION_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegistrationCountry(FundNotationScreenerSearchDataShareClassRegistrationCountry registrationCountry) {
    this.registrationCountry = registrationCountry;
  }


  public FundNotationScreenerSearchDataShareClass lifeCycle(FundNotationScreenerSearchDataShareClassLifeCycle lifeCycle) {
    this.lifeCycle = lifeCycle;
    return this;
  }

   /**
   * Get lifeCycle
   * @return lifeCycle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LIFE_CYCLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataShareClassLifeCycle getLifeCycle() {
    return lifeCycle;
  }


  @JsonProperty(JSON_PROPERTY_LIFE_CYCLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLifeCycle(FundNotationScreenerSearchDataShareClassLifeCycle lifeCycle) {
    this.lifeCycle = lifeCycle;
  }


  public FundNotationScreenerSearchDataShareClass minimumInvestment(FundNotationScreenerSearchDataShareClassMinimumInvestment minimumInvestment) {
    this.minimumInvestment = minimumInvestment;
    return this;
  }

   /**
   * Get minimumInvestment
   * @return minimumInvestment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MINIMUM_INVESTMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataShareClassMinimumInvestment getMinimumInvestment() {
    return minimumInvestment;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_INVESTMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumInvestment(FundNotationScreenerSearchDataShareClassMinimumInvestment minimumInvestment) {
    this.minimumInvestment = minimumInvestment;
  }


  public FundNotationScreenerSearchDataShareClass assetsUnderManagement(FundNotationScreenerSearchDataShareClassAssetsUnderManagement assetsUnderManagement) {
    this.assetsUnderManagement = assetsUnderManagement;
    return this;
  }

   /**
   * Get assetsUnderManagement
   * @return assetsUnderManagement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ASSETS_UNDER_MANAGEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataShareClassAssetsUnderManagement getAssetsUnderManagement() {
    return assetsUnderManagement;
  }


  @JsonProperty(JSON_PROPERTY_ASSETS_UNDER_MANAGEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAssetsUnderManagement(FundNotationScreenerSearchDataShareClassAssetsUnderManagement assetsUnderManagement) {
    this.assetsUnderManagement = assetsUnderManagement;
  }


  public FundNotationScreenerSearchDataShareClass compliance(FundNotationScreenerSearchDataShareClassCompliance compliance) {
    this.compliance = compliance;
    return this;
  }

   /**
   * Get compliance
   * @return compliance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COMPLIANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataShareClassCompliance getCompliance() {
    return compliance;
  }


  @JsonProperty(JSON_PROPERTY_COMPLIANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompliance(FundNotationScreenerSearchDataShareClassCompliance compliance) {
    this.compliance = compliance;
  }


  public FundNotationScreenerSearchDataShareClass fee(FundNotationScreenerSearchDataShareClassFee fee) {
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FundNotationScreenerSearchDataShareClassFee getFee() {
    return fee;
  }


  @JsonProperty(JSON_PROPERTY_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFee(FundNotationScreenerSearchDataShareClassFee fee) {
    this.fee = fee;
  }


  /**
   * Return true if this _fund_notation_screener_search_data_shareClass object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundNotationScreenerSearchDataShareClass fundNotationScreenerSearchDataShareClass = (FundNotationScreenerSearchDataShareClass) o;
    return Objects.equals(this.currency, fundNotationScreenerSearchDataShareClass.currency) &&
        Objects.equals(this.distributing, fundNotationScreenerSearchDataShareClass.distributing) &&
        Objects.equals(this.registrationCountry, fundNotationScreenerSearchDataShareClass.registrationCountry) &&
        Objects.equals(this.lifeCycle, fundNotationScreenerSearchDataShareClass.lifeCycle) &&
        Objects.equals(this.minimumInvestment, fundNotationScreenerSearchDataShareClass.minimumInvestment) &&
        Objects.equals(this.assetsUnderManagement, fundNotationScreenerSearchDataShareClass.assetsUnderManagement) &&
        Objects.equals(this.compliance, fundNotationScreenerSearchDataShareClass.compliance) &&
        Objects.equals(this.fee, fundNotationScreenerSearchDataShareClass.fee);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, distributing, registrationCountry, lifeCycle, minimumInvestment, assetsUnderManagement, compliance, fee);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundNotationScreenerSearchDataShareClass {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    distributing: ").append(toIndentedString(distributing)).append("\n");
    sb.append("    registrationCountry: ").append(toIndentedString(registrationCountry)).append("\n");
    sb.append("    lifeCycle: ").append(toIndentedString(lifeCycle)).append("\n");
    sb.append("    minimumInvestment: ").append(toIndentedString(minimumInvestment)).append("\n");
    sb.append("    assetsUnderManagement: ").append(toIndentedString(assetsUnderManagement)).append("\n");
    sb.append("    compliance: ").append(toIndentedString(compliance)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

