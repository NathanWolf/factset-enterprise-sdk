/*
 * Funds API For Digital Portals
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FundsAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FundsAPIforDigitalPortals.JSON;


/**
 * Important dates of the instrument.
 */
@ApiModel(description = "Important dates of the instrument.")
@JsonPropertyOrder({
  InlineResponse2006DataLifeCycle.JSON_PROPERTY_ISSUE,
  InlineResponse2006DataLifeCycle.JSON_PROPERTY_MATURITY,
  InlineResponse2006DataLifeCycle.JSON_PROPERTY_FISCAL_YEAR_START
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2006DataLifeCycle implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ISSUE = "issue";
  private LocalDate issue;

  public static final String JSON_PROPERTY_MATURITY = "maturity";
  private LocalDate maturity;

  public static final String JSON_PROPERTY_FISCAL_YEAR_START = "fiscalYearStart";
  private String fiscalYearStart;

  public InlineResponse2006DataLifeCycle() { 
  }

  public InlineResponse2006DataLifeCycle issue(LocalDate issue) {
    this.issue = issue;
    return this;
  }

   /**
   * Date of the issue.
   * @return issue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of the issue.")
  @JsonProperty(JSON_PROPERTY_ISSUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getIssue() {
    return issue;
  }


  @JsonProperty(JSON_PROPERTY_ISSUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIssue(LocalDate issue) {
    this.issue = issue;
  }


  public InlineResponse2006DataLifeCycle maturity(LocalDate maturity) {
    this.maturity = maturity;
    return this;
  }

   /**
   * Date of the maturity, available for life-cycle funds only.
   * @return maturity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of the maturity, available for life-cycle funds only.")
  @JsonProperty(JSON_PROPERTY_MATURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getMaturity() {
    return maturity;
  }


  @JsonProperty(JSON_PROPERTY_MATURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaturity(LocalDate maturity) {
    this.maturity = maturity;
  }


  public InlineResponse2006DataLifeCycle fiscalYearStart(String fiscalYearStart) {
    this.fiscalYearStart = fiscalYearStart;
    return this;
  }

   /**
   * Starting day and month of the fund&#39;s fiscal year using truncated representation as specified by ISO 8601:2000. For example, the 30th of April would be represented as &#x60;--04-30&#x60;.
   * @return fiscalYearStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Starting day and month of the fund's fiscal year using truncated representation as specified by ISO 8601:2000. For example, the 30th of April would be represented as `--04-30`.")
  @JsonProperty(JSON_PROPERTY_FISCAL_YEAR_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFiscalYearStart() {
    return fiscalYearStart;
  }


  @JsonProperty(JSON_PROPERTY_FISCAL_YEAR_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFiscalYearStart(String fiscalYearStart) {
    this.fiscalYearStart = fiscalYearStart;
  }


  /**
   * Return true if this inline_response_200_6_data_lifeCycle object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2006DataLifeCycle inlineResponse2006DataLifeCycle = (InlineResponse2006DataLifeCycle) o;
    return Objects.equals(this.issue, inlineResponse2006DataLifeCycle.issue) &&
        Objects.equals(this.maturity, inlineResponse2006DataLifeCycle.maturity) &&
        Objects.equals(this.fiscalYearStart, inlineResponse2006DataLifeCycle.fiscalYearStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issue, maturity, fiscalYearStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2006DataLifeCycle {\n");
    sb.append("    issue: ").append(toIndentedString(issue)).append("\n");
    sb.append("    maturity: ").append(toIndentedString(maturity)).append("\n");
    sb.append("    fiscalYearStart: ").append(toIndentedString(fiscalYearStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

