/*
 * Funds API For Digital Portals
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FundsAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FundsAPIforDigitalPortals.JSON;


/**
 * Error status for the requested identifier.
 */
@ApiModel(description = "Error status for the requested identifier.")
@JsonPropertyOrder({
  InlineResponse2002Status.JSON_PROPERTY_CODE,
  InlineResponse2002Status.JSON_PROPERTY_IDENTIFIER,
  InlineResponse2002Status.JSON_PROPERTY_ENCRYPTED_DETAILS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2002Status implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Code of the error condition.
   */
  public enum CodeEnum {
    NONE("none"),
    
    PARAMETER("parameter");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CODE = "code";
  private CodeEnum code;

  public static final String JSON_PROPERTY_IDENTIFIER = "identifier";
  private String identifier;

  public static final String JSON_PROPERTY_ENCRYPTED_DETAILS = "encryptedDetails";
  private String encryptedDetails;

  public InlineResponse2002Status() { 
  }

  public InlineResponse2002Status code(CodeEnum code) {
    this.code = code;
    return this;
  }

   /**
   * Code of the error condition.
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Code of the error condition.")
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CodeEnum getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public InlineResponse2002Status identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Provided identifier.
   * @return identifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provided identifier.")
  @JsonProperty(JSON_PROPERTY_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIdentifier() {
    return identifier;
  }


  @JsonProperty(JSON_PROPERTY_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public InlineResponse2002Status encryptedDetails(String encryptedDetails) {
    this.encryptedDetails = encryptedDetails;
    return this;
  }

   /**
   * Base64-encoded internal details about the error.
   * @return encryptedDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Base64-encoded internal details about the error.")
  @JsonProperty(JSON_PROPERTY_ENCRYPTED_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncryptedDetails() {
    return encryptedDetails;
  }


  @JsonProperty(JSON_PROPERTY_ENCRYPTED_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncryptedDetails(String encryptedDetails) {
    this.encryptedDetails = encryptedDetails;
  }


  /**
   * Return true if this inline_response_200_2_status object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2002Status inlineResponse2002Status = (InlineResponse2002Status) o;
    return Objects.equals(this.code, inlineResponse2002Status.code) &&
        Objects.equals(this.identifier, inlineResponse2002Status.identifier) &&
        Objects.equals(this.encryptedDetails, inlineResponse2002Status.encryptedDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, identifier, encryptedDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2002Status {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    encryptedDetails: ").append(toIndentedString(encryptedDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

