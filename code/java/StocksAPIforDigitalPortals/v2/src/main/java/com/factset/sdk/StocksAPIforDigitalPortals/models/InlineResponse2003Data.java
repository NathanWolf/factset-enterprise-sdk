/*
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.StocksAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse2003Accumulated;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse2003Currency;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse2003Fsym;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse2003Instrument;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse2003Market;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse2003Trade;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.StocksAPIforDigitalPortals.JSON;


/**
 * InlineResponse2003Data
 */
@JsonPropertyOrder({
  InlineResponse2003Data.JSON_PROPERTY_ID,
  InlineResponse2003Data.JSON_PROPERTY_SYMBOL,
  InlineResponse2003Data.JSON_PROPERTY_MARKET,
  InlineResponse2003Data.JSON_PROPERTY_CURRENCY,
  InlineResponse2003Data.JSON_PROPERTY_IS_ALTERNATIVE,
  InlineResponse2003Data.JSON_PROPERTY_TRADE,
  InlineResponse2003Data.JSON_PROPERTY_QUALITY,
  InlineResponse2003Data.JSON_PROPERTY_ACCUMULATED,
  InlineResponse2003Data.JSON_PROPERTY_FSYM,
  InlineResponse2003Data.JSON_PROPERTY_INSTRUMENT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2003Data implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_MARKET = "market";
  private InlineResponse2003Market market;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private InlineResponse2003Currency currency;

  public static final String JSON_PROPERTY_IS_ALTERNATIVE = "isAlternative";
  private Boolean isAlternative;

  public static final String JSON_PROPERTY_TRADE = "trade";
  private InlineResponse2003Trade trade;

  public static final String JSON_PROPERTY_QUALITY = "quality";
  private String quality;

  public static final String JSON_PROPERTY_ACCUMULATED = "accumulated";
  private InlineResponse2003Accumulated accumulated;

  public static final String JSON_PROPERTY_FSYM = "fsym";
  private InlineResponse2003Fsym fsym;

  public static final String JSON_PROPERTY_INSTRUMENT = "instrument";
  private InlineResponse2003Instrument instrument;


  public InlineResponse2003Data id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of a notation.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier of a notation.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public InlineResponse2003Data symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * The symbol of the notation. It is a market-specific code to identify the notation. Which characters can be part of a symbol depends on the market. If a market does not define a proprietary symbol, but uses a different identifier (for example, the ISIN or the WKN) to identify instruments, no symbol will be set for the notations of that market.
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The symbol of the notation. It is a market-specific code to identify the notation. Which characters can be part of a symbol depends on the market. If a market does not define a proprietary symbol, but uses a different identifier (for example, the ISIN or the WKN) to identify instruments, no symbol will be set for the notations of that market.")
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public InlineResponse2003Data market(InlineResponse2003Market market) {
    this.market = market;
    return this;
  }

   /**
   * Get market
   * @return market
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2003Market getMarket() {
    return market;
  }


  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarket(InlineResponse2003Market market) {
    this.market = market;
  }


  public InlineResponse2003Data currency(InlineResponse2003Currency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2003Currency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(InlineResponse2003Currency currency) {
    this.currency = currency;
  }


  public InlineResponse2003Data isAlternative(Boolean isAlternative) {
    this.isAlternative = isAlternative;
    return this;
  }

   /**
   * Indicates whether the notation is an alternative one, i.e. not the original notation of the index constituent.
   * @return isAlternative
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the notation is an alternative one, i.e. not the original notation of the index constituent.")
  @JsonProperty(JSON_PROPERTY_IS_ALTERNATIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsAlternative() {
    return isAlternative;
  }


  @JsonProperty(JSON_PROPERTY_IS_ALTERNATIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsAlternative(Boolean isAlternative) {
    this.isAlternative = isAlternative;
  }


  public InlineResponse2003Data trade(InlineResponse2003Trade trade) {
    this.trade = trade;
    return this;
  }

   /**
   * Get trade
   * @return trade
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRADE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2003Trade getTrade() {
    return trade;
  }


  @JsonProperty(JSON_PROPERTY_TRADE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrade(InlineResponse2003Trade trade) {
    this.trade = trade;
  }


  public InlineResponse2003Data quality(String quality) {
    this.quality = quality;
    return this;
  }

   /**
   * Quality of the trade-related attributes, see attributes &#x60;trade&#x60; and &#x60;accumulated&#x60;.
   * @return quality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Quality of the trade-related attributes, see attributes `trade` and `accumulated`.")
  @JsonProperty(JSON_PROPERTY_QUALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQuality() {
    return quality;
  }


  @JsonProperty(JSON_PROPERTY_QUALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuality(String quality) {
    this.quality = quality;
  }


  public InlineResponse2003Data accumulated(InlineResponse2003Accumulated accumulated) {
    this.accumulated = accumulated;
    return this;
  }

   /**
   * Get accumulated
   * @return accumulated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ACCUMULATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2003Accumulated getAccumulated() {
    return accumulated;
  }


  @JsonProperty(JSON_PROPERTY_ACCUMULATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccumulated(InlineResponse2003Accumulated accumulated) {
    this.accumulated = accumulated;
  }


  public InlineResponse2003Data fsym(InlineResponse2003Fsym fsym) {
    this.fsym = fsym;
    return this;
  }

   /**
   * Get fsym
   * @return fsym
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FSYM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2003Fsym getFsym() {
    return fsym;
  }


  @JsonProperty(JSON_PROPERTY_FSYM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFsym(InlineResponse2003Fsym fsym) {
    this.fsym = fsym;
  }


  public InlineResponse2003Data instrument(InlineResponse2003Instrument instrument) {
    this.instrument = instrument;
    return this;
  }

   /**
   * Get instrument
   * @return instrument
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INSTRUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2003Instrument getInstrument() {
    return instrument;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstrument(InlineResponse2003Instrument instrument) {
    this.instrument = instrument;
  }


  /**
   * Return true if this inline_response_200_3_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2003Data inlineResponse2003Data = (InlineResponse2003Data) o;
    return Objects.equals(this.id, inlineResponse2003Data.id) &&
        Objects.equals(this.symbol, inlineResponse2003Data.symbol) &&
        Objects.equals(this.market, inlineResponse2003Data.market) &&
        Objects.equals(this.currency, inlineResponse2003Data.currency) &&
        Objects.equals(this.isAlternative, inlineResponse2003Data.isAlternative) &&
        Objects.equals(this.trade, inlineResponse2003Data.trade) &&
        Objects.equals(this.quality, inlineResponse2003Data.quality) &&
        Objects.equals(this.accumulated, inlineResponse2003Data.accumulated) &&
        Objects.equals(this.fsym, inlineResponse2003Data.fsym) &&
        Objects.equals(this.instrument, inlineResponse2003Data.instrument);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, symbol, market, currency, isAlternative, trade, quality, accumulated, fsym, instrument);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2003Data {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    isAlternative: ").append(toIndentedString(isAlternative)).append("\n");
    sb.append("    trade: ").append(toIndentedString(trade)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    accumulated: ").append(toIndentedString(accumulated)).append("\n");
    sb.append("    fsym: ").append(toIndentedString(fsym)).append("\n");
    sb.append("    instrument: ").append(toIndentedString(instrument)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

