/*
 * Stocks API For Digital Portals
 * The stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts: Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with potentially daily updates).  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the Bonds API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.StocksAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse20010Accumulated;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse20010Currency;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse20010Fsym;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse20010Instrument;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse20010Market;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse20010Trade;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.StocksAPIforDigitalPortals.JSON;


/**
 * InlineResponse20010Data
 */
@JsonPropertyOrder({
  InlineResponse20010Data.JSON_PROPERTY_ID,
  InlineResponse20010Data.JSON_PROPERTY_SYMBOL,
  InlineResponse20010Data.JSON_PROPERTY_MARKET,
  InlineResponse20010Data.JSON_PROPERTY_CURRENCY,
  InlineResponse20010Data.JSON_PROPERTY_IS_ALTERNATIVE,
  InlineResponse20010Data.JSON_PROPERTY_TRADE,
  InlineResponse20010Data.JSON_PROPERTY_QUALITY,
  InlineResponse20010Data.JSON_PROPERTY_ACCUMULATED,
  InlineResponse20010Data.JSON_PROPERTY_FSYM,
  InlineResponse20010Data.JSON_PROPERTY_INSTRUMENT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse20010Data implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_MARKET = "market";
  private InlineResponse20010Market market;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private InlineResponse20010Currency currency;

  public static final String JSON_PROPERTY_IS_ALTERNATIVE = "isAlternative";
  private Boolean isAlternative;

  public static final String JSON_PROPERTY_TRADE = "trade";
  private InlineResponse20010Trade trade;

  public static final String JSON_PROPERTY_QUALITY = "quality";
  private String quality;

  public static final String JSON_PROPERTY_ACCUMULATED = "accumulated";
  private InlineResponse20010Accumulated accumulated;

  public static final String JSON_PROPERTY_FSYM = "fsym";
  private InlineResponse20010Fsym fsym;

  public static final String JSON_PROPERTY_INSTRUMENT = "instrument";
  private InlineResponse20010Instrument instrument;

  public InlineResponse20010Data() { 
  }

  public InlineResponse20010Data id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of a notation.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier of a notation.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public InlineResponse20010Data symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * The symbol of the notation. It is a market-specific code to identify the notation. Which characters can be part of a symbol depends on the market. If a market does not define a proprietary symbol, but uses a different identifier (for example, the ISIN or the WKN) to identify instruments, no symbol will be set for the notations of that market.
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The symbol of the notation. It is a market-specific code to identify the notation. Which characters can be part of a symbol depends on the market. If a market does not define a proprietary symbol, but uses a different identifier (for example, the ISIN or the WKN) to identify instruments, no symbol will be set for the notations of that market.")
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public InlineResponse20010Data market(InlineResponse20010Market market) {
    this.market = market;
    return this;
  }

   /**
   * Get market
   * @return market
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20010Market getMarket() {
    return market;
  }


  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarket(InlineResponse20010Market market) {
    this.market = market;
  }


  public InlineResponse20010Data currency(InlineResponse20010Currency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20010Currency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(InlineResponse20010Currency currency) {
    this.currency = currency;
  }


  public InlineResponse20010Data isAlternative(Boolean isAlternative) {
    this.isAlternative = isAlternative;
    return this;
  }

   /**
   * Indicates whether the notation is an alternative one, i.e. not the original notation of the index constituent.
   * @return isAlternative
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the notation is an alternative one, i.e. not the original notation of the index constituent.")
  @JsonProperty(JSON_PROPERTY_IS_ALTERNATIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsAlternative() {
    return isAlternative;
  }


  @JsonProperty(JSON_PROPERTY_IS_ALTERNATIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsAlternative(Boolean isAlternative) {
    this.isAlternative = isAlternative;
  }


  public InlineResponse20010Data trade(InlineResponse20010Trade trade) {
    this.trade = trade;
    return this;
  }

   /**
   * Get trade
   * @return trade
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRADE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20010Trade getTrade() {
    return trade;
  }


  @JsonProperty(JSON_PROPERTY_TRADE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrade(InlineResponse20010Trade trade) {
    this.trade = trade;
  }


  public InlineResponse20010Data quality(String quality) {
    this.quality = quality;
    return this;
  }

   /**
   * Quality of the trade-related attributes, see attributes &#x60;trade&#x60; and &#x60;accumulated&#x60;.
   * @return quality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Quality of the trade-related attributes, see attributes `trade` and `accumulated`.")
  @JsonProperty(JSON_PROPERTY_QUALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQuality() {
    return quality;
  }


  @JsonProperty(JSON_PROPERTY_QUALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuality(String quality) {
    this.quality = quality;
  }


  public InlineResponse20010Data accumulated(InlineResponse20010Accumulated accumulated) {
    this.accumulated = accumulated;
    return this;
  }

   /**
   * Get accumulated
   * @return accumulated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ACCUMULATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20010Accumulated getAccumulated() {
    return accumulated;
  }


  @JsonProperty(JSON_PROPERTY_ACCUMULATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccumulated(InlineResponse20010Accumulated accumulated) {
    this.accumulated = accumulated;
  }


  public InlineResponse20010Data fsym(InlineResponse20010Fsym fsym) {
    this.fsym = fsym;
    return this;
  }

   /**
   * Get fsym
   * @return fsym
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FSYM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20010Fsym getFsym() {
    return fsym;
  }


  @JsonProperty(JSON_PROPERTY_FSYM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFsym(InlineResponse20010Fsym fsym) {
    this.fsym = fsym;
  }


  public InlineResponse20010Data instrument(InlineResponse20010Instrument instrument) {
    this.instrument = instrument;
    return this;
  }

   /**
   * Get instrument
   * @return instrument
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INSTRUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20010Instrument getInstrument() {
    return instrument;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstrument(InlineResponse20010Instrument instrument) {
    this.instrument = instrument;
  }


  /**
   * Return true if this inline_response_200_10_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20010Data inlineResponse20010Data = (InlineResponse20010Data) o;
    return Objects.equals(this.id, inlineResponse20010Data.id) &&
        Objects.equals(this.symbol, inlineResponse20010Data.symbol) &&
        Objects.equals(this.market, inlineResponse20010Data.market) &&
        Objects.equals(this.currency, inlineResponse20010Data.currency) &&
        Objects.equals(this.isAlternative, inlineResponse20010Data.isAlternative) &&
        Objects.equals(this.trade, inlineResponse20010Data.trade) &&
        Objects.equals(this.quality, inlineResponse20010Data.quality) &&
        Objects.equals(this.accumulated, inlineResponse20010Data.accumulated) &&
        Objects.equals(this.fsym, inlineResponse20010Data.fsym) &&
        Objects.equals(this.instrument, inlineResponse20010Data.instrument);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, symbol, market, currency, isAlternative, trade, quality, accumulated, fsym, instrument);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20010Data {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    isAlternative: ").append(toIndentedString(isAlternative)).append("\n");
    sb.append("    trade: ").append(toIndentedString(trade)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    accumulated: ").append(toIndentedString(accumulated)).append("\n");
    sb.append("    fsym: ").append(toIndentedString(fsym)).append("\n");
    sb.append("    instrument: ").append(toIndentedString(instrument)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

