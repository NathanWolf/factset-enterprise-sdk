/*
 * Stocks API For Digital Portals
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSet’s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.StocksAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.StocksAPIforDigitalPortals.models.PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays20;
import com.factset.sdk.StocksAPIforDigitalPortals.models.PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays200;
import com.factset.sdk.StocksAPIforDigitalPortals.models.PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays50;
import com.factset.sdk.StocksAPIforDigitalPortals.models.PostStockNotationScreenerSearchRequestDataSimpleMovingAverageTradingDaysSinceCrossover;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.StocksAPIforDigitalPortals.JSON;


/**
 * Simple moving average (SMA), that is the arithmetic mean of a notation’s EOD closing price, for different time ranges.
 */
@ApiModel(description = "Simple moving average (SMA), that is the arithmetic mean of a notation’s EOD closing price, for different time ranges.")
@JsonPropertyOrder({
  PostStockNotationScreenerSearchRequestDataSimpleMovingAverage.JSON_PROPERTY_DAYS20,
  PostStockNotationScreenerSearchRequestDataSimpleMovingAverage.JSON_PROPERTY_DAYS50,
  PostStockNotationScreenerSearchRequestDataSimpleMovingAverage.JSON_PROPERTY_DAYS200,
  PostStockNotationScreenerSearchRequestDataSimpleMovingAverage.JSON_PROPERTY_TRADING_DAYS_SINCE_CROSSOVER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class PostStockNotationScreenerSearchRequestDataSimpleMovingAverage implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_DAYS20 = "days20";
  private PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays20 days20;

  public static final String JSON_PROPERTY_DAYS50 = "days50";
  private PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays50 days50;

  public static final String JSON_PROPERTY_DAYS200 = "days200";
  private PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays200 days200;

  public static final String JSON_PROPERTY_TRADING_DAYS_SINCE_CROSSOVER = "tradingDaysSinceCrossover";
  private PostStockNotationScreenerSearchRequestDataSimpleMovingAverageTradingDaysSinceCrossover tradingDaysSinceCrossover;

  public PostStockNotationScreenerSearchRequestDataSimpleMovingAverage() { 
  }

  public PostStockNotationScreenerSearchRequestDataSimpleMovingAverage days20(PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays20 days20) {
    this.days20 = days20;
    return this;
  }

   /**
   * Get days20
   * @return days20
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DAYS20)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays20 getDays20() {
    return days20;
  }


  @JsonProperty(JSON_PROPERTY_DAYS20)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDays20(PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays20 days20) {
    this.days20 = days20;
  }


  public PostStockNotationScreenerSearchRequestDataSimpleMovingAverage days50(PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays50 days50) {
    this.days50 = days50;
    return this;
  }

   /**
   * Get days50
   * @return days50
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DAYS50)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays50 getDays50() {
    return days50;
  }


  @JsonProperty(JSON_PROPERTY_DAYS50)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDays50(PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays50 days50) {
    this.days50 = days50;
  }


  public PostStockNotationScreenerSearchRequestDataSimpleMovingAverage days200(PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays200 days200) {
    this.days200 = days200;
    return this;
  }

   /**
   * Get days200
   * @return days200
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DAYS200)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays200 getDays200() {
    return days200;
  }


  @JsonProperty(JSON_PROPERTY_DAYS200)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDays200(PostStockNotationScreenerSearchRequestDataSimpleMovingAverageDays200 days200) {
    this.days200 = days200;
  }


  public PostStockNotationScreenerSearchRequestDataSimpleMovingAverage tradingDaysSinceCrossover(PostStockNotationScreenerSearchRequestDataSimpleMovingAverageTradingDaysSinceCrossover tradingDaysSinceCrossover) {
    this.tradingDaysSinceCrossover = tradingDaysSinceCrossover;
    return this;
  }

   /**
   * Get tradingDaysSinceCrossover
   * @return tradingDaysSinceCrossover
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRADING_DAYS_SINCE_CROSSOVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostStockNotationScreenerSearchRequestDataSimpleMovingAverageTradingDaysSinceCrossover getTradingDaysSinceCrossover() {
    return tradingDaysSinceCrossover;
  }


  @JsonProperty(JSON_PROPERTY_TRADING_DAYS_SINCE_CROSSOVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTradingDaysSinceCrossover(PostStockNotationScreenerSearchRequestDataSimpleMovingAverageTradingDaysSinceCrossover tradingDaysSinceCrossover) {
    this.tradingDaysSinceCrossover = tradingDaysSinceCrossover;
  }


  /**
   * Return true if this PostStockNotationScreenerSearchRequest_data_simpleMovingAverage object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostStockNotationScreenerSearchRequestDataSimpleMovingAverage postStockNotationScreenerSearchRequestDataSimpleMovingAverage = (PostStockNotationScreenerSearchRequestDataSimpleMovingAverage) o;
    return Objects.equals(this.days20, postStockNotationScreenerSearchRequestDataSimpleMovingAverage.days20) &&
        Objects.equals(this.days50, postStockNotationScreenerSearchRequestDataSimpleMovingAverage.days50) &&
        Objects.equals(this.days200, postStockNotationScreenerSearchRequestDataSimpleMovingAverage.days200) &&
        Objects.equals(this.tradingDaysSinceCrossover, postStockNotationScreenerSearchRequestDataSimpleMovingAverage.tradingDaysSinceCrossover);
  }

  @Override
  public int hashCode() {
    return Objects.hash(days20, days50, days200, tradingDaysSinceCrossover);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostStockNotationScreenerSearchRequestDataSimpleMovingAverage {\n");
    sb.append("    days20: ").append(toIndentedString(days20)).append("\n");
    sb.append("    days50: ").append(toIndentedString(days50)).append("\n");
    sb.append("    days200: ").append(toIndentedString(days200)).append("\n");
    sb.append("    tradingDaysSinceCrossover: ").append(toIndentedString(tradingDaysSinceCrossover)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

