/*
 * Stocks API For Digital Portals
 * The stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts: Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with potentially daily updates).  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the Bonds API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.StocksAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse2003Function;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.StocksAPIforDigitalPortals.JSON;


/**
 * InlineResponse2003Officers
 */
@JsonPropertyOrder({
  InlineResponse2003Officers.JSON_PROPERTY_ID,
  InlineResponse2003Officers.JSON_PROPERTY_NAME,
  InlineResponse2003Officers.JSON_PROPERTY_PRESENTATION_NAME,
  InlineResponse2003Officers.JSON_PROPERTY_TITLE_OFFICER,
  InlineResponse2003Officers.JSON_PROPERTY_FUNCTION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2003Officers implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  private BigDecimal id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_PRESENTATION_NAME = "presentationName";
  private String presentationName;

  public static final String JSON_PROPERTY_TITLE_OFFICER = "titleOfficer";
  private String titleOfficer;

  public static final String JSON_PROPERTY_FUNCTION = "function";
  private InlineResponse2003Function function;

  public InlineResponse2003Officers() { 
  }

  public InlineResponse2003Officers id(BigDecimal id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of an officer.  See endpoint &#x60;/legalEntity/list&#x60; for possible values.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier of an officer.  See endpoint `/legalEntity/list` for possible values.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(BigDecimal id) {
    this.id = id;
  }


  public InlineResponse2003Officers name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Full name of the officer.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Full name of the officer.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public InlineResponse2003Officers presentationName(String presentationName) {
    this.presentationName = presentationName;
    return this;
  }

   /**
   * Presentation name of the officer, potentially shortened and/or containing name supplementssuch as a title.
   * @return presentationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Presentation name of the officer, potentially shortened and/or containing name supplementssuch as a title.")
  @JsonProperty(JSON_PROPERTY_PRESENTATION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPresentationName() {
    return presentationName;
  }


  @JsonProperty(JSON_PROPERTY_PRESENTATION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPresentationName(String presentationName) {
    this.presentationName = presentationName;
  }


  public InlineResponse2003Officers titleOfficer(String titleOfficer) {
    this.titleOfficer = titleOfficer;
    return this;
  }

   /**
   * Job title of the officer.
   * @return titleOfficer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Job title of the officer.")
  @JsonProperty(JSON_PROPERTY_TITLE_OFFICER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTitleOfficer() {
    return titleOfficer;
  }


  @JsonProperty(JSON_PROPERTY_TITLE_OFFICER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitleOfficer(String titleOfficer) {
    this.titleOfficer = titleOfficer;
  }


  public InlineResponse2003Officers function(InlineResponse2003Function function) {
    this.function = function;
    return this;
  }

   /**
   * Get function
   * @return function
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FUNCTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2003Function getFunction() {
    return function;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFunction(InlineResponse2003Function function) {
    this.function = function;
  }


  /**
   * Return true if this inline_response_200_3_officers object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2003Officers inlineResponse2003Officers = (InlineResponse2003Officers) o;
    return Objects.equals(this.id, inlineResponse2003Officers.id) &&
        Objects.equals(this.name, inlineResponse2003Officers.name) &&
        Objects.equals(this.presentationName, inlineResponse2003Officers.presentationName) &&
        Objects.equals(this.titleOfficer, inlineResponse2003Officers.titleOfficer) &&
        Objects.equals(this.function, inlineResponse2003Officers.function);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, presentationName, titleOfficer, function);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2003Officers {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    presentationName: ").append(toIndentedString(presentationName)).append("\n");
    sb.append("    titleOfficer: ").append(toIndentedString(titleOfficer)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

