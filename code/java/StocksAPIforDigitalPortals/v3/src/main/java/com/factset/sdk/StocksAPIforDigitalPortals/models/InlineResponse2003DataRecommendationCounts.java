/*
 * Stocks API For Digital Portals
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSetâ€™s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.StocksAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.StocksAPIforDigitalPortals.JSON;


/**
 * Number of recommendations.
 */
@ApiModel(description = "Number of recommendations.")
@JsonPropertyOrder({
  InlineResponse2003DataRecommendationCounts.JSON_PROPERTY_TOTAL,
  InlineResponse2003DataRecommendationCounts.JSON_PROPERTY_BUY,
  InlineResponse2003DataRecommendationCounts.JSON_PROPERTY_OVERWEIGHT,
  InlineResponse2003DataRecommendationCounts.JSON_PROPERTY_HOLD,
  InlineResponse2003DataRecommendationCounts.JSON_PROPERTY_UNDERWEIGHT,
  InlineResponse2003DataRecommendationCounts.JSON_PROPERTY_SELL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InlineResponse2003DataRecommendationCounts implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TOTAL = "total";
  private JsonNullable<BigDecimal> total = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_BUY = "buy";
  private JsonNullable<BigDecimal> buy = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_OVERWEIGHT = "overweight";
  private JsonNullable<BigDecimal> overweight = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_HOLD = "hold";
  private JsonNullable<BigDecimal> hold = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_UNDERWEIGHT = "underweight";
  private JsonNullable<BigDecimal> underweight = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_SELL = "sell";
  private JsonNullable<BigDecimal> sell = JsonNullable.<BigDecimal>undefined();

  public InlineResponse2003DataRecommendationCounts() { 
  }

  public InlineResponse2003DataRecommendationCounts total(BigDecimal total) {
    this.total = JsonNullable.<BigDecimal>of(total);
    return this;
  }

   /**
   * Total number.
   * @return total
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Total number.")
  @JsonIgnore

  public BigDecimal getTotal() {
        return total.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTotal_JsonNullable() {
    return total;
  }
  
  @JsonProperty(JSON_PROPERTY_TOTAL)
  public void setTotal_JsonNullable(JsonNullable<BigDecimal> total) {
    this.total = total;
  }

  public void setTotal(BigDecimal total) {
    this.total = JsonNullable.<BigDecimal>of(total);
  }


  public InlineResponse2003DataRecommendationCounts buy(BigDecimal buy) {
    this.buy = JsonNullable.<BigDecimal>of(buy);
    return this;
  }

   /**
   * Number of buy recommendations. A buy recommendation contributes with the numeric value 1 when calculating the consensus.
   * @return buy
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Number of buy recommendations. A buy recommendation contributes with the numeric value 1 when calculating the consensus.")
  @JsonIgnore

  public BigDecimal getBuy() {
        return buy.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BUY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getBuy_JsonNullable() {
    return buy;
  }
  
  @JsonProperty(JSON_PROPERTY_BUY)
  public void setBuy_JsonNullable(JsonNullable<BigDecimal> buy) {
    this.buy = buy;
  }

  public void setBuy(BigDecimal buy) {
    this.buy = JsonNullable.<BigDecimal>of(buy);
  }


  public InlineResponse2003DataRecommendationCounts overweight(BigDecimal overweight) {
    this.overweight = JsonNullable.<BigDecimal>of(overweight);
    return this;
  }

   /**
   * Number of overweight recommendations. A overweight recommendation contributes with the numeric value 2 when calculating the consensus.
   * @return overweight
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Number of overweight recommendations. A overweight recommendation contributes with the numeric value 2 when calculating the consensus.")
  @JsonIgnore

  public BigDecimal getOverweight() {
        return overweight.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_OVERWEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getOverweight_JsonNullable() {
    return overweight;
  }
  
  @JsonProperty(JSON_PROPERTY_OVERWEIGHT)
  public void setOverweight_JsonNullable(JsonNullable<BigDecimal> overweight) {
    this.overweight = overweight;
  }

  public void setOverweight(BigDecimal overweight) {
    this.overweight = JsonNullable.<BigDecimal>of(overweight);
  }


  public InlineResponse2003DataRecommendationCounts hold(BigDecimal hold) {
    this.hold = JsonNullable.<BigDecimal>of(hold);
    return this;
  }

   /**
   * Number of hold recommendations. A hold recommendation contributes with the numeric value 3 when calculating the consensus.
   * @return hold
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Number of hold recommendations. A hold recommendation contributes with the numeric value 3 when calculating the consensus.")
  @JsonIgnore

  public BigDecimal getHold() {
        return hold.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getHold_JsonNullable() {
    return hold;
  }
  
  @JsonProperty(JSON_PROPERTY_HOLD)
  public void setHold_JsonNullable(JsonNullable<BigDecimal> hold) {
    this.hold = hold;
  }

  public void setHold(BigDecimal hold) {
    this.hold = JsonNullable.<BigDecimal>of(hold);
  }


  public InlineResponse2003DataRecommendationCounts underweight(BigDecimal underweight) {
    this.underweight = JsonNullable.<BigDecimal>of(underweight);
    return this;
  }

   /**
   * Number of underweight recommendations. A underweight recommendation contributes with the numeric value 4 when calculating the consensus.
   * @return underweight
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Number of underweight recommendations. A underweight recommendation contributes with the numeric value 4 when calculating the consensus.")
  @JsonIgnore

  public BigDecimal getUnderweight() {
        return underweight.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_UNDERWEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getUnderweight_JsonNullable() {
    return underweight;
  }
  
  @JsonProperty(JSON_PROPERTY_UNDERWEIGHT)
  public void setUnderweight_JsonNullable(JsonNullable<BigDecimal> underweight) {
    this.underweight = underweight;
  }

  public void setUnderweight(BigDecimal underweight) {
    this.underweight = JsonNullable.<BigDecimal>of(underweight);
  }


  public InlineResponse2003DataRecommendationCounts sell(BigDecimal sell) {
    this.sell = JsonNullable.<BigDecimal>of(sell);
    return this;
  }

   /**
   * Number of sell recommendations. A sell recommendation contributes with the numeric value 5 when calculating the consensus.
   * @return sell
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Number of sell recommendations. A sell recommendation contributes with the numeric value 5 when calculating the consensus.")
  @JsonIgnore

  public BigDecimal getSell() {
        return sell.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SELL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getSell_JsonNullable() {
    return sell;
  }
  
  @JsonProperty(JSON_PROPERTY_SELL)
  public void setSell_JsonNullable(JsonNullable<BigDecimal> sell) {
    this.sell = sell;
  }

  public void setSell(BigDecimal sell) {
    this.sell = JsonNullable.<BigDecimal>of(sell);
  }


  /**
   * Return true if this inline_response_200_3_data_recommendation_counts object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2003DataRecommendationCounts inlineResponse2003DataRecommendationCounts = (InlineResponse2003DataRecommendationCounts) o;
    return equalsNullable(this.total, inlineResponse2003DataRecommendationCounts.total) &&
        equalsNullable(this.buy, inlineResponse2003DataRecommendationCounts.buy) &&
        equalsNullable(this.overweight, inlineResponse2003DataRecommendationCounts.overweight) &&
        equalsNullable(this.hold, inlineResponse2003DataRecommendationCounts.hold) &&
        equalsNullable(this.underweight, inlineResponse2003DataRecommendationCounts.underweight) &&
        equalsNullable(this.sell, inlineResponse2003DataRecommendationCounts.sell);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(total), hashCodeNullable(buy), hashCodeNullable(overweight), hashCodeNullable(hold), hashCodeNullable(underweight), hashCodeNullable(sell));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2003DataRecommendationCounts {\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
    sb.append("    overweight: ").append(toIndentedString(overweight)).append("\n");
    sb.append("    hold: ").append(toIndentedString(hold)).append("\n");
    sb.append("    underweight: ").append(toIndentedString(underweight)).append("\n");
    sb.append("    sell: ").append(toIndentedString(sell)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

