/*
 * Stocks API For Digital Portals
 * The stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts: Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with potentially daily updates).  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the Bonds API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.StocksAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.StocksAPIforDigitalPortals.models.StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareBookValue;
import com.factset.sdk.StocksAPIforDigitalPortals.models.StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareCashFlow;
import com.factset.sdk.StocksAPIforDigitalPortals.models.StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareDividends;
import com.factset.sdk.StocksAPIforDigitalPortals.models.StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareRecurringDilutedEarnings;
import com.factset.sdk.StocksAPIforDigitalPortals.models.StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareSales;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.StocksAPIforDigitalPortals.JSON;


/**
 * Per-share parameters.
 */
@ApiModel(description = "Per-share parameters.")
@JsonPropertyOrder({
  StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare.JSON_PROPERTY_SALES,
  StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare.JSON_PROPERTY_RECURRING_DILUTED_EARNINGS,
  StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare.JSON_PROPERTY_DIVIDENDS,
  StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare.JSON_PROPERTY_BOOK_VALUE,
  StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare.JSON_PROPERTY_CASH_FLOW
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SALES = "sales";
  private StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareSales sales;

  public static final String JSON_PROPERTY_RECURRING_DILUTED_EARNINGS = "recurringDilutedEarnings";
  private StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareRecurringDilutedEarnings recurringDilutedEarnings;

  public static final String JSON_PROPERTY_DIVIDENDS = "dividends";
  private StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareDividends dividends;

  public static final String JSON_PROPERTY_BOOK_VALUE = "bookValue";
  private StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareBookValue bookValue;

  public static final String JSON_PROPERTY_CASH_FLOW = "cashFlow";
  private StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareCashFlow cashFlow;

  public StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare() { 
  }

  public StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare sales(StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareSales sales) {
    this.sales = sales;
    return this;
  }

   /**
   * Get sales
   * @return sales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SALES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareSales getSales() {
    return sales;
  }


  @JsonProperty(JSON_PROPERTY_SALES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSales(StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareSales sales) {
    this.sales = sales;
  }


  public StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare recurringDilutedEarnings(StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareRecurringDilutedEarnings recurringDilutedEarnings) {
    this.recurringDilutedEarnings = recurringDilutedEarnings;
    return this;
  }

   /**
   * Get recurringDilutedEarnings
   * @return recurringDilutedEarnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RECURRING_DILUTED_EARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareRecurringDilutedEarnings getRecurringDilutedEarnings() {
    return recurringDilutedEarnings;
  }


  @JsonProperty(JSON_PROPERTY_RECURRING_DILUTED_EARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecurringDilutedEarnings(StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareRecurringDilutedEarnings recurringDilutedEarnings) {
    this.recurringDilutedEarnings = recurringDilutedEarnings;
  }


  public StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare dividends(StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareDividends dividends) {
    this.dividends = dividends;
    return this;
  }

   /**
   * Get dividends
   * @return dividends
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DIVIDENDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareDividends getDividends() {
    return dividends;
  }


  @JsonProperty(JSON_PROPERTY_DIVIDENDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDividends(StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareDividends dividends) {
    this.dividends = dividends;
  }


  public StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare bookValue(StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareBookValue bookValue) {
    this.bookValue = bookValue;
    return this;
  }

   /**
   * Get bookValue
   * @return bookValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BOOK_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareBookValue getBookValue() {
    return bookValue;
  }


  @JsonProperty(JSON_PROPERTY_BOOK_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBookValue(StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareBookValue bookValue) {
    this.bookValue = bookValue;
  }


  public StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare cashFlow(StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareCashFlow cashFlow) {
    this.cashFlow = cashFlow;
    return this;
  }

   /**
   * Get cashFlow
   * @return cashFlow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CASH_FLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareCashFlow getCashFlow() {
    return cashFlow;
  }


  @JsonProperty(JSON_PROPERTY_CASH_FLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCashFlow(StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShareCashFlow cashFlow) {
    this.cashFlow = cashFlow;
  }


  /**
   * Return true if this _stock_notation_screener_search_data_currencyDependentKeyFigures_perShare object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare stockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare = (StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare) o;
    return Objects.equals(this.sales, stockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare.sales) &&
        Objects.equals(this.recurringDilutedEarnings, stockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare.recurringDilutedEarnings) &&
        Objects.equals(this.dividends, stockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare.dividends) &&
        Objects.equals(this.bookValue, stockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare.bookValue) &&
        Objects.equals(this.cashFlow, stockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare.cashFlow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sales, recurringDilutedEarnings, dividends, bookValue, cashFlow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StockNotationScreenerSearchDataCurrencyDependentKeyFiguresPerShare {\n");
    sb.append("    sales: ").append(toIndentedString(sales)).append("\n");
    sb.append("    recurringDilutedEarnings: ").append(toIndentedString(recurringDilutedEarnings)).append("\n");
    sb.append("    dividends: ").append(toIndentedString(dividends)).append("\n");
    sb.append("    bookValue: ").append(toIndentedString(bookValue)).append("\n");
    sb.append("    cashFlow: ").append(toIndentedString(cashFlow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

