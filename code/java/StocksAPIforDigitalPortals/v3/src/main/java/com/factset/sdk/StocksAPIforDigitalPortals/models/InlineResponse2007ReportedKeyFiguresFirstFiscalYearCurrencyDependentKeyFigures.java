/*
 * Stocks API For Digital Portals
 * The stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts: Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with potentially daily updates).  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the Bonds API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.StocksAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresCurrency;
import com.factset.sdk.StocksAPIforDigitalPortals.models.InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.StocksAPIforDigitalPortals.JSON;


/**
 * Currency-dependent key figures. If no currency has been selected (see parameter &#x60;reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode&#x60;), the returned values are in the reporting currency of the company.
 */
@ApiModel(description = "Currency-dependent key figures. If no currency has been selected (see parameter `reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode`), the returned values are in the reporting currency of the company.")
@JsonPropertyOrder({
  InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures.JSON_PROPERTY_CURRENCY,
  InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures.JSON_PROPERTY_MARKET_CAPITALIZATION,
  InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures.JSON_PROPERTY_EBIT,
  InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures.JSON_PROPERTY_EBITDA,
  InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures.JSON_PROPERTY_PER_SHARE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresCurrency currency;

  public static final String JSON_PROPERTY_MARKET_CAPITALIZATION = "marketCapitalization";
  private BigDecimal marketCapitalization;

  public static final String JSON_PROPERTY_EBIT = "ebit";
  private BigDecimal ebit;

  public static final String JSON_PROPERTY_EBITDA = "ebitda";
  private BigDecimal ebitda;

  public static final String JSON_PROPERTY_PER_SHARE = "perShare";
  private InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare perShare;

  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures() { 
  }

  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures currency(InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresCurrency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresCurrency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresCurrency currency) {
    this.currency = currency;
  }


  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures marketCapitalization(BigDecimal marketCapitalization) {
    this.marketCapitalization = marketCapitalization;
    return this;
  }

   /**
   * Market capitalization, which is the market value of the shares outstanding over all types of shares of the company.
   * @return marketCapitalization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Market capitalization, which is the market value of the shares outstanding over all types of shares of the company.")
  @JsonProperty(JSON_PROPERTY_MARKET_CAPITALIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMarketCapitalization() {
    return marketCapitalization;
  }


  @JsonProperty(JSON_PROPERTY_MARKET_CAPITALIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarketCapitalization(BigDecimal marketCapitalization) {
    this.marketCapitalization = marketCapitalization;
  }


  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures ebit(BigDecimal ebit) {
    this.ebit = ebit;
    return this;
  }

   /**
   * EBIT (earnings before interest and taxes).
   * @return ebit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "EBIT (earnings before interest and taxes).")
  @JsonProperty(JSON_PROPERTY_EBIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getEbit() {
    return ebit;
  }


  @JsonProperty(JSON_PROPERTY_EBIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEbit(BigDecimal ebit) {
    this.ebit = ebit;
  }


  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures ebitda(BigDecimal ebitda) {
    this.ebitda = ebitda;
    return this;
  }

   /**
   * EBITDA (earnings before interest, taxes, depreciation, and amortization).
   * @return ebitda
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "EBITDA (earnings before interest, taxes, depreciation, and amortization).")
  @JsonProperty(JSON_PROPERTY_EBITDA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getEbitda() {
    return ebitda;
  }


  @JsonProperty(JSON_PROPERTY_EBITDA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEbitda(BigDecimal ebitda) {
    this.ebitda = ebitda;
  }


  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures perShare(InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare perShare) {
    this.perShare = perShare;
    return this;
  }

   /**
   * Get perShare
   * @return perShare
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare getPerShare() {
    return perShare;
  }


  @JsonProperty(JSON_PROPERTY_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPerShare(InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare perShare) {
    this.perShare = perShare;
  }


  /**
   * Return true if this inline_response_200_7_reportedKeyFigures_firstFiscalYear_currencyDependentKeyFigures object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures inlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures = (InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures) o;
    return Objects.equals(this.currency, inlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures.currency) &&
        Objects.equals(this.marketCapitalization, inlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures.marketCapitalization) &&
        Objects.equals(this.ebit, inlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures.ebit) &&
        Objects.equals(this.ebitda, inlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures.ebitda) &&
        Objects.equals(this.perShare, inlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures.perShare);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, marketCapitalization, ebit, ebitda, perShare);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFigures {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    marketCapitalization: ").append(toIndentedString(marketCapitalization)).append("\n");
    sb.append("    ebit: ").append(toIndentedString(ebit)).append("\n");
    sb.append("    ebitda: ").append(toIndentedString(ebitda)).append("\n");
    sb.append("    perShare: ").append(toIndentedString(perShare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

