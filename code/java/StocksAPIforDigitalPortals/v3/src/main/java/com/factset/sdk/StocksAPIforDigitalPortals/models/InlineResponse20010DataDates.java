/*
 * Stocks API For Digital Portals
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSetâ€™s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.StocksAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.StocksAPIforDigitalPortals.JSON;


/**
 * Relevant dates related to the dividend.
 */
@ApiModel(description = "Relevant dates related to the dividend.")
@JsonPropertyOrder({
  InlineResponse20010DataDates.JSON_PROPERTY_ANNOUNCEMENT,
  InlineResponse20010DataDates.JSON_PROPERTY_RECORD,
  InlineResponse20010DataDates.JSON_PROPERTY_EFFECTIVE,
  InlineResponse20010DataDates.JSON_PROPERTY_PAYMENT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InlineResponse20010DataDates implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ANNOUNCEMENT = "announcement";
  private JsonNullable<LocalDate> announcement = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_RECORD = "record";
  private JsonNullable<LocalDate> record = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_EFFECTIVE = "effective";
  private JsonNullable<LocalDate> effective = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_PAYMENT = "payment";
  private JsonNullable<LocalDate> payment = JsonNullable.<LocalDate>undefined();

  public InlineResponse20010DataDates() { 
  }

  public InlineResponse20010DataDates announcement(LocalDate announcement) {
    this.announcement = JsonNullable.<LocalDate>of(announcement);
    return this;
  }

   /**
   * Announcement date.
   * @return announcement
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Announcement date.")
  @JsonIgnore

  public LocalDate getAnnouncement() {
        return announcement.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ANNOUNCEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getAnnouncement_JsonNullable() {
    return announcement;
  }
  
  @JsonProperty(JSON_PROPERTY_ANNOUNCEMENT)
  public void setAnnouncement_JsonNullable(JsonNullable<LocalDate> announcement) {
    this.announcement = announcement;
  }

  public void setAnnouncement(LocalDate announcement) {
    this.announcement = JsonNullable.<LocalDate>of(announcement);
  }


  public InlineResponse20010DataDates record(LocalDate record) {
    this.record = JsonNullable.<LocalDate>of(record);
    return this;
  }

   /**
   * Record date.
   * @return record
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Record date.")
  @JsonIgnore

  public LocalDate getRecord() {
        return record.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RECORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getRecord_JsonNullable() {
    return record;
  }
  
  @JsonProperty(JSON_PROPERTY_RECORD)
  public void setRecord_JsonNullable(JsonNullable<LocalDate> record) {
    this.record = record;
  }

  public void setRecord(LocalDate record) {
    this.record = JsonNullable.<LocalDate>of(record);
  }


  public InlineResponse20010DataDates effective(LocalDate effective) {
    this.effective = JsonNullable.<LocalDate>of(effective);
    return this;
  }

   /**
   * Effective date (ex-date).
   * @return effective
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Effective date (ex-date).")
  @JsonIgnore

  public LocalDate getEffective() {
        return effective.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EFFECTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getEffective_JsonNullable() {
    return effective;
  }
  
  @JsonProperty(JSON_PROPERTY_EFFECTIVE)
  public void setEffective_JsonNullable(JsonNullable<LocalDate> effective) {
    this.effective = effective;
  }

  public void setEffective(LocalDate effective) {
    this.effective = JsonNullable.<LocalDate>of(effective);
  }


  public InlineResponse20010DataDates payment(LocalDate payment) {
    this.payment = JsonNullable.<LocalDate>of(payment);
    return this;
  }

   /**
   * Payment date.
   * @return payment
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Payment date.")
  @JsonIgnore

  public LocalDate getPayment() {
        return payment.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getPayment_JsonNullable() {
    return payment;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYMENT)
  public void setPayment_JsonNullable(JsonNullable<LocalDate> payment) {
    this.payment = payment;
  }

  public void setPayment(LocalDate payment) {
    this.payment = JsonNullable.<LocalDate>of(payment);
  }


  /**
   * Return true if this inline_response_200_10_data_dates object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20010DataDates inlineResponse20010DataDates = (InlineResponse20010DataDates) o;
    return equalsNullable(this.announcement, inlineResponse20010DataDates.announcement) &&
        equalsNullable(this.record, inlineResponse20010DataDates.record) &&
        equalsNullable(this.effective, inlineResponse20010DataDates.effective) &&
        equalsNullable(this.payment, inlineResponse20010DataDates.payment);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(announcement), hashCodeNullable(record), hashCodeNullable(effective), hashCodeNullable(payment));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20010DataDates {\n");
    sb.append("    announcement: ").append(toIndentedString(announcement)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    effective: ").append(toIndentedString(effective)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

