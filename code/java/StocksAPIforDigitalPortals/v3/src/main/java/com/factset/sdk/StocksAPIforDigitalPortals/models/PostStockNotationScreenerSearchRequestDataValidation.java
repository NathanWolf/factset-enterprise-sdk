/*
 * Stocks API For Digital Portals
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSetâ€™s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.StocksAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.StocksAPIforDigitalPortals.models.PostStockNotationScreenerSearchRequestDataValidationInstrumentSelectionList;
import com.factset.sdk.StocksAPIforDigitalPortals.models.PostStockNotationScreenerSearchRequestDataValidationMarket;
import com.factset.sdk.StocksAPIforDigitalPortals.models.PostStockNotationScreenerSearchRequestDataValidationNotationSelectionList;
import com.factset.sdk.StocksAPIforDigitalPortals.models.PostStockNotationScreenerSearchRequestDataValidationPrices;
import com.factset.sdk.StocksAPIforDigitalPortals.models.PostStockNotationScreenerSearchRequestDataValidationValueUnit;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.StocksAPIforDigitalPortals.JSON;


/**
 * Validation parameters.
 */
@ApiModel(description = "Validation parameters.")
@JsonPropertyOrder({
  PostStockNotationScreenerSearchRequestDataValidation.JSON_PROPERTY_ONLY_ACTIVE,
  PostStockNotationScreenerSearchRequestDataValidation.JSON_PROPERTY_ONLY_NOT_SUSPENDED,
  PostStockNotationScreenerSearchRequestDataValidation.JSON_PROPERTY_PRICES,
  PostStockNotationScreenerSearchRequestDataValidation.JSON_PROPERTY_VALUE_UNIT,
  PostStockNotationScreenerSearchRequestDataValidation.JSON_PROPERTY_MARKET,
  PostStockNotationScreenerSearchRequestDataValidation.JSON_PROPERTY_INSTRUMENT_SELECTION_LIST,
  PostStockNotationScreenerSearchRequestDataValidation.JSON_PROPERTY_NOTATION_SELECTION_LIST
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PostStockNotationScreenerSearchRequestDataValidation implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ONLY_ACTIVE = "onlyActive";
  private Boolean onlyActive = true;

  public static final String JSON_PROPERTY_ONLY_NOT_SUSPENDED = "onlyNotSuspended";
  private Boolean onlyNotSuspended = false;

  public static final String JSON_PROPERTY_PRICES = "prices";
  private PostStockNotationScreenerSearchRequestDataValidationPrices prices;

  public static final String JSON_PROPERTY_VALUE_UNIT = "valueUnit";
  private PostStockNotationScreenerSearchRequestDataValidationValueUnit valueUnit;

  public static final String JSON_PROPERTY_MARKET = "market";
  private PostStockNotationScreenerSearchRequestDataValidationMarket market;

  public static final String JSON_PROPERTY_INSTRUMENT_SELECTION_LIST = "instrumentSelectionList";
  private PostStockNotationScreenerSearchRequestDataValidationInstrumentSelectionList instrumentSelectionList;

  public static final String JSON_PROPERTY_NOTATION_SELECTION_LIST = "notationSelectionList";
  private PostStockNotationScreenerSearchRequestDataValidationNotationSelectionList notationSelectionList;

  public PostStockNotationScreenerSearchRequestDataValidation() { 
  }

  public PostStockNotationScreenerSearchRequestDataValidation onlyActive(Boolean onlyActive) {
    this.onlyActive = onlyActive;
    return this;
  }

   /**
   * If &#x60;true&#x60;, only active notations will be returned. The term \&quot;active\&quot; reflects the fact that notations and related data are not being deleted immediately after becoming irrelevant (e.g. because the source does not provide a price anymore), but remains in general retrievable for up to 6 months.
   * @return onlyActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If `true`, only active notations will be returned. The term \"active\" reflects the fact that notations and related data are not being deleted immediately after becoming irrelevant (e.g. because the source does not provide a price anymore), but remains in general retrievable for up to 6 months.")
  @JsonProperty(JSON_PROPERTY_ONLY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOnlyActive() {
    return onlyActive;
  }


  @JsonProperty(JSON_PROPERTY_ONLY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOnlyActive(Boolean onlyActive) {
    this.onlyActive = onlyActive;
  }


  public PostStockNotationScreenerSearchRequestDataValidation onlyNotSuspended(Boolean onlyNotSuspended) {
    this.onlyNotSuspended = onlyNotSuspended;
    return this;
  }

   /**
   * If &#x60;true&#x60;, only notations not suspended from trading will be returned.
   * @return onlyNotSuspended
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If `true`, only notations not suspended from trading will be returned.")
  @JsonProperty(JSON_PROPERTY_ONLY_NOT_SUSPENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOnlyNotSuspended() {
    return onlyNotSuspended;
  }


  @JsonProperty(JSON_PROPERTY_ONLY_NOT_SUSPENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOnlyNotSuspended(Boolean onlyNotSuspended) {
    this.onlyNotSuspended = onlyNotSuspended;
  }


  public PostStockNotationScreenerSearchRequestDataValidation prices(PostStockNotationScreenerSearchRequestDataValidationPrices prices) {
    this.prices = prices;
    return this;
  }

   /**
   * Get prices
   * @return prices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PRICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostStockNotationScreenerSearchRequestDataValidationPrices getPrices() {
    return prices;
  }


  @JsonProperty(JSON_PROPERTY_PRICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrices(PostStockNotationScreenerSearchRequestDataValidationPrices prices) {
    this.prices = prices;
  }


  public PostStockNotationScreenerSearchRequestDataValidation valueUnit(PostStockNotationScreenerSearchRequestDataValidationValueUnit valueUnit) {
    this.valueUnit = valueUnit;
    return this;
  }

   /**
   * Get valueUnit
   * @return valueUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VALUE_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostStockNotationScreenerSearchRequestDataValidationValueUnit getValueUnit() {
    return valueUnit;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueUnit(PostStockNotationScreenerSearchRequestDataValidationValueUnit valueUnit) {
    this.valueUnit = valueUnit;
  }


  public PostStockNotationScreenerSearchRequestDataValidation market(PostStockNotationScreenerSearchRequestDataValidationMarket market) {
    this.market = market;
    return this;
  }

   /**
   * Get market
   * @return market
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostStockNotationScreenerSearchRequestDataValidationMarket getMarket() {
    return market;
  }


  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarket(PostStockNotationScreenerSearchRequestDataValidationMarket market) {
    this.market = market;
  }


  public PostStockNotationScreenerSearchRequestDataValidation instrumentSelectionList(PostStockNotationScreenerSearchRequestDataValidationInstrumentSelectionList instrumentSelectionList) {
    this.instrumentSelectionList = instrumentSelectionList;
    return this;
  }

   /**
   * Get instrumentSelectionList
   * @return instrumentSelectionList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INSTRUMENT_SELECTION_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostStockNotationScreenerSearchRequestDataValidationInstrumentSelectionList getInstrumentSelectionList() {
    return instrumentSelectionList;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUMENT_SELECTION_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstrumentSelectionList(PostStockNotationScreenerSearchRequestDataValidationInstrumentSelectionList instrumentSelectionList) {
    this.instrumentSelectionList = instrumentSelectionList;
  }


  public PostStockNotationScreenerSearchRequestDataValidation notationSelectionList(PostStockNotationScreenerSearchRequestDataValidationNotationSelectionList notationSelectionList) {
    this.notationSelectionList = notationSelectionList;
    return this;
  }

   /**
   * Get notationSelectionList
   * @return notationSelectionList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NOTATION_SELECTION_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostStockNotationScreenerSearchRequestDataValidationNotationSelectionList getNotationSelectionList() {
    return notationSelectionList;
  }


  @JsonProperty(JSON_PROPERTY_NOTATION_SELECTION_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotationSelectionList(PostStockNotationScreenerSearchRequestDataValidationNotationSelectionList notationSelectionList) {
    this.notationSelectionList = notationSelectionList;
  }


  /**
   * Return true if this PostStockNotationScreenerSearchRequest_data_validation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostStockNotationScreenerSearchRequestDataValidation postStockNotationScreenerSearchRequestDataValidation = (PostStockNotationScreenerSearchRequestDataValidation) o;
    return Objects.equals(this.onlyActive, postStockNotationScreenerSearchRequestDataValidation.onlyActive) &&
        Objects.equals(this.onlyNotSuspended, postStockNotationScreenerSearchRequestDataValidation.onlyNotSuspended) &&
        Objects.equals(this.prices, postStockNotationScreenerSearchRequestDataValidation.prices) &&
        Objects.equals(this.valueUnit, postStockNotationScreenerSearchRequestDataValidation.valueUnit) &&
        Objects.equals(this.market, postStockNotationScreenerSearchRequestDataValidation.market) &&
        Objects.equals(this.instrumentSelectionList, postStockNotationScreenerSearchRequestDataValidation.instrumentSelectionList) &&
        Objects.equals(this.notationSelectionList, postStockNotationScreenerSearchRequestDataValidation.notationSelectionList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onlyActive, onlyNotSuspended, prices, valueUnit, market, instrumentSelectionList, notationSelectionList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostStockNotationScreenerSearchRequestDataValidation {\n");
    sb.append("    onlyActive: ").append(toIndentedString(onlyActive)).append("\n");
    sb.append("    onlyNotSuspended: ").append(toIndentedString(onlyNotSuspended)).append("\n");
    sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
    sb.append("    valueUnit: ").append(toIndentedString(valueUnit)).append("\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    instrumentSelectionList: ").append(toIndentedString(instrumentSelectionList)).append("\n");
    sb.append("    notationSelectionList: ").append(toIndentedString(notationSelectionList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

