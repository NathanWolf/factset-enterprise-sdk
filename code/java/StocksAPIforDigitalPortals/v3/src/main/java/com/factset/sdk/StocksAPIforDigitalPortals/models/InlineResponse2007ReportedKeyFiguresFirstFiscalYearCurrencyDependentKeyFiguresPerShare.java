/*
 * Stocks API For Digital Portals
 * The stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts: Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with potentially daily updates).  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the Bonds API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.StocksAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.StocksAPIforDigitalPortals.JSON;


/**
 * Per-share figures.
 */
@ApiModel(description = "Per-share figures.")
@JsonPropertyOrder({
  InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare.JSON_PROPERTY_SALES,
  InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare.JSON_PROPERTY_RECURRING_DILUTED_EARNINGS,
  InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare.JSON_PROPERTY_DIVIDENDS,
  InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare.JSON_PROPERTY_BOOK_VALUE,
  InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare.JSON_PROPERTY_CASH_FLOW
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SALES = "sales";
  private BigDecimal sales;

  public static final String JSON_PROPERTY_RECURRING_DILUTED_EARNINGS = "recurringDilutedEarnings";
  private BigDecimal recurringDilutedEarnings;

  public static final String JSON_PROPERTY_DIVIDENDS = "dividends";
  private BigDecimal dividends;

  public static final String JSON_PROPERTY_BOOK_VALUE = "bookValue";
  private BigDecimal bookValue;

  public static final String JSON_PROPERTY_CASH_FLOW = "cashFlow";
  private BigDecimal cashFlow;

  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare() { 
  }

  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare sales(BigDecimal sales) {
    this.sales = sales;
    return this;
  }

   /**
   * Total sales revenue per share.
   * @return sales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total sales revenue per share.")
  @JsonProperty(JSON_PROPERTY_SALES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSales() {
    return sales;
  }


  @JsonProperty(JSON_PROPERTY_SALES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSales(BigDecimal sales) {
    this.sales = sales;
  }


  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare recurringDilutedEarnings(BigDecimal recurringDilutedEarnings) {
    this.recurringDilutedEarnings = recurringDilutedEarnings;
    return this;
  }

   /**
   * Recurring (excluding extraordinary items) diluted earnings per share, which is the ratio of the net income excluding extraordinary items, divided by the diluted shares outstanding. An extraordinary item is an atypical and infrequent gain or loss due to an unforeseeable event.
   * @return recurringDilutedEarnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Recurring (excluding extraordinary items) diluted earnings per share, which is the ratio of the net income excluding extraordinary items, divided by the diluted shares outstanding. An extraordinary item is an atypical and infrequent gain or loss due to an unforeseeable event.")
  @JsonProperty(JSON_PROPERTY_RECURRING_DILUTED_EARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getRecurringDilutedEarnings() {
    return recurringDilutedEarnings;
  }


  @JsonProperty(JSON_PROPERTY_RECURRING_DILUTED_EARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecurringDilutedEarnings(BigDecimal recurringDilutedEarnings) {
    this.recurringDilutedEarnings = recurringDilutedEarnings;
  }


  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare dividends(BigDecimal dividends) {
    this.dividends = dividends;
    return this;
  }

   /**
   * Dividends per share, which is the ratio of the total dividends paid out, divided by the shares outstanding. In general, the figure is based on the gross dividend, i.e. before taxes, except for countries with special tax regimes.
   * @return dividends
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Dividends per share, which is the ratio of the total dividends paid out, divided by the shares outstanding. In general, the figure is based on the gross dividend, i.e. before taxes, except for countries with special tax regimes.")
  @JsonProperty(JSON_PROPERTY_DIVIDENDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getDividends() {
    return dividends;
  }


  @JsonProperty(JSON_PROPERTY_DIVIDENDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDividends(BigDecimal dividends) {
    this.dividends = dividends;
  }


  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare bookValue(BigDecimal bookValue) {
    this.bookValue = bookValue;
    return this;
  }

   /**
   * Book value per share, which is the ratio of the book value (common equity), divided by the shares outstanding.
   * @return bookValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Book value per share, which is the ratio of the book value (common equity), divided by the shares outstanding.")
  @JsonProperty(JSON_PROPERTY_BOOK_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getBookValue() {
    return bookValue;
  }


  @JsonProperty(JSON_PROPERTY_BOOK_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBookValue(BigDecimal bookValue) {
    this.bookValue = bookValue;
  }


  public InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare cashFlow(BigDecimal cashFlow) {
    this.cashFlow = cashFlow;
    return this;
  }

   /**
   * Cash flow per share, which is the ratio of the net operating cash flow, divided by the diluted shares outstanding.
   * @return cashFlow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cash flow per share, which is the ratio of the net operating cash flow, divided by the diluted shares outstanding.")
  @JsonProperty(JSON_PROPERTY_CASH_FLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCashFlow() {
    return cashFlow;
  }


  @JsonProperty(JSON_PROPERTY_CASH_FLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCashFlow(BigDecimal cashFlow) {
    this.cashFlow = cashFlow;
  }


  /**
   * Return true if this inline_response_200_7_reportedKeyFigures_firstFiscalYear_currencyDependentKeyFigures_perShare object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare inlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare = (InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare) o;
    return Objects.equals(this.sales, inlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare.sales) &&
        Objects.equals(this.recurringDilutedEarnings, inlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare.recurringDilutedEarnings) &&
        Objects.equals(this.dividends, inlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare.dividends) &&
        Objects.equals(this.bookValue, inlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare.bookValue) &&
        Objects.equals(this.cashFlow, inlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare.cashFlow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sales, recurringDilutedEarnings, dividends, bookValue, cashFlow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2007ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare {\n");
    sb.append("    sales: ").append(toIndentedString(sales)).append("\n");
    sb.append("    recurringDilutedEarnings: ").append(toIndentedString(recurringDilutedEarnings)).append("\n");
    sb.append("    dividends: ").append(toIndentedString(dividends)).append("\n");
    sb.append("    bookValue: ").append(toIndentedString(bookValue)).append("\n");
    sb.append("    cashFlow: ").append(toIndentedString(cashFlow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

