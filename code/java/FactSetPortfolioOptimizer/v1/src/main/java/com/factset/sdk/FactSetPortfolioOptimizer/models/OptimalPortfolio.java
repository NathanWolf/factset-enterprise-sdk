/*
 * Engines API
 * Allow clients to fetch Engines Analytics through APIs.
 *
 * The version of the OpenAPI document: 1
 * Contact: analytics.api.support@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetPortfolioOptimizer.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetPortfolioOptimizer.JSON;


/**
 * OptimalPortfolio
 */
@JsonPropertyOrder({
  OptimalPortfolio.JSON_PROPERTY_ACCTNAME,
  OptimalPortfolio.JSON_PROPERTY_EXCLUDEZERO,
  OptimalPortfolio.JSON_PROPERTY_ARCHIVEDATE,
  OptimalPortfolio.JSON_PROPERTY_IFACCTEXISTS,
  OptimalPortfolio.JSON_PROPERTY_IFOFDBDATEEXISTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OptimalPortfolio implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ACCTNAME = "acctname";
  private String acctname;

  public static final String JSON_PROPERTY_EXCLUDEZERO = "excludezero";
  private Boolean excludezero;

  public static final String JSON_PROPERTY_ARCHIVEDATE = "archivedate";
  private String archivedate;

  /**
   * Archive action if account exists
   */
  public enum IfacctexistsEnum {
    ABORT("abort"),
    
    OVERWRITE("overwrite"),
    
    APPENDDATE("appenddate");

    private String value;

    IfacctexistsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IfacctexistsEnum fromValue(String value) {
      for (IfacctexistsEnum b : IfacctexistsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IFACCTEXISTS = "ifacctexists";
  private IfacctexistsEnum ifacctexists;

  /**
   * Action if ofdb date exists
   */
  public enum IfofdbdateexistsEnum {
    ABORT("abort"),
    
    REPLACEDATE("replacedate"),
    
    APPENDSECURITIES("appendsecurities");

    private String value;

    IfofdbdateexistsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IfofdbdateexistsEnum fromValue(String value) {
      for (IfofdbdateexistsEnum b : IfofdbdateexistsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IFOFDBDATEEXISTS = "ifofdbdateexists";
  private IfofdbdateexistsEnum ifofdbdateexists;

  public OptimalPortfolio() { 
  }

  public OptimalPortfolio acctname(String acctname) {
    this.acctname = acctname;
    return this;
  }

   /**
   * Account path
   * @return acctname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Account path")
  @JsonProperty(JSON_PROPERTY_ACCTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAcctname() {
    return acctname;
  }


  @JsonProperty(JSON_PROPERTY_ACCTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcctname(String acctname) {
    this.acctname = acctname;
  }


  public OptimalPortfolio excludezero(Boolean excludezero) {
    this.excludezero = excludezero;
    return this;
  }

   /**
   * Exclude zero
   * @return excludezero
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Exclude zero")
  @JsonProperty(JSON_PROPERTY_EXCLUDEZERO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getExcludezero() {
    return excludezero;
  }


  @JsonProperty(JSON_PROPERTY_EXCLUDEZERO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExcludezero(Boolean excludezero) {
    this.excludezero = excludezero;
  }


  public OptimalPortfolio archivedate(String archivedate) {
    this.archivedate = archivedate;
    return this;
  }

   /**
   * Archive date
   * @return archivedate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Archive date")
  @JsonProperty(JSON_PROPERTY_ARCHIVEDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getArchivedate() {
    return archivedate;
  }


  @JsonProperty(JSON_PROPERTY_ARCHIVEDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArchivedate(String archivedate) {
    this.archivedate = archivedate;
  }


  public OptimalPortfolio ifacctexists(IfacctexistsEnum ifacctexists) {
    this.ifacctexists = ifacctexists;
    return this;
  }

   /**
   * Archive action if account exists
   * @return ifacctexists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Archive action if account exists")
  @JsonProperty(JSON_PROPERTY_IFACCTEXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IfacctexistsEnum getIfacctexists() {
    return ifacctexists;
  }


  @JsonProperty(JSON_PROPERTY_IFACCTEXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIfacctexists(IfacctexistsEnum ifacctexists) {
    this.ifacctexists = ifacctexists;
  }


  public OptimalPortfolio ifofdbdateexists(IfofdbdateexistsEnum ifofdbdateexists) {
    this.ifofdbdateexists = ifofdbdateexists;
    return this;
  }

   /**
   * Action if ofdb date exists
   * @return ifofdbdateexists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Action if ofdb date exists")
  @JsonProperty(JSON_PROPERTY_IFOFDBDATEEXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IfofdbdateexistsEnum getIfofdbdateexists() {
    return ifofdbdateexists;
  }


  @JsonProperty(JSON_PROPERTY_IFOFDBDATEEXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIfofdbdateexists(IfofdbdateexistsEnum ifofdbdateexists) {
    this.ifofdbdateexists = ifofdbdateexists;
  }


  /**
   * Return true if this OptimalPortfolio object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptimalPortfolio optimalPortfolio = (OptimalPortfolio) o;
    return Objects.equals(this.acctname, optimalPortfolio.acctname) &&
        Objects.equals(this.excludezero, optimalPortfolio.excludezero) &&
        Objects.equals(this.archivedate, optimalPortfolio.archivedate) &&
        Objects.equals(this.ifacctexists, optimalPortfolio.ifacctexists) &&
        Objects.equals(this.ifofdbdateexists, optimalPortfolio.ifofdbdateexists);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acctname, excludezero, archivedate, ifacctexists, ifofdbdateexists);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptimalPortfolio {\n");
    sb.append("    acctname: ").append(toIndentedString(acctname)).append("\n");
    sb.append("    excludezero: ").append(toIndentedString(excludezero)).append("\n");
    sb.append("    archivedate: ").append(toIndentedString(archivedate)).append("\n");
    sb.append("    ifacctexists: ").append(toIndentedString(ifacctexists)).append("\n");
    sb.append("    ifofdbdateexists: ").append(toIndentedString(ifofdbdateexists)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

