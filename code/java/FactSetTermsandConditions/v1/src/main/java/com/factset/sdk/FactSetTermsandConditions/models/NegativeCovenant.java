/*
 * FactSet Terms & Conditions API
 * The FactSet Terms & Conditions API exposes Terms & Conditions data for Fixed Income Corporate, Governement & Agency securities. The FactSet Corporate Government & Agency Terms & Conditions library provides descriptive data on the issue level, such as offering details, redemption information, and coupon schedules. Issuer level data is also available. Coverage is global and includes corporate, sovereign, and agency issues. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetTermsandConditions.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetTermsandConditions.JSON;


/**
 * Negative Covenant for a Fixed Income security.
 */
@ApiModel(description = "Negative Covenant for a Fixed Income security.")
@JsonPropertyOrder({
  NegativeCovenant.JSON_PROPERTY_REQUEST_ID,
  NegativeCovenant.JSON_PROPERTY_FSYM_ID,
  NegativeCovenant.JSON_PROPERTY_NEG_COVENANT_LVL,
  NegativeCovenant.JSON_PROPERTY_NEG_COVENANT_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NegativeCovenant implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public static final String JSON_PROPERTY_FSYM_ID = "fsymId";
  private String fsymId;

  public static final String JSON_PROPERTY_NEG_COVENANT_LVL = "negCovenantLvl";
  private String negCovenantLvl;

  public static final String JSON_PROPERTY_NEG_COVENANT_TYPE = "negCovenantType";
  private String negCovenantType;

  public NegativeCovenant() { 
  }

  public NegativeCovenant requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Security identifier used in the request.
   * @return requestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Security identifier used in the request.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public NegativeCovenant fsymId(String fsymId) {
    this.fsymId = fsymId;
    return this;
  }

   /**
   * FactSet Permanent Security Identifier.
   * @return fsymId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FactSet Permanent Security Identifier.")
  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFsymId() {
    return fsymId;
  }


  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFsymId(String fsymId) {
    this.fsymId = fsymId;
  }


  public NegativeCovenant negCovenantLvl(String negCovenantLvl) {
    this.negCovenantLvl = negCovenantLvl;
    return this;
  }

   /**
   * Negative Covenant Level
   * @return negCovenantLvl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Negative Covenant Level")
  @JsonProperty(JSON_PROPERTY_NEG_COVENANT_LVL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNegCovenantLvl() {
    return negCovenantLvl;
  }


  @JsonProperty(JSON_PROPERTY_NEG_COVENANT_LVL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNegCovenantLvl(String negCovenantLvl) {
    this.negCovenantLvl = negCovenantLvl;
  }


  public NegativeCovenant negCovenantType(String negCovenantType) {
    this.negCovenantType = negCovenantType;
    return this;
  }

   /**
   * Negative Covenant Type
   * @return negCovenantType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Negative Covenant Type")
  @JsonProperty(JSON_PROPERTY_NEG_COVENANT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNegCovenantType() {
    return negCovenantType;
  }


  @JsonProperty(JSON_PROPERTY_NEG_COVENANT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNegCovenantType(String negCovenantType) {
    this.negCovenantType = negCovenantType;
  }


  /**
   * Return true if this negativeCovenant object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NegativeCovenant negativeCovenant = (NegativeCovenant) o;
    return Objects.equals(this.requestId, negativeCovenant.requestId) &&
        Objects.equals(this.fsymId, negativeCovenant.fsymId) &&
        Objects.equals(this.negCovenantLvl, negativeCovenant.negCovenantLvl) &&
        Objects.equals(this.negCovenantType, negativeCovenant.negCovenantType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, fsymId, negCovenantLvl, negCovenantType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NegativeCovenant {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    fsymId: ").append(toIndentedString(fsymId)).append("\n");
    sb.append("    negCovenantLvl: ").append(toIndentedString(negCovenantLvl)).append("\n");
    sb.append("    negCovenantType: ").append(toIndentedString(negCovenantType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

