/*
 * FactSet Terms & Conditions API
 * The FactSet Terms & Conditions API exposes Terms & Conditions data for Fixed Income Corporate, Governement & Agency securities. The FactSet Corporate Government & Agency Terms & Conditions library provides descriptive data on the issue level, such as offering details, redemption information, and coupon schedules. Issuer level data is also available. Coverage is global and includes corporate, sovereign, and agency issues. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetTermsandConditions.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetTermsandConditions.JSON;


/**
 * Field
 */
@JsonPropertyOrder({
  Field.JSON_PROPERTY_FIELD,
  Field.JSON_PROPERTY_NAME,
  Field.JSON_PROPERTY_CATEGORY,
  Field.JSON_PROPERTY_DATA_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Field implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_FIELD = "field";
  private String field;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * Primary Category of field item, such as COUPON_DETAILS or SECURITY_DETAILS.
   */
  public enum CategoryEnum {
    CONVERTIBLE_FEATURES("CONVERTIBLE_FEATURES"),
    
    COUPON_DETAILS("COUPON_DETAILS"),
    
    REDEMPTION_OPTIONS("REDEMPTION_OPTIONS"),
    
    SECURITY_DETAILS("SECURITY_DETAILS");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private CategoryEnum category;

  public static final String JSON_PROPERTY_DATA_TYPE = "dataType";
  private String dataType;

  public Field() { 
  }

  public Field field(String field) {
    this.field = field;
    return this;
  }

   /**
   * Field identifier to be used as &#x60;fields&#x60; input in _Terms-and-Conditions_ endpoints. 
   * @return field
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "principalAmt", value = "Field identifier to be used as `fields` input in _Terms-and-Conditions_ endpoints. ")
  @JsonProperty(JSON_PROPERTY_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getField() {
    return field;
  }


  @JsonProperty(JSON_PROPERTY_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setField(String field) {
    this.field = field;
  }


  public Field name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Plain text name of the field.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Principal (or Face Value) Amount", value = "Plain text name of the field.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Field category(CategoryEnum category) {
    this.category = category;
    return this;
  }

   /**
   * Primary Category of field item, such as COUPON_DETAILS or SECURITY_DETAILS.
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SECURITY_DETAILS", value = "Primary Category of field item, such as COUPON_DETAILS or SECURITY_DETAILS.")
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CategoryEnum getCategory() {
    return category;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public Field dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * The Data Type of the respective field, including - * date * string * integer * double 
   * @return dataType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "integer", value = "The Data Type of the respective field, including - * date * string * integer * double ")
  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDataType() {
    return dataType;
  }


  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDataType(String dataType) {
    this.dataType = dataType;
  }


  /**
   * Return true if this field object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Field field = (Field) o;
    return Objects.equals(this.field, field.field) &&
        Objects.equals(this.name, field.name) &&
        Objects.equals(this.category, field.category) &&
        Objects.equals(this.dataType, field.dataType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, name, category, dataType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Field {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

