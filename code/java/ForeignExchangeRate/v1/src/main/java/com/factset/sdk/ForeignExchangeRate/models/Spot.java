/*
 * Foreign Exchange Rates API
 * Foreign Exchange Rates API in which retrieves Spots and Forwards for a given currency pair and date range. <p>*Spots and Forwards rates are sourced from W/M Reuters.The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. In 1994, WM Company began calculating closing spot rates. Closing spot rates provide a standard set of currency rates so that portfolio valuations can be compared to each other and their performances measured against benchmarks, without having discrepancies caused by exchange rates. Closing spot rates are recorded at 16:00 GMT.*</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.ForeignExchangeRate.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import org.threeten.bp.LocalDate;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.ForeignExchangeRate.JSON;


/**
 * Spot
 */
@JsonPropertyOrder({
  Spot.JSON_PROPERTY_REQUEST_ID,
  Spot.JSON_PROPERTY_CURRENCY_NAME,
  Spot.JSON_PROPERTY_SPOT_BID,
  Spot.JSON_PROPERTY_SPOT_MID,
  Spot.JSON_PROPERTY_SPOT_ASK,
  Spot.JSON_PROPERTY_DATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Spot implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public static final String JSON_PROPERTY_CURRENCY_NAME = "currencyName";
  private String currencyName;

  public static final String JSON_PROPERTY_SPOT_BID = "spotBid";
  private BigDecimal spotBid;

  public static final String JSON_PROPERTY_SPOT_MID = "spotMid";
  private BigDecimal spotMid;

  public static final String JSON_PROPERTY_SPOT_ASK = "spotAsk";
  private BigDecimal spotAsk;

  public static final String JSON_PROPERTY_DATE = "date";
  private LocalDate date;


  public Spot requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * The FX Spot Rate currency pair requested in the &#39;ids&#39; parameter. This represents the base and quote currency.
   * @return requestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USDGBP", value = "The FX Spot Rate currency pair requested in the 'ids' parameter. This represents the base and quote currency.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public Spot currencyName(String currencyName) {
    this.currencyName = currencyName;
    return this;
  }

   /**
   * The full text currency pair name expressed in Proper Case.
   * @return currencyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "British Pounds per U.S. Dollar", value = "The full text currency pair name expressed in Proper Case.")
  @JsonProperty(JSON_PROPERTY_CURRENCY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrencyName() {
    return currencyName;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrencyName(String currencyName) {
    this.currencyName = currencyName;
  }


  public Spot spotBid(BigDecimal spotBid) {
    this.spotBid = spotBid;
    return this;
  }

   /**
   * The currency pair&#39;s spot rate Bid.
   * @return spotBid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.799232737", value = "The currency pair's spot rate Bid.")
  @JsonProperty(JSON_PROPERTY_SPOT_BID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSpotBid() {
    return spotBid;
  }


  @JsonProperty(JSON_PROPERTY_SPOT_BID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpotBid(BigDecimal spotBid) {
    this.spotBid = spotBid;
  }


  public Spot spotMid(BigDecimal spotMid) {
    this.spotMid = spotMid;
    return this;
  }

   /**
   * The currency pair&#39;s spot rate Mid.
   * @return spotMid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.799360512", value = "The currency pair's spot rate Mid.")
  @JsonProperty(JSON_PROPERTY_SPOT_MID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSpotMid() {
    return spotMid;
  }


  @JsonProperty(JSON_PROPERTY_SPOT_MID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpotMid(BigDecimal spotMid) {
    this.spotMid = spotMid;
  }


  public Spot spotAsk(BigDecimal spotAsk) {
    this.spotAsk = spotAsk;
    return this;
  }

   /**
   * The currency pair&#39;s spot rate Ask.
   * @return spotAsk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.799488327", value = "The currency pair's spot rate Ask.")
  @JsonProperty(JSON_PROPERTY_SPOT_ASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSpotAsk() {
    return spotAsk;
  }


  @JsonProperty(JSON_PROPERTY_SPOT_ASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpotAsk(BigDecimal spotAsk) {
    this.spotAsk = spotAsk;
  }


  public Spot date(LocalDate date) {
    this.date = date;
    return this;
  }

   /**
   * Ending date for the period expressed in YYYY-MM-DD format.
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Tue Jul 07 00:00:00 UTC 2020", value = "Ending date for the period expressed in YYYY-MM-DD format.")
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(LocalDate date) {
    this.date = date;
  }


  /**
   * Return true if this spot object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Spot spot = (Spot) o;
    return Objects.equals(this.requestId, spot.requestId) &&
        Objects.equals(this.currencyName, spot.currencyName) &&
        Objects.equals(this.spotBid, spot.spotBid) &&
        Objects.equals(this.spotMid, spot.spotMid) &&
        Objects.equals(this.spotAsk, spot.spotAsk) &&
        Objects.equals(this.date, spot.date);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, currencyName, spotBid, spotMid, spotAsk, date);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Spot {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    currencyName: ").append(toIndentedString(currencyName)).append("\n");
    sb.append("    spotBid: ").append(toIndentedString(spotBid)).append("\n");
    sb.append("    spotMid: ").append(toIndentedString(spotMid)).append("\n");
    sb.append("    spotAsk: ").append(toIndentedString(spotAsk)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

