/*
 * Documents Distributor - CallStreet Events
 * CallStreet Events contains all the Documents Distributor APIs that offer events data such as Events Audio and Near Real-Time Transcripts.  The  Events Audio API provides access to historical as well as latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days.   This API also provides relevant metadata such as timestamps and identifiers around each audio file.  The Documents Distributor - Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models.  Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service. 
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.DocumentsDistributorCallStreetEvents.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.DocumentsDistributorCallStreetEvents.JSON;


/**
 * NRTCallsData
 */
@JsonPropertyOrder({
  NRTCallsData.JSON_PROPERTY_CALL_STATUS,
  NRTCallsData.JSON_PROPERTY_REPORT_ID,
  NRTCallsData.JSON_PROPERTY_SOURCE_CODE,
  NRTCallsData.JSON_PROPERTY_AUDIO_SOURCE_ID,
  NRTCallsData.JSON_PROPERTY_RECORDING_START_TIME,
  NRTCallsData.JSON_PROPERTY_TICKER,
  NRTCallsData.JSON_PROPERTY_ENTITY_ID,
  NRTCallsData.JSON_PROPERTY_EVENT_TYPE,
  NRTCallsData.JSON_PROPERTY_EVENT_TITLE,
  NRTCallsData.JSON_PROPERTY_EVENT_DATETIME_UTC
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NRTCallsData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CALL_STATUS = "callStatus";
  private JsonNullable<String> callStatus = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_REPORT_ID = "reportId";
  private JsonNullable<Integer> reportId = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_SOURCE_CODE = "sourceCode";
  private JsonNullable<String> sourceCode = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_AUDIO_SOURCE_ID = "audioSourceId";
  private JsonNullable<Integer> audioSourceId = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_RECORDING_START_TIME = "recordingStartTime";
  private JsonNullable<String> recordingStartTime = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TICKER = "ticker";
  private JsonNullable<String> ticker = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENTITY_ID = "entityId";
  private JsonNullable<String> entityId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
  private JsonNullable<String> eventType = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_EVENT_TITLE = "eventTitle";
  private JsonNullable<String> eventTitle = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_EVENT_DATETIME_UTC = "eventDatetimeUtc";
  private JsonNullable<String> eventDatetimeUtc = JsonNullable.<String>undefined();

  public NRTCallsData() { 
  }

  public NRTCallsData callStatus(String callStatus) {
    this.callStatus = JsonNullable.<String>of(callStatus);
    return this;
  }

   /**
   * Status of the call i.e. ended or inProgress or ewn or issueAtSource.  * inProgress- the call is in progress. * ended- the call has ended. * ewn- the call has technically ended and can be considered as ended but is missing a notification from the upstream systems. * issueAtSource- the call has ended with no snippet data due to a possible issue at the source.
   * @return callStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the call i.e. ended or inProgress or ewn or issueAtSource.  * inProgress- the call is in progress. * ended- the call has ended. * ewn- the call has technically ended and can be considered as ended but is missing a notification from the upstream systems. * issueAtSource- the call has ended with no snippet data due to a possible issue at the source.")
  @JsonIgnore

  public String getCallStatus() {
        return callStatus.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CALL_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCallStatus_JsonNullable() {
    return callStatus;
  }
  
  @JsonProperty(JSON_PROPERTY_CALL_STATUS)
  public void setCallStatus_JsonNullable(JsonNullable<String> callStatus) {
    this.callStatus = callStatus;
  }

  public void setCallStatus(String callStatus) {
    this.callStatus = JsonNullable.<String>of(callStatus);
  }


  public NRTCallsData reportId(Integer reportId) {
    this.reportId = JsonNullable.<Integer>of(reportId);
    return this;
  }

   /**
   * The unique ID for an event.
   * @return reportId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique ID for an event.")
  @JsonIgnore

  public Integer getReportId() {
        return reportId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REPORT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getReportId_JsonNullable() {
    return reportId;
  }
  
  @JsonProperty(JSON_PROPERTY_REPORT_ID)
  public void setReportId_JsonNullable(JsonNullable<Integer> reportId) {
    this.reportId = reportId;
  }

  public void setReportId(Integer reportId) {
    this.reportId = JsonNullable.<Integer>of(reportId);
  }


  public NRTCallsData sourceCode(String sourceCode) {
    this.sourceCode = JsonNullable.<String>of(sourceCode);
    return this;
  }

   /**
   * Identifier for the source of how the event is recorded. P:- Phone Replay W:- Webcast
   * @return sourceCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier for the source of how the event is recorded. P:- Phone Replay W:- Webcast")
  @JsonIgnore

  public String getSourceCode() {
        return sourceCode.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SOURCE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSourceCode_JsonNullable() {
    return sourceCode;
  }
  
  @JsonProperty(JSON_PROPERTY_SOURCE_CODE)
  public void setSourceCode_JsonNullable(JsonNullable<String> sourceCode) {
    this.sourceCode = sourceCode;
  }

  public void setSourceCode(String sourceCode) {
    this.sourceCode = JsonNullable.<String>of(sourceCode);
  }


  public NRTCallsData audioSourceId(Integer audioSourceId) {
    this.audioSourceId = JsonNullable.<Integer>of(audioSourceId);
    return this;
  }

   /**
   * Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in - P or webcast - W). One reportId can have multiple audiosourceIDs.
   * @return audioSourceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in - P or webcast - W). One reportId can have multiple audiosourceIDs.")
  @JsonIgnore

  public Integer getAudioSourceId() {
        return audioSourceId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUDIO_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getAudioSourceId_JsonNullable() {
    return audioSourceId;
  }
  
  @JsonProperty(JSON_PROPERTY_AUDIO_SOURCE_ID)
  public void setAudioSourceId_JsonNullable(JsonNullable<Integer> audioSourceId) {
    this.audioSourceId = audioSourceId;
  }

  public void setAudioSourceId(Integer audioSourceId) {
    this.audioSourceId = JsonNullable.<Integer>of(audioSourceId);
  }


  public NRTCallsData recordingStartTime(String recordingStartTime) {
    this.recordingStartTime = JsonNullable.<String>of(recordingStartTime);
    return this;
  }

   /**
   * The official UTC timestamp when FactSet starts the recording.
   * @return recordingStartTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The official UTC timestamp when FactSet starts the recording.")
  @JsonIgnore

  public String getRecordingStartTime() {
        return recordingStartTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RECORDING_START_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getRecordingStartTime_JsonNullable() {
    return recordingStartTime;
  }
  
  @JsonProperty(JSON_PROPERTY_RECORDING_START_TIME)
  public void setRecordingStartTime_JsonNullable(JsonNullable<String> recordingStartTime) {
    this.recordingStartTime = recordingStartTime;
  }

  public void setRecordingStartTime(String recordingStartTime) {
    this.recordingStartTime = JsonNullable.<String>of(recordingStartTime);
  }


  public NRTCallsData ticker(String ticker) {
    this.ticker = JsonNullable.<String>of(ticker);
    return this;
  }

   /**
   * Ticker-region identifier for the company hosting the event.
   * @return ticker
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ticker-region identifier for the company hosting the event.")
  @JsonIgnore

  public String getTicker() {
        return ticker.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TICKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTicker_JsonNullable() {
    return ticker;
  }
  
  @JsonProperty(JSON_PROPERTY_TICKER)
  public void setTicker_JsonNullable(JsonNullable<String> ticker) {
    this.ticker = ticker;
  }

  public void setTicker(String ticker) {
    this.ticker = JsonNullable.<String>of(ticker);
  }


  public NRTCallsData entityId(String entityId) {
    this.entityId = JsonNullable.<String>of(entityId);
    return this;
  }

   /**
   * Factset entity level identifier for the company hosting the event.
   * @return entityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Factset entity level identifier for the company hosting the event.")
  @JsonIgnore

  public String getEntityId() {
        return entityId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEntityId_JsonNullable() {
    return entityId;
  }
  
  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  public void setEntityId_JsonNullable(JsonNullable<String> entityId) {
    this.entityId = entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = JsonNullable.<String>of(entityId);
  }


  public NRTCallsData eventType(String eventType) {
    this.eventType = JsonNullable.<String>of(eventType);
    return this;
  }

   /**
   * Refers to the various event types covered by FactSet CallStreet - * Analyst, Investor &amp; Shareholder Meeting &#x3D;&gt; AS * Earnings Call &#x3D;&gt; E * Earnings Release &#x3D;&gt; ER * Guidance &#x3D;&gt; G * Sales &amp; Revenue Call &#x3D;&gt; SA * Sales &amp; Revenue Release &#x3D;&gt; SR * Special &amp; M&amp;A (Special Situation) &#x3D;&gt; SS
   * @return eventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Refers to the various event types covered by FactSet CallStreet - * Analyst, Investor & Shareholder Meeting => AS * Earnings Call => E * Earnings Release => ER * Guidance => G * Sales & Revenue Call => SA * Sales & Revenue Release => SR * Special & M&A (Special Situation) => SS")
  @JsonIgnore

  public String getEventType() {
        return eventType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEventType_JsonNullable() {
    return eventType;
  }
  
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  public void setEventType_JsonNullable(JsonNullable<String> eventType) {
    this.eventType = eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = JsonNullable.<String>of(eventType);
  }


  public NRTCallsData eventTitle(String eventTitle) {
    this.eventTitle = JsonNullable.<String>of(eventTitle);
    return this;
  }

   /**
   * Title of the Event.
   * @return eventTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title of the Event.")
  @JsonIgnore

  public String getEventTitle() {
        return eventTitle.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EVENT_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEventTitle_JsonNullable() {
    return eventTitle;
  }
  
  @JsonProperty(JSON_PROPERTY_EVENT_TITLE)
  public void setEventTitle_JsonNullable(JsonNullable<String> eventTitle) {
    this.eventTitle = eventTitle;
  }

  public void setEventTitle(String eventTitle) {
    this.eventTitle = JsonNullable.<String>of(eventTitle);
  }


  public NRTCallsData eventDatetimeUtc(String eventDatetimeUtc) {
    this.eventDatetimeUtc = JsonNullable.<String>of(eventDatetimeUtc);
    return this;
  }

   /**
   * The official UTC timestamp of the start of the event.
   * @return eventDatetimeUtc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The official UTC timestamp of the start of the event.")
  @JsonIgnore

  public String getEventDatetimeUtc() {
        return eventDatetimeUtc.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EVENT_DATETIME_UTC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEventDatetimeUtc_JsonNullable() {
    return eventDatetimeUtc;
  }
  
  @JsonProperty(JSON_PROPERTY_EVENT_DATETIME_UTC)
  public void setEventDatetimeUtc_JsonNullable(JsonNullable<String> eventDatetimeUtc) {
    this.eventDatetimeUtc = eventDatetimeUtc;
  }

  public void setEventDatetimeUtc(String eventDatetimeUtc) {
    this.eventDatetimeUtc = JsonNullable.<String>of(eventDatetimeUtc);
  }


  /**
   * Return true if this NRT_Calls_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NRTCallsData nrTCallsData = (NRTCallsData) o;
    return equalsNullable(this.callStatus, nrTCallsData.callStatus) &&
        equalsNullable(this.reportId, nrTCallsData.reportId) &&
        equalsNullable(this.sourceCode, nrTCallsData.sourceCode) &&
        equalsNullable(this.audioSourceId, nrTCallsData.audioSourceId) &&
        equalsNullable(this.recordingStartTime, nrTCallsData.recordingStartTime) &&
        equalsNullable(this.ticker, nrTCallsData.ticker) &&
        equalsNullable(this.entityId, nrTCallsData.entityId) &&
        equalsNullable(this.eventType, nrTCallsData.eventType) &&
        equalsNullable(this.eventTitle, nrTCallsData.eventTitle) &&
        equalsNullable(this.eventDatetimeUtc, nrTCallsData.eventDatetimeUtc);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(callStatus), hashCodeNullable(reportId), hashCodeNullable(sourceCode), hashCodeNullable(audioSourceId), hashCodeNullable(recordingStartTime), hashCodeNullable(ticker), hashCodeNullable(entityId), hashCodeNullable(eventType), hashCodeNullable(eventTitle), hashCodeNullable(eventDatetimeUtc));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NRTCallsData {\n");
    sb.append("    callStatus: ").append(toIndentedString(callStatus)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    sourceCode: ").append(toIndentedString(sourceCode)).append("\n");
    sb.append("    audioSourceId: ").append(toIndentedString(audioSourceId)).append("\n");
    sb.append("    recordingStartTime: ").append(toIndentedString(recordingStartTime)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventTitle: ").append(toIndentedString(eventTitle)).append("\n");
    sb.append("    eventDatetimeUtc: ").append(toIndentedString(eventDatetimeUtc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

