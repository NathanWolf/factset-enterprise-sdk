/*
 * Documents Distributor - CallStreet Events
 * CallStreet Events contains all the Documents Distributor APIs that provide events data such as Events Audio and Near Real-Time Transcripts  The  Events Audio API provides access to all audio recordings to various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days.   This API also provides relevant metadata such as timestamps and identifiers around each audio file.  The Documents Distributor - Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models.  Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.DocumentsDistributorCallStreetEvents.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.DocumentsDistributorCallStreetEvents.JSON;


/**
 * NRTCallsData
 */
@JsonPropertyOrder({
  NRTCallsData.JSON_PROPERTY_CALL_STATUS,
  NRTCallsData.JSON_PROPERTY_REPORT_ID,
  NRTCallsData.JSON_PROPERTY_SOURCE_CODE,
  NRTCallsData.JSON_PROPERTY_AUDIO_SOURCE_ID,
  NRTCallsData.JSON_PROPERTY_RECORDING_START_TIME,
  NRTCallsData.JSON_PROPERTY_TICKER,
  NRTCallsData.JSON_PROPERTY_ENTITY_ID,
  NRTCallsData.JSON_PROPERTY_EVENT_TYPE,
  NRTCallsData.JSON_PROPERTY_EVENT_TITLE,
  NRTCallsData.JSON_PROPERTY_EVENT_DATETIME_UTC
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NRTCallsData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CALL_STATUS = "callStatus";
  private String callStatus;

  public static final String JSON_PROPERTY_REPORT_ID = "reportId";
  private Integer reportId;

  public static final String JSON_PROPERTY_SOURCE_CODE = "sourceCode";
  private String sourceCode;

  public static final String JSON_PROPERTY_AUDIO_SOURCE_ID = "audioSourceId";
  private Integer audioSourceId;

  public static final String JSON_PROPERTY_RECORDING_START_TIME = "recordingStartTime";
  private String recordingStartTime;

  public static final String JSON_PROPERTY_TICKER = "ticker";
  private String ticker;

  public static final String JSON_PROPERTY_ENTITY_ID = "entityId";
  private String entityId;

  public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
  private String eventType;

  public static final String JSON_PROPERTY_EVENT_TITLE = "eventTitle";
  private String eventTitle;

  public static final String JSON_PROPERTY_EVENT_DATETIME_UTC = "eventDatetimeUtc";
  private String eventDatetimeUtc;

  public NRTCallsData() { 
  }

  public NRTCallsData callStatus(String callStatus) {
    this.callStatus = callStatus;
    return this;
  }

   /**
   * Status of the call i.e. ended or inProgress or ewn or issueAtSource  * inProgress- the call is in progress * ended- the call has ended * ewn- the call has technically ended and can be considered as ended but is missing a notification from the upstream systems * issueAtSource- the call has ended with no snippet data due to a possible issue at the source
   * @return callStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the call i.e. ended or inProgress or ewn or issueAtSource  * inProgress- the call is in progress * ended- the call has ended * ewn- the call has technically ended and can be considered as ended but is missing a notification from the upstream systems * issueAtSource- the call has ended with no snippet data due to a possible issue at the source")
  @JsonProperty(JSON_PROPERTY_CALL_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCallStatus() {
    return callStatus;
  }


  @JsonProperty(JSON_PROPERTY_CALL_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCallStatus(String callStatus) {
    this.callStatus = callStatus;
  }


  public NRTCallsData reportId(Integer reportId) {
    this.reportId = reportId;
    return this;
  }

   /**
   * The unique ID for an event.
   * @return reportId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique ID for an event.")
  @JsonProperty(JSON_PROPERTY_REPORT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getReportId() {
    return reportId;
  }


  @JsonProperty(JSON_PROPERTY_REPORT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReportId(Integer reportId) {
    this.reportId = reportId;
  }


  public NRTCallsData sourceCode(String sourceCode) {
    this.sourceCode = sourceCode;
    return this;
  }

   /**
   * Identifier for the source of how the event is recorded. P:- Phone Replay W:- Webcast
   * @return sourceCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier for the source of how the event is recorded. P:- Phone Replay W:- Webcast")
  @JsonProperty(JSON_PROPERTY_SOURCE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceCode() {
    return sourceCode;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceCode(String sourceCode) {
    this.sourceCode = sourceCode;
  }


  public NRTCallsData audioSourceId(Integer audioSourceId) {
    this.audioSourceId = audioSourceId;
    return this;
  }

   /**
   * Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in - P or webcast - W). One reportId can have multiple audiosource ids.
   * @return audioSourceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in - P or webcast - W). One reportId can have multiple audiosource ids.")
  @JsonProperty(JSON_PROPERTY_AUDIO_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAudioSourceId() {
    return audioSourceId;
  }


  @JsonProperty(JSON_PROPERTY_AUDIO_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAudioSourceId(Integer audioSourceId) {
    this.audioSourceId = audioSourceId;
  }


  public NRTCallsData recordingStartTime(String recordingStartTime) {
    this.recordingStartTime = recordingStartTime;
    return this;
  }

   /**
   * The official UTC timestamp when FactSet starts the recording
   * @return recordingStartTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The official UTC timestamp when FactSet starts the recording")
  @JsonProperty(JSON_PROPERTY_RECORDING_START_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRecordingStartTime() {
    return recordingStartTime;
  }


  @JsonProperty(JSON_PROPERTY_RECORDING_START_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecordingStartTime(String recordingStartTime) {
    this.recordingStartTime = recordingStartTime;
  }


  public NRTCallsData ticker(String ticker) {
    this.ticker = ticker;
    return this;
  }

   /**
   * Ticker-region identifier for the company hosting the event
   * @return ticker
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ticker-region identifier for the company hosting the event")
  @JsonProperty(JSON_PROPERTY_TICKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTicker() {
    return ticker;
  }


  @JsonProperty(JSON_PROPERTY_TICKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTicker(String ticker) {
    this.ticker = ticker;
  }


  public NRTCallsData entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

   /**
   * Factset entity level identifier for the company hosting the event
   * @return entityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Factset entity level identifier for the company hosting the event")
  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEntityId() {
    return entityId;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public NRTCallsData eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Refers to the various event types covered by FactSet CallStreet - * Analyst, Investor &amp; Shareholder Meeting &#x3D;&gt; AS * Earnings Call &#x3D;&gt; E * Earnings Release &#x3D;&gt; ER * Guidance &#x3D;&gt; G * Sales &amp; Revenue Call &#x3D;&gt; SA * Sales &amp; Revenue Release &#x3D;&gt; SR * Special &amp; M&amp;A (Special Situation) &#x3D;&gt; SS
   * @return eventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Refers to the various event types covered by FactSet CallStreet - * Analyst, Investor & Shareholder Meeting => AS * Earnings Call => E * Earnings Release => ER * Guidance => G * Sales & Revenue Call => SA * Sales & Revenue Release => SR * Special & M&A (Special Situation) => SS")
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEventType() {
    return eventType;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public NRTCallsData eventTitle(String eventTitle) {
    this.eventTitle = eventTitle;
    return this;
  }

   /**
   * Title of the Event
   * @return eventTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title of the Event")
  @JsonProperty(JSON_PROPERTY_EVENT_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEventTitle() {
    return eventTitle;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventTitle(String eventTitle) {
    this.eventTitle = eventTitle;
  }


  public NRTCallsData eventDatetimeUtc(String eventDatetimeUtc) {
    this.eventDatetimeUtc = eventDatetimeUtc;
    return this;
  }

   /**
   * The official UTC timestamp of the start of the event
   * @return eventDatetimeUtc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The official UTC timestamp of the start of the event")
  @JsonProperty(JSON_PROPERTY_EVENT_DATETIME_UTC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEventDatetimeUtc() {
    return eventDatetimeUtc;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_DATETIME_UTC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventDatetimeUtc(String eventDatetimeUtc) {
    this.eventDatetimeUtc = eventDatetimeUtc;
  }


  /**
   * Return true if this NRT_Calls_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NRTCallsData nrTCallsData = (NRTCallsData) o;
    return Objects.equals(this.callStatus, nrTCallsData.callStatus) &&
        Objects.equals(this.reportId, nrTCallsData.reportId) &&
        Objects.equals(this.sourceCode, nrTCallsData.sourceCode) &&
        Objects.equals(this.audioSourceId, nrTCallsData.audioSourceId) &&
        Objects.equals(this.recordingStartTime, nrTCallsData.recordingStartTime) &&
        Objects.equals(this.ticker, nrTCallsData.ticker) &&
        Objects.equals(this.entityId, nrTCallsData.entityId) &&
        Objects.equals(this.eventType, nrTCallsData.eventType) &&
        Objects.equals(this.eventTitle, nrTCallsData.eventTitle) &&
        Objects.equals(this.eventDatetimeUtc, nrTCallsData.eventDatetimeUtc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callStatus, reportId, sourceCode, audioSourceId, recordingStartTime, ticker, entityId, eventType, eventTitle, eventDatetimeUtc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NRTCallsData {\n");
    sb.append("    callStatus: ").append(toIndentedString(callStatus)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    sourceCode: ").append(toIndentedString(sourceCode)).append("\n");
    sb.append("    audioSourceId: ").append(toIndentedString(audioSourceId)).append("\n");
    sb.append("    recordingStartTime: ").append(toIndentedString(recordingStartTime)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventTitle: ").append(toIndentedString(eventTitle)).append("\n");
    sb.append("    eventDatetimeUtc: ").append(toIndentedString(eventDatetimeUtc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

