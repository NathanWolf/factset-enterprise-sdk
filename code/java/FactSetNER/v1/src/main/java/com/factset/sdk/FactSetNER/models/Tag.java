/*
 * NER API
 * Extract named entities and their FactSet entity IDs from given document text.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetNER.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetNER.JSON;


/**
 * Tag
 */
@JsonPropertyOrder({
  Tag.JSON_PROPERTY_TYPE,
  Tag.JSON_PROPERTY_SUB_TYPE,
  Tag.JSON_PROPERTY_TEXT,
  Tag.JSON_PROPERTY_SCORE,
  Tag.JSON_PROPERTY_START_CHAR,
  Tag.JSON_PROPERTY_END_CHAR,
  Tag.JSON_PROPERTY_LOOKUP_TEXT,
  Tag.JSON_PROPERTY_NE_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Tag implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Type of the extracted named-entity (NE).
   */
  public enum TypeEnum {
    GPE("NE_GPE"),
    
    ORG("NE_ORG"),
    
    PERSON("NE_PERSON"),
    
    PHARMACEUTICAL("NE_PHARMACEUTICAL"),
    
    DATETIME("NE_DATETIME"),
    
    NUMBER("NE_NUMBER"),
    
    MONEY("NE_MONEY");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * More specific sub-type (e.g., NE_COUNTRY) of the named-entity (if applicable).
   */
  public enum SubTypeEnum {
    GENERIC_DRUG("NE_GENERIC_DRUG"),
    
    BRANDED_DRUG("NE_BRANDED_DRUG"),
    
    DRUG_CLASS("NE_DRUG_CLASS"),
    
    PIPELINE_DRUG("NE_PIPELINE_DRUG"),
    
    INDICATION("NE_INDICATION");

    private String value;

    SubTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SubTypeEnum fromValue(String value) {
      for (SubTypeEnum b : SubTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SUB_TYPE = "subType";
  private SubTypeEnum subType;

  public static final String JSON_PROPERTY_TEXT = "text";
  private String text;

  public static final String JSON_PROPERTY_SCORE = "score";
  private BigDecimal score;

  public static final String JSON_PROPERTY_START_CHAR = "startChar";
  private Integer startChar;

  public static final String JSON_PROPERTY_END_CHAR = "endChar";
  private Integer endChar;

  public static final String JSON_PROPERTY_LOOKUP_TEXT = "lookupText";
  private String lookupText;

  public static final String JSON_PROPERTY_NE_ID = "neId";
  private String neId;

  public Tag() { 
  }

  public Tag type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of the extracted named-entity (NE).
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "NE_GPE", value = "Type of the extracted named-entity (NE).")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Tag subType(SubTypeEnum subType) {
    this.subType = subType;
    return this;
  }

   /**
   * More specific sub-type (e.g., NE_COUNTRY) of the named-entity (if applicable).
   * @return subType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "NE_GPE", value = "More specific sub-type (e.g., NE_COUNTRY) of the named-entity (if applicable).")
  @JsonProperty(JSON_PROPERTY_SUB_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SubTypeEnum getSubType() {
    return subType;
  }


  @JsonProperty(JSON_PROPERTY_SUB_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubType(SubTypeEnum subType) {
    this.subType = subType;
  }


  public Tag text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Text for the named-entity (NE), as extracted from the given document.
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Text for the named-entity (NE), as extracted from the given document.")
  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getText() {
    return text;
  }


  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setText(String text) {
    this.text = text;
  }


  public Tag score(BigDecimal score) {
    this.score = score;
    return this;
  }

   /**
   * Get score
   * minimum: 0
   * @return score
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getScore() {
    return score;
  }


  @JsonProperty(JSON_PROPERTY_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScore(BigDecimal score) {
    this.score = score;
  }


  public Tag startChar(Integer startChar) {
    this.startChar = startChar;
    return this;
  }

   /**
   * Starting character position of the named-entity text (relative to any offset provided (default offset&#x3D;0)).
   * minimum: 0
   * @return startChar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Starting character position of the named-entity text (relative to any offset provided (default offset=0)).")
  @JsonProperty(JSON_PROPERTY_START_CHAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStartChar() {
    return startChar;
  }


  @JsonProperty(JSON_PROPERTY_START_CHAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartChar(Integer startChar) {
    this.startChar = startChar;
  }


  public Tag endChar(Integer endChar) {
    this.endChar = endChar;
    return this;
  }

   /**
   * Ending character position of the named-entity text (relative to any offset provided (default offset&#x3D;0))
   * minimum: 0
   * @return endChar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ending character position of the named-entity text (relative to any offset provided (default offset=0))")
  @JsonProperty(JSON_PROPERTY_END_CHAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEndChar() {
    return endChar;
  }


  @JsonProperty(JSON_PROPERTY_END_CHAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndChar(Integer endChar) {
    this.endChar = endChar;
  }


  public Tag lookupText(String lookupText) {
    this.lookupText = lookupText;
    return this;
  }

   /**
   * Best-matching (FactSet) looked-up name for the extracted named-entity.
   * @return lookupText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Best-matching (FactSet) looked-up name for the extracted named-entity.")
  @JsonProperty(JSON_PROPERTY_LOOKUP_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLookupText() {
    return lookupText;
  }


  @JsonProperty(JSON_PROPERTY_LOOKUP_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLookupText(String lookupText) {
    this.lookupText = lookupText;
  }


  public Tag neId(String neId) {
    this.neId = neId;
    return this;
  }

   /**
   * Best-matching (FactSet) entity-id for the extracted named-entity
   * @return neId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Best-matching (FactSet) entity-id for the extracted named-entity")
  @JsonProperty(JSON_PROPERTY_NE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNeId() {
    return neId;
  }


  @JsonProperty(JSON_PROPERTY_NE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNeId(String neId) {
    this.neId = neId;
  }


  /**
   * Return true if this Tag object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tag tag = (Tag) o;
    return Objects.equals(this.type, tag.type) &&
        Objects.equals(this.subType, tag.subType) &&
        Objects.equals(this.text, tag.text) &&
        Objects.equals(this.score, tag.score) &&
        Objects.equals(this.startChar, tag.startChar) &&
        Objects.equals(this.endChar, tag.endChar) &&
        Objects.equals(this.lookupText, tag.lookupText) &&
        Objects.equals(this.neId, tag.neId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, subType, text, score, startChar, endChar, lookupText, neId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tag {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    startChar: ").append(toIndentedString(startChar)).append("\n");
    sb.append("    endChar: ").append(toIndentedString(endChar)).append("\n");
    sb.append("    lookupText: ").append(toIndentedString(lookupText)).append("\n");
    sb.append("    neId: ").append(toIndentedString(neId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

