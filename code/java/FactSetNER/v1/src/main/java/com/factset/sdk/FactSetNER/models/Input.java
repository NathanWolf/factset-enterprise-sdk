/*
 * NER API
 * Extract named entities and their FactSet entity IDs from given document text.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetNER.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetNER.JSON;


/**
 * Input
 */
@JsonPropertyOrder({
  Input.JSON_PROPERTY_TEXT,
  Input.JSON_PROPERTY_CHARACTER_OFFSET,
  Input.JSON_PROPERTY_ID_TYPE,
  Input.JSON_PROPERTY_FILTER_TAGS_WITHOUT_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Input implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TEXT = "text";
  private String text;

  public static final String JSON_PROPERTY_CHARACTER_OFFSET = "characterOffset";
  private Integer characterOffset;

  /**
   * Format of the Ids to return for the extracted named entities.
   */
  public enum IdTypeEnum {
    ICONUM("iconum"),
    
    ENTITYID("entityId");

    private String value;

    IdTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IdTypeEnum fromValue(String value) {
      for (IdTypeEnum b : IdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ID_TYPE = "idType";
  private IdTypeEnum idType = IdTypeEnum.ICONUM;

  public static final String JSON_PROPERTY_FILTER_TAGS_WITHOUT_ID = "filterTagsWithoutId";
  private Boolean filterTagsWithoutId = true;

  public Input() { 
  }

  @JsonCreator
  public Input(
    @JsonProperty(value=JSON_PROPERTY_TEXT, required=true) String text
  ) {
    this();
    this.text = text;
  }

  public Input text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Input-text (plain text (preferred) or HTML-formatted) of document to extract named-entities from.
   * @return text
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "As demand for the coronavirus vaccine plateaus, Ohio Governor Mike DeWine is giving state residents a shot to win $1 million. Starting May 26, the state will award $1 million each week to an adult who has received at least the first dose of the COVID-19 vaccine, DeWine said. There will be five total drawings. This will give anyone who has not been vaccinated time to get the first dose of Pfizer or Moderna and be well on the way to full immunity, DeWine said Wednesday. West Virginia Governor Jim Justice wanted to give every vaccinated resident between the ages of 16 and 35 a $100 savings bond. States and localities have been given wide discretion by the Treasury Department in spending federal aid.", required = true, value = "Input-text (plain text (preferred) or HTML-formatted) of document to extract named-entities from.")
  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getText() {
    return text;
  }


  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setText(String text) {
    this.text = text;
  }


  public Input characterOffset(Integer characterOffset) {
    this.characterOffset = characterOffset;
    return this;
  }

   /**
   * Offset to add to the returned named entity positions; useful if the given text input is not from the beginning of the original document.
   * minimum: 0
   * @return characterOffset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Offset to add to the returned named entity positions; useful if the given text input is not from the beginning of the original document.")
  @JsonProperty(JSON_PROPERTY_CHARACTER_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCharacterOffset() {
    return characterOffset;
  }


  @JsonProperty(JSON_PROPERTY_CHARACTER_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCharacterOffset(Integer characterOffset) {
    this.characterOffset = characterOffset;
  }


  public Input idType(IdTypeEnum idType) {
    this.idType = idType;
    return this;
  }

   /**
   * Format of the Ids to return for the extracted named entities.
   * @return idType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "entityId", value = "Format of the Ids to return for the extracted named entities.")
  @JsonProperty(JSON_PROPERTY_ID_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IdTypeEnum getIdType() {
    return idType;
  }


  @JsonProperty(JSON_PROPERTY_ID_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdType(IdTypeEnum idType) {
    this.idType = idType;
  }


  public Input filterTagsWithoutId(Boolean filterTagsWithoutId) {
    this.filterTagsWithoutId = filterTagsWithoutId;
    return this;
  }

   /**
   * Boolean flag, set True [False] to [not] drop named entities for which a matching Id could not be found.
   * @return filterTagsWithoutId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Boolean flag, set True [False] to [not] drop named entities for which a matching Id could not be found.")
  @JsonProperty(JSON_PROPERTY_FILTER_TAGS_WITHOUT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFilterTagsWithoutId() {
    return filterTagsWithoutId;
  }


  @JsonProperty(JSON_PROPERTY_FILTER_TAGS_WITHOUT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterTagsWithoutId(Boolean filterTagsWithoutId) {
    this.filterTagsWithoutId = filterTagsWithoutId;
  }


  /**
   * Return true if this Input object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Input input = (Input) o;
    return Objects.equals(this.text, input.text) &&
        Objects.equals(this.characterOffset, input.characterOffset) &&
        Objects.equals(this.idType, input.idType) &&
        Objects.equals(this.filterTagsWithoutId, input.filterTagsWithoutId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, characterOffset, idType, filterTagsWithoutId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Input {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    characterOffset: ").append(toIndentedString(characterOffset)).append("\n");
    sb.append("    idType: ").append(toIndentedString(idType)).append("\n");
    sb.append("    filterTagsWithoutId: ").append(toIndentedString(filterTagsWithoutId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

