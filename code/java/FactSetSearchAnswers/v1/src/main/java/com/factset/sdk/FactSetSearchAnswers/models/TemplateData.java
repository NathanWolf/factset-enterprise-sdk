/*
 * FactSet Search Answers API
 * The FactSet Search Answers API provides answers to search queries, reflecting the data shown within FactSet Search Answers, and allowing you to easily add financial data to your widgets, lookups, bots, and assistants. The API understands a fixed amount of search terms and returns structured data from FactSetâ€™s many data sources. Possible answers include Price of a Company, Top 10 Year-to-Date Gainers, Revenue per Passenger Mile, and many more.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: FactSearch.Team@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetSearchAnswers.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetSearchAnswers.models.ApplicationLink;
import com.factset.sdk.FactSetSearchAnswers.models.ColoredValueLabelDateTemplate;
import com.factset.sdk.FactSetSearchAnswers.models.DataPair;
import com.factset.sdk.FactSetSearchAnswers.models.Fdc3Context;
import com.factset.sdk.FactSetSearchAnswers.models.LabelValueChangeLabelValueChangeTemplate;
import com.factset.sdk.FactSetSearchAnswers.models.LinkTextBlockTemplate;
import com.factset.sdk.FactSetSearchAnswers.models.PercentChange;
import com.factset.sdk.FactSetSearchAnswers.models.PercentChangeLabelTemplate;
import com.factset.sdk.FactSetSearchAnswers.models.RankedTableTemplate;
import com.factset.sdk.FactSetSearchAnswers.models.Table;
import com.factset.sdk.FactSetSearchAnswers.models.TableTableTemplate;
import com.factset.sdk.FactSetSearchAnswers.models.TableTemplate;
import com.factset.sdk.FactSetSearchAnswers.models.TextBlockFootingTemplate;
import com.factset.sdk.FactSetSearchAnswers.models.TitledTextBlock;
import com.factset.sdk.FactSetSearchAnswers.models.ValueChange;
import com.factset.sdk.FactSetSearchAnswers.models.ValueChangeDateLabelTemplate;
import com.factset.sdk.FactSetSearchAnswers.models.ValueLabelDateDataPairListTemplate;
import com.factset.sdk.FactSetSearchAnswers.models.ValueLabelDateTemplate;
import com.factset.sdk.FactSetSearchAnswers.models.ValueLabelDateTextBlockTemplate;
import com.factset.sdk.FactSetSearchAnswers.models.ValueLabelTemplate;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetSearchAnswers.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.factset.sdk.FactSetSearchAnswers.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonDeserialize(using = TemplateData.TemplateDataDeserializer.class)
@JsonSerialize(using = TemplateData.TemplateDataSerializer.class)
public class TemplateData extends AbstractOpenApiSchema implements Serializable {
    private static final Logger log = Logger.getLogger(TemplateData.class.getName());

    public static class TemplateDataSerializer extends StdSerializer<TemplateData> {
        public TemplateDataSerializer(Class<TemplateData> t) {
            super(t);
        }

        public TemplateDataSerializer() {
            this(null);
        }

        @Override
        public void serialize(TemplateData value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class TemplateDataDeserializer extends StdDeserializer<TemplateData> {
        public TemplateDataDeserializer() {
            this(TemplateData.class);
        }

        public TemplateDataDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public TemplateData deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            TemplateData newTemplateData = new TemplateData();
            Map<String,Object> result2 = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String, Object>>() {});
            String discriminatorValue = (String)result2.get("template");
            switch (discriminatorValue) {
                case "ColoredValueLabelDateTemplate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ColoredValueLabelDateTemplate.class);
                    newTemplateData.setActualInstance(deserialized);
                    return newTemplateData;
                case "LabelValueChangeLabelValueChangeTemplate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(LabelValueChangeLabelValueChangeTemplate.class);
                    newTemplateData.setActualInstance(deserialized);
                    return newTemplateData;
                case "LinkTextBlockTemplate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(LinkTextBlockTemplate.class);
                    newTemplateData.setActualInstance(deserialized);
                    return newTemplateData;
                case "PercentChangeLabelTemplate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PercentChangeLabelTemplate.class);
                    newTemplateData.setActualInstance(deserialized);
                    return newTemplateData;
                case "RankedTableTemplate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(RankedTableTemplate.class);
                    newTemplateData.setActualInstance(deserialized);
                    return newTemplateData;
                case "TableTableTemplate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(TableTableTemplate.class);
                    newTemplateData.setActualInstance(deserialized);
                    return newTemplateData;
                case "TableTemplate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(TableTemplate.class);
                    newTemplateData.setActualInstance(deserialized);
                    return newTemplateData;
                case "TextBlockFootingTemplate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(TextBlockFootingTemplate.class);
                    newTemplateData.setActualInstance(deserialized);
                    return newTemplateData;
                case "ValueChangeDateLabelTemplate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ValueChangeDateLabelTemplate.class);
                    newTemplateData.setActualInstance(deserialized);
                    return newTemplateData;
                case "ValueLabelDateDataPairListTemplate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ValueLabelDateDataPairListTemplate.class);
                    newTemplateData.setActualInstance(deserialized);
                    return newTemplateData;
                case "ValueLabelDateTemplate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ValueLabelDateTemplate.class);
                    newTemplateData.setActualInstance(deserialized);
                    return newTemplateData;
                case "ValueLabelDateTextBlockTemplate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ValueLabelDateTextBlockTemplate.class);
                    newTemplateData.setActualInstance(deserialized);
                    return newTemplateData;
                case "ValueLabelTemplate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ValueLabelTemplate.class);
                    newTemplateData.setActualInstance(deserialized);
                    return newTemplateData;
                default:
                    log.log(Level.WARNING, String.format("Failed to lookup discriminator value `%s` for TemplateData. Possible values: ColoredValueLabelDateTemplate LabelValueChangeLabelValueChangeTemplate LinkTextBlockTemplate PercentChangeLabelTemplate RankedTableTemplate TableTableTemplate TableTemplate TextBlockFootingTemplate ValueChangeDateLabelTemplate ValueLabelDateDataPairListTemplate ValueLabelDateTemplate ValueLabelDateTextBlockTemplate ValueLabelTemplate", discriminatorValue));
            }

            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize ColoredValueLabelDateTemplate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ColoredValueLabelDateTemplate.class.equals(Integer.class) || ColoredValueLabelDateTemplate.class.equals(Long.class) || ColoredValueLabelDateTemplate.class.equals(Float.class) || ColoredValueLabelDateTemplate.class.equals(Double.class) || ColoredValueLabelDateTemplate.class.equals(Boolean.class) || ColoredValueLabelDateTemplate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ColoredValueLabelDateTemplate.class.equals(Integer.class) || ColoredValueLabelDateTemplate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ColoredValueLabelDateTemplate.class.equals(Float.class) || ColoredValueLabelDateTemplate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ColoredValueLabelDateTemplate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ColoredValueLabelDateTemplate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ColoredValueLabelDateTemplate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ColoredValueLabelDateTemplate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ColoredValueLabelDateTemplate'", e);
            }

            // deserialize LabelValueChangeLabelValueChangeTemplate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (LabelValueChangeLabelValueChangeTemplate.class.equals(Integer.class) || LabelValueChangeLabelValueChangeTemplate.class.equals(Long.class) || LabelValueChangeLabelValueChangeTemplate.class.equals(Float.class) || LabelValueChangeLabelValueChangeTemplate.class.equals(Double.class) || LabelValueChangeLabelValueChangeTemplate.class.equals(Boolean.class) || LabelValueChangeLabelValueChangeTemplate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((LabelValueChangeLabelValueChangeTemplate.class.equals(Integer.class) || LabelValueChangeLabelValueChangeTemplate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((LabelValueChangeLabelValueChangeTemplate.class.equals(Float.class) || LabelValueChangeLabelValueChangeTemplate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (LabelValueChangeLabelValueChangeTemplate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (LabelValueChangeLabelValueChangeTemplate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(LabelValueChangeLabelValueChangeTemplate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'LabelValueChangeLabelValueChangeTemplate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'LabelValueChangeLabelValueChangeTemplate'", e);
            }

            // deserialize LinkTextBlockTemplate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (LinkTextBlockTemplate.class.equals(Integer.class) || LinkTextBlockTemplate.class.equals(Long.class) || LinkTextBlockTemplate.class.equals(Float.class) || LinkTextBlockTemplate.class.equals(Double.class) || LinkTextBlockTemplate.class.equals(Boolean.class) || LinkTextBlockTemplate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((LinkTextBlockTemplate.class.equals(Integer.class) || LinkTextBlockTemplate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((LinkTextBlockTemplate.class.equals(Float.class) || LinkTextBlockTemplate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (LinkTextBlockTemplate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (LinkTextBlockTemplate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(LinkTextBlockTemplate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'LinkTextBlockTemplate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'LinkTextBlockTemplate'", e);
            }

            // deserialize PercentChangeLabelTemplate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PercentChangeLabelTemplate.class.equals(Integer.class) || PercentChangeLabelTemplate.class.equals(Long.class) || PercentChangeLabelTemplate.class.equals(Float.class) || PercentChangeLabelTemplate.class.equals(Double.class) || PercentChangeLabelTemplate.class.equals(Boolean.class) || PercentChangeLabelTemplate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PercentChangeLabelTemplate.class.equals(Integer.class) || PercentChangeLabelTemplate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PercentChangeLabelTemplate.class.equals(Float.class) || PercentChangeLabelTemplate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PercentChangeLabelTemplate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PercentChangeLabelTemplate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PercentChangeLabelTemplate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PercentChangeLabelTemplate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PercentChangeLabelTemplate'", e);
            }

            // deserialize RankedTableTemplate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (RankedTableTemplate.class.equals(Integer.class) || RankedTableTemplate.class.equals(Long.class) || RankedTableTemplate.class.equals(Float.class) || RankedTableTemplate.class.equals(Double.class) || RankedTableTemplate.class.equals(Boolean.class) || RankedTableTemplate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((RankedTableTemplate.class.equals(Integer.class) || RankedTableTemplate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((RankedTableTemplate.class.equals(Float.class) || RankedTableTemplate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (RankedTableTemplate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (RankedTableTemplate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(RankedTableTemplate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'RankedTableTemplate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'RankedTableTemplate'", e);
            }

            // deserialize TableTableTemplate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (TableTableTemplate.class.equals(Integer.class) || TableTableTemplate.class.equals(Long.class) || TableTableTemplate.class.equals(Float.class) || TableTableTemplate.class.equals(Double.class) || TableTableTemplate.class.equals(Boolean.class) || TableTableTemplate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((TableTableTemplate.class.equals(Integer.class) || TableTableTemplate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((TableTableTemplate.class.equals(Float.class) || TableTableTemplate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (TableTableTemplate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (TableTableTemplate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(TableTableTemplate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'TableTableTemplate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'TableTableTemplate'", e);
            }

            // deserialize TableTemplate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (TableTemplate.class.equals(Integer.class) || TableTemplate.class.equals(Long.class) || TableTemplate.class.equals(Float.class) || TableTemplate.class.equals(Double.class) || TableTemplate.class.equals(Boolean.class) || TableTemplate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((TableTemplate.class.equals(Integer.class) || TableTemplate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((TableTemplate.class.equals(Float.class) || TableTemplate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (TableTemplate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (TableTemplate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(TableTemplate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'TableTemplate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'TableTemplate'", e);
            }

            // deserialize TextBlockFootingTemplate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (TextBlockFootingTemplate.class.equals(Integer.class) || TextBlockFootingTemplate.class.equals(Long.class) || TextBlockFootingTemplate.class.equals(Float.class) || TextBlockFootingTemplate.class.equals(Double.class) || TextBlockFootingTemplate.class.equals(Boolean.class) || TextBlockFootingTemplate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((TextBlockFootingTemplate.class.equals(Integer.class) || TextBlockFootingTemplate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((TextBlockFootingTemplate.class.equals(Float.class) || TextBlockFootingTemplate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (TextBlockFootingTemplate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (TextBlockFootingTemplate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(TextBlockFootingTemplate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'TextBlockFootingTemplate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'TextBlockFootingTemplate'", e);
            }

            // deserialize ValueChangeDateLabelTemplate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ValueChangeDateLabelTemplate.class.equals(Integer.class) || ValueChangeDateLabelTemplate.class.equals(Long.class) || ValueChangeDateLabelTemplate.class.equals(Float.class) || ValueChangeDateLabelTemplate.class.equals(Double.class) || ValueChangeDateLabelTemplate.class.equals(Boolean.class) || ValueChangeDateLabelTemplate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ValueChangeDateLabelTemplate.class.equals(Integer.class) || ValueChangeDateLabelTemplate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ValueChangeDateLabelTemplate.class.equals(Float.class) || ValueChangeDateLabelTemplate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ValueChangeDateLabelTemplate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ValueChangeDateLabelTemplate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ValueChangeDateLabelTemplate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ValueChangeDateLabelTemplate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ValueChangeDateLabelTemplate'", e);
            }

            // deserialize ValueLabelDateDataPairListTemplate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ValueLabelDateDataPairListTemplate.class.equals(Integer.class) || ValueLabelDateDataPairListTemplate.class.equals(Long.class) || ValueLabelDateDataPairListTemplate.class.equals(Float.class) || ValueLabelDateDataPairListTemplate.class.equals(Double.class) || ValueLabelDateDataPairListTemplate.class.equals(Boolean.class) || ValueLabelDateDataPairListTemplate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ValueLabelDateDataPairListTemplate.class.equals(Integer.class) || ValueLabelDateDataPairListTemplate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ValueLabelDateDataPairListTemplate.class.equals(Float.class) || ValueLabelDateDataPairListTemplate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ValueLabelDateDataPairListTemplate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ValueLabelDateDataPairListTemplate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ValueLabelDateDataPairListTemplate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ValueLabelDateDataPairListTemplate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ValueLabelDateDataPairListTemplate'", e);
            }

            // deserialize ValueLabelDateTemplate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ValueLabelDateTemplate.class.equals(Integer.class) || ValueLabelDateTemplate.class.equals(Long.class) || ValueLabelDateTemplate.class.equals(Float.class) || ValueLabelDateTemplate.class.equals(Double.class) || ValueLabelDateTemplate.class.equals(Boolean.class) || ValueLabelDateTemplate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ValueLabelDateTemplate.class.equals(Integer.class) || ValueLabelDateTemplate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ValueLabelDateTemplate.class.equals(Float.class) || ValueLabelDateTemplate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ValueLabelDateTemplate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ValueLabelDateTemplate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ValueLabelDateTemplate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ValueLabelDateTemplate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ValueLabelDateTemplate'", e);
            }

            // deserialize ValueLabelDateTextBlockTemplate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ValueLabelDateTextBlockTemplate.class.equals(Integer.class) || ValueLabelDateTextBlockTemplate.class.equals(Long.class) || ValueLabelDateTextBlockTemplate.class.equals(Float.class) || ValueLabelDateTextBlockTemplate.class.equals(Double.class) || ValueLabelDateTextBlockTemplate.class.equals(Boolean.class) || ValueLabelDateTextBlockTemplate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ValueLabelDateTextBlockTemplate.class.equals(Integer.class) || ValueLabelDateTextBlockTemplate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ValueLabelDateTextBlockTemplate.class.equals(Float.class) || ValueLabelDateTextBlockTemplate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ValueLabelDateTextBlockTemplate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ValueLabelDateTextBlockTemplate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ValueLabelDateTextBlockTemplate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ValueLabelDateTextBlockTemplate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ValueLabelDateTextBlockTemplate'", e);
            }

            // deserialize ValueLabelTemplate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ValueLabelTemplate.class.equals(Integer.class) || ValueLabelTemplate.class.equals(Long.class) || ValueLabelTemplate.class.equals(Float.class) || ValueLabelTemplate.class.equals(Double.class) || ValueLabelTemplate.class.equals(Boolean.class) || ValueLabelTemplate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ValueLabelTemplate.class.equals(Integer.class) || ValueLabelTemplate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ValueLabelTemplate.class.equals(Float.class) || ValueLabelTemplate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ValueLabelTemplate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ValueLabelTemplate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ValueLabelTemplate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ValueLabelTemplate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ValueLabelTemplate'", e);
            }

            if (match == 1) {
                TemplateData ret = new TemplateData();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for TemplateData: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public TemplateData getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "TemplateData cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public TemplateData() {
        super("oneOf", Boolean.FALSE);
    }

    public TemplateData(ColoredValueLabelDateTemplate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TemplateData(LabelValueChangeLabelValueChangeTemplate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TemplateData(LinkTextBlockTemplate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TemplateData(PercentChangeLabelTemplate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TemplateData(RankedTableTemplate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TemplateData(TableTableTemplate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TemplateData(TableTemplate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TemplateData(TextBlockFootingTemplate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TemplateData(ValueChangeDateLabelTemplate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TemplateData(ValueLabelDateDataPairListTemplate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TemplateData(ValueLabelDateTemplate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TemplateData(ValueLabelDateTextBlockTemplate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TemplateData(ValueLabelTemplate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ColoredValueLabelDateTemplate", new GenericType<ColoredValueLabelDateTemplate>() {
        });
        schemas.put("LabelValueChangeLabelValueChangeTemplate", new GenericType<LabelValueChangeLabelValueChangeTemplate>() {
        });
        schemas.put("LinkTextBlockTemplate", new GenericType<LinkTextBlockTemplate>() {
        });
        schemas.put("PercentChangeLabelTemplate", new GenericType<PercentChangeLabelTemplate>() {
        });
        schemas.put("RankedTableTemplate", new GenericType<RankedTableTemplate>() {
        });
        schemas.put("TableTableTemplate", new GenericType<TableTableTemplate>() {
        });
        schemas.put("TableTemplate", new GenericType<TableTemplate>() {
        });
        schemas.put("TextBlockFootingTemplate", new GenericType<TextBlockFootingTemplate>() {
        });
        schemas.put("ValueChangeDateLabelTemplate", new GenericType<ValueChangeDateLabelTemplate>() {
        });
        schemas.put("ValueLabelDateDataPairListTemplate", new GenericType<ValueLabelDateDataPairListTemplate>() {
        });
        schemas.put("ValueLabelDateTemplate", new GenericType<ValueLabelDateTemplate>() {
        });
        schemas.put("ValueLabelDateTextBlockTemplate", new GenericType<ValueLabelDateTextBlockTemplate>() {
        });
        schemas.put("ValueLabelTemplate", new GenericType<ValueLabelTemplate>() {
        });
        JSON.registerDescendants(TemplateData.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("ColoredValueLabelDateTemplate", ColoredValueLabelDateTemplate.class);
        mappings.put("LabelValueChangeLabelValueChangeTemplate", LabelValueChangeLabelValueChangeTemplate.class);
        mappings.put("LinkTextBlockTemplate", LinkTextBlockTemplate.class);
        mappings.put("PercentChangeLabelTemplate", PercentChangeLabelTemplate.class);
        mappings.put("RankedTableTemplate", RankedTableTemplate.class);
        mappings.put("TableTableTemplate", TableTableTemplate.class);
        mappings.put("TableTemplate", TableTemplate.class);
        mappings.put("TextBlockFootingTemplate", TextBlockFootingTemplate.class);
        mappings.put("ValueChangeDateLabelTemplate", ValueChangeDateLabelTemplate.class);
        mappings.put("ValueLabelDateDataPairListTemplate", ValueLabelDateDataPairListTemplate.class);
        mappings.put("ValueLabelDateTemplate", ValueLabelDateTemplate.class);
        mappings.put("ValueLabelDateTextBlockTemplate", ValueLabelDateTextBlockTemplate.class);
        mappings.put("ValueLabelTemplate", ValueLabelTemplate.class);
        mappings.put("TemplateData", TemplateData.class);
        JSON.registerDiscriminator(TemplateData.class, "template", mappings);
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return TemplateData.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ColoredValueLabelDateTemplate, LabelValueChangeLabelValueChangeTemplate, LinkTextBlockTemplate, PercentChangeLabelTemplate, RankedTableTemplate, TableTableTemplate, TableTemplate, TextBlockFootingTemplate, ValueChangeDateLabelTemplate, ValueLabelDateDataPairListTemplate, ValueLabelDateTemplate, ValueLabelDateTextBlockTemplate, ValueLabelTemplate
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(ColoredValueLabelDateTemplate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(LabelValueChangeLabelValueChangeTemplate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(LinkTextBlockTemplate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PercentChangeLabelTemplate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(RankedTableTemplate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(TableTableTemplate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(TableTemplate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(TextBlockFootingTemplate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ValueChangeDateLabelTemplate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ValueLabelDateDataPairListTemplate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ValueLabelDateTemplate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ValueLabelDateTextBlockTemplate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ValueLabelTemplate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ColoredValueLabelDateTemplate, LabelValueChangeLabelValueChangeTemplate, LinkTextBlockTemplate, PercentChangeLabelTemplate, RankedTableTemplate, TableTableTemplate, TableTemplate, TextBlockFootingTemplate, ValueChangeDateLabelTemplate, ValueLabelDateDataPairListTemplate, ValueLabelDateTemplate, ValueLabelDateTextBlockTemplate, ValueLabelTemplate");
    }

    /**
     * Get the actual instance, which can be the following:
     * ColoredValueLabelDateTemplate, LabelValueChangeLabelValueChangeTemplate, LinkTextBlockTemplate, PercentChangeLabelTemplate, RankedTableTemplate, TableTableTemplate, TableTemplate, TextBlockFootingTemplate, ValueChangeDateLabelTemplate, ValueLabelDateDataPairListTemplate, ValueLabelDateTemplate, ValueLabelDateTextBlockTemplate, ValueLabelTemplate
     *
     * @return The actual instance (ColoredValueLabelDateTemplate, LabelValueChangeLabelValueChangeTemplate, LinkTextBlockTemplate, PercentChangeLabelTemplate, RankedTableTemplate, TableTableTemplate, TableTemplate, TextBlockFootingTemplate, ValueChangeDateLabelTemplate, ValueLabelDateDataPairListTemplate, ValueLabelDateTemplate, ValueLabelDateTextBlockTemplate, ValueLabelTemplate)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ColoredValueLabelDateTemplate`. If the actual instance is not `ColoredValueLabelDateTemplate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ColoredValueLabelDateTemplate`
     * @throws ClassCastException if the instance is not `ColoredValueLabelDateTemplate`
     */
    public ColoredValueLabelDateTemplate getColoredValueLabelDateTemplate() throws ClassCastException {
        return (ColoredValueLabelDateTemplate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LabelValueChangeLabelValueChangeTemplate`. If the actual instance is not `LabelValueChangeLabelValueChangeTemplate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LabelValueChangeLabelValueChangeTemplate`
     * @throws ClassCastException if the instance is not `LabelValueChangeLabelValueChangeTemplate`
     */
    public LabelValueChangeLabelValueChangeTemplate getLabelValueChangeLabelValueChangeTemplate() throws ClassCastException {
        return (LabelValueChangeLabelValueChangeTemplate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LinkTextBlockTemplate`. If the actual instance is not `LinkTextBlockTemplate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LinkTextBlockTemplate`
     * @throws ClassCastException if the instance is not `LinkTextBlockTemplate`
     */
    public LinkTextBlockTemplate getLinkTextBlockTemplate() throws ClassCastException {
        return (LinkTextBlockTemplate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PercentChangeLabelTemplate`. If the actual instance is not `PercentChangeLabelTemplate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PercentChangeLabelTemplate`
     * @throws ClassCastException if the instance is not `PercentChangeLabelTemplate`
     */
    public PercentChangeLabelTemplate getPercentChangeLabelTemplate() throws ClassCastException {
        return (PercentChangeLabelTemplate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RankedTableTemplate`. If the actual instance is not `RankedTableTemplate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RankedTableTemplate`
     * @throws ClassCastException if the instance is not `RankedTableTemplate`
     */
    public RankedTableTemplate getRankedTableTemplate() throws ClassCastException {
        return (RankedTableTemplate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TableTableTemplate`. If the actual instance is not `TableTableTemplate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TableTableTemplate`
     * @throws ClassCastException if the instance is not `TableTableTemplate`
     */
    public TableTableTemplate getTableTableTemplate() throws ClassCastException {
        return (TableTableTemplate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TableTemplate`. If the actual instance is not `TableTemplate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TableTemplate`
     * @throws ClassCastException if the instance is not `TableTemplate`
     */
    public TableTemplate getTableTemplate() throws ClassCastException {
        return (TableTemplate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TextBlockFootingTemplate`. If the actual instance is not `TextBlockFootingTemplate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TextBlockFootingTemplate`
     * @throws ClassCastException if the instance is not `TextBlockFootingTemplate`
     */
    public TextBlockFootingTemplate getTextBlockFootingTemplate() throws ClassCastException {
        return (TextBlockFootingTemplate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ValueChangeDateLabelTemplate`. If the actual instance is not `ValueChangeDateLabelTemplate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ValueChangeDateLabelTemplate`
     * @throws ClassCastException if the instance is not `ValueChangeDateLabelTemplate`
     */
    public ValueChangeDateLabelTemplate getValueChangeDateLabelTemplate() throws ClassCastException {
        return (ValueChangeDateLabelTemplate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ValueLabelDateDataPairListTemplate`. If the actual instance is not `ValueLabelDateDataPairListTemplate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ValueLabelDateDataPairListTemplate`
     * @throws ClassCastException if the instance is not `ValueLabelDateDataPairListTemplate`
     */
    public ValueLabelDateDataPairListTemplate getValueLabelDateDataPairListTemplate() throws ClassCastException {
        return (ValueLabelDateDataPairListTemplate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ValueLabelDateTemplate`. If the actual instance is not `ValueLabelDateTemplate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ValueLabelDateTemplate`
     * @throws ClassCastException if the instance is not `ValueLabelDateTemplate`
     */
    public ValueLabelDateTemplate getValueLabelDateTemplate() throws ClassCastException {
        return (ValueLabelDateTemplate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ValueLabelDateTextBlockTemplate`. If the actual instance is not `ValueLabelDateTextBlockTemplate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ValueLabelDateTextBlockTemplate`
     * @throws ClassCastException if the instance is not `ValueLabelDateTextBlockTemplate`
     */
    public ValueLabelDateTextBlockTemplate getValueLabelDateTextBlockTemplate() throws ClassCastException {
        return (ValueLabelDateTextBlockTemplate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ValueLabelTemplate`. If the actual instance is not `ValueLabelTemplate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ValueLabelTemplate`
     * @throws ClassCastException if the instance is not `ValueLabelTemplate`
     */
    public ValueLabelTemplate getValueLabelTemplate() throws ClassCastException {
        return (ValueLabelTemplate)super.getActualInstance();
    }

}

