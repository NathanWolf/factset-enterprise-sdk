/*
 * FactSet Concordance API
 * The FactSet Concordance API provides the ability to programmatically look up several types of entities by their name and other attributes. It attempts to match attributes that you supply for the entity and returns as many match candidates as it can find. The result is a \"concorded\" FactSet Entity Permanent identifier.  The Entity Identifier can then be used as input throughout FactSet's Content soultions, such as Content APIs and Standard DataFeeds.<p> There are types of workflows supported in the API. The first workflow type follows traditional API conventions in that a request is accepted and a response is returned synchronously. The second workflow type involves a background task. With this workflow, a task is created for uploading a set of queries, and then the client polls for the task to complete. Once the task has completed, the client retrieves the concordance results throught the decisions endpoint.</p> 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetConcordance.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetConcordance.models.EntityMapping;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetConcordance.JSON;


/**
 * Universe Statistics and array of &#x60;Entity Mapping&#x60; objects. Universes are defined by the users FactSet USERNAME only, and not USERNAME-SERIAL.
 */
@ApiModel(description = "Universe Statistics and array of `Entity Mapping` objects. Universes are defined by the users FactSet USERNAME only, and not USERNAME-SERIAL.")
@JsonPropertyOrder({
  EntityUniverse.JSON_PROPERTY_TOTAL_COUNT,
  EntityUniverse.JSON_PROPERTY_MAPPED_COUNT,
  EntityUniverse.JSON_PROPERTY_INDETERMINATE_COUNT,
  EntityUniverse.JSON_PROPERTY_UNMAPPED_COUNT,
  EntityUniverse.JSON_PROPERTY_ENTITIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EntityUniverse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TOTAL_COUNT = "totalCount";
  private Integer totalCount;

  public static final String JSON_PROPERTY_MAPPED_COUNT = "mappedCount";
  private Integer mappedCount;

  public static final String JSON_PROPERTY_INDETERMINATE_COUNT = "indeterminateCount";
  private Integer indeterminateCount;

  public static final String JSON_PROPERTY_UNMAPPED_COUNT = "unmappedCount";
  private Integer unmappedCount;

  public static final String JSON_PROPERTY_ENTITIES = "entities";
  private java.util.List<EntityMapping> entities = null;


  public EntityUniverse totalCount(Integer totalCount) {
    this.totalCount = totalCount;
    return this;
  }

   /**
   * Total number of entities in the universe
   * @return totalCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "34", value = "Total number of entities in the universe")
  @JsonProperty(JSON_PROPERTY_TOTAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalCount() {
    return totalCount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }


  public EntityUniverse mappedCount(Integer mappedCount) {
    this.mappedCount = mappedCount;
    return this;
  }

   /**
   * Number of MAPPED entities in the universe
   * @return mappedCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "13", value = "Number of MAPPED entities in the universe")
  @JsonProperty(JSON_PROPERTY_MAPPED_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMappedCount() {
    return mappedCount;
  }


  @JsonProperty(JSON_PROPERTY_MAPPED_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMappedCount(Integer mappedCount) {
    this.mappedCount = mappedCount;
  }


  public EntityUniverse indeterminateCount(Integer indeterminateCount) {
    this.indeterminateCount = indeterminateCount;
    return this;
  }

   /**
   * Number of INDETERMINATE entities in the universe
   * @return indeterminateCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6", value = "Number of INDETERMINATE entities in the universe")
  @JsonProperty(JSON_PROPERTY_INDETERMINATE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getIndeterminateCount() {
    return indeterminateCount;
  }


  @JsonProperty(JSON_PROPERTY_INDETERMINATE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndeterminateCount(Integer indeterminateCount) {
    this.indeterminateCount = indeterminateCount;
  }


  public EntityUniverse unmappedCount(Integer unmappedCount) {
    this.unmappedCount = unmappedCount;
    return this;
  }

   /**
   * Number of UNMAPPED entities in the universe
   * @return unmappedCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "21", value = "Number of UNMAPPED entities in the universe")
  @JsonProperty(JSON_PROPERTY_UNMAPPED_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUnmappedCount() {
    return unmappedCount;
  }


  @JsonProperty(JSON_PROPERTY_UNMAPPED_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnmappedCount(Integer unmappedCount) {
    this.unmappedCount = unmappedCount;
  }


  public EntityUniverse entities(java.util.List<EntityMapping> entities) {
    this.entities = entities;
    return this;
  }

  public EntityUniverse addEntitiesItem(EntityMapping entitiesItem) {
    if (this.entities == null) {
      this.entities = new java.util.ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

   /**
   * Get entities
   * @return entities
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<EntityMapping> getEntities() {
    return entities;
  }


  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntities(java.util.List<EntityMapping> entities) {
    this.entities = entities;
  }


  /**
   * Return true if this EntityUniverse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityUniverse entityUniverse = (EntityUniverse) o;
    return Objects.equals(this.totalCount, entityUniverse.totalCount) &&
        Objects.equals(this.mappedCount, entityUniverse.mappedCount) &&
        Objects.equals(this.indeterminateCount, entityUniverse.indeterminateCount) &&
        Objects.equals(this.unmappedCount, entityUniverse.unmappedCount) &&
        Objects.equals(this.entities, entityUniverse.entities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalCount, mappedCount, indeterminateCount, unmappedCount, entities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityUniverse {\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    mappedCount: ").append(toIndentedString(mappedCount)).append("\n");
    sb.append("    indeterminateCount: ").append(toIndentedString(indeterminateCount)).append("\n");
    sb.append("    unmappedCount: ").append(toIndentedString(unmappedCount)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

