/*
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.QuotesAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.QuotesAPIforDigitalPortals.models.NotationCrossReferenceListByInstrumentDataFilterMarkets;
import com.factset.sdk.QuotesAPIforDigitalPortals.models.NotationCrossReferenceListByInstrumentDataFilterValueUnits;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.QuotesAPIforDigitalPortals.JSON;


/**
 * Criteria that filter the items in the response list; only items that match all of the criteria are returned.
 */
@ApiModel(description = "Criteria that filter the items in the response list; only items that match all of the criteria are returned.")
@JsonPropertyOrder({
  NotationCrossReferenceListByInstrumentDataFilter.JSON_PROPERTY_MARKETS,
  NotationCrossReferenceListByInstrumentDataFilter.JSON_PROPERTY_VALUE_UNITS,
  NotationCrossReferenceListByInstrumentDataFilter.JSON_PROPERTY_ONLY_ACTIVE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NotationCrossReferenceListByInstrumentDataFilter implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_MARKETS = "markets";
  private NotationCrossReferenceListByInstrumentDataFilterMarkets markets;

  public static final String JSON_PROPERTY_VALUE_UNITS = "valueUnits";
  private NotationCrossReferenceListByInstrumentDataFilterValueUnits valueUnits;

  public static final String JSON_PROPERTY_ONLY_ACTIVE = "onlyActive";
  private Boolean onlyActive = false;

  public NotationCrossReferenceListByInstrumentDataFilter() { 
  }

  public NotationCrossReferenceListByInstrumentDataFilter markets(NotationCrossReferenceListByInstrumentDataFilterMarkets markets) {
    this.markets = markets;
    return this;
  }

   /**
   * Get markets
   * @return markets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MARKETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NotationCrossReferenceListByInstrumentDataFilterMarkets getMarkets() {
    return markets;
  }


  @JsonProperty(JSON_PROPERTY_MARKETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarkets(NotationCrossReferenceListByInstrumentDataFilterMarkets markets) {
    this.markets = markets;
  }


  public NotationCrossReferenceListByInstrumentDataFilter valueUnits(NotationCrossReferenceListByInstrumentDataFilterValueUnits valueUnits) {
    this.valueUnits = valueUnits;
    return this;
  }

   /**
   * Get valueUnits
   * @return valueUnits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VALUE_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NotationCrossReferenceListByInstrumentDataFilterValueUnits getValueUnits() {
    return valueUnits;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueUnits(NotationCrossReferenceListByInstrumentDataFilterValueUnits valueUnits) {
    this.valueUnits = valueUnits;
  }


  public NotationCrossReferenceListByInstrumentDataFilter onlyActive(Boolean onlyActive) {
    this.onlyActive = onlyActive;
    return this;
  }

   /**
   * If true, only active notations will be returned. The term \&quot;active\&quot; reflects the fact that notations and related data is not being deleted immediately after becoming irrelevant (e.g. because the source does not provide a price anymore), but remains in general retrievable for up to 6 months.
   * @return onlyActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, only active notations will be returned. The term \"active\" reflects the fact that notations and related data is not being deleted immediately after becoming irrelevant (e.g. because the source does not provide a price anymore), but remains in general retrievable for up to 6 months.")
  @JsonProperty(JSON_PROPERTY_ONLY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOnlyActive() {
    return onlyActive;
  }


  @JsonProperty(JSON_PROPERTY_ONLY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOnlyActive(Boolean onlyActive) {
    this.onlyActive = onlyActive;
  }


  /**
   * Return true if this _notation_crossReference_listByInstrument_data_filter object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotationCrossReferenceListByInstrumentDataFilter notationCrossReferenceListByInstrumentDataFilter = (NotationCrossReferenceListByInstrumentDataFilter) o;
    return Objects.equals(this.markets, notationCrossReferenceListByInstrumentDataFilter.markets) &&
        Objects.equals(this.valueUnits, notationCrossReferenceListByInstrumentDataFilter.valueUnits) &&
        Objects.equals(this.onlyActive, notationCrossReferenceListByInstrumentDataFilter.onlyActive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(markets, valueUnits, onlyActive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotationCrossReferenceListByInstrumentDataFilter {\n");
    sb.append("    markets: ").append(toIndentedString(markets)).append("\n");
    sb.append("    valueUnits: ").append(toIndentedString(valueUnits)).append("\n");
    sb.append("    onlyActive: ").append(toIndentedString(onlyActive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

