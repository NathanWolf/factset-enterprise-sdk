/*
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.QuotesAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.QuotesAPIforDigitalPortals.JSON;


/**
 * States the recommended holding period of the product.
 */
@ApiModel(description = "States the recommended holding period of the product.")
@JsonPropertyOrder({
  InlineResponse20062DataTargetMarketRecommendedHoldingPeriod.JSON_PROPERTY_HOLDING_PERIOD,
  InlineResponse20062DataTargetMarketRecommendedHoldingPeriod.JSON_PROPERTY_HOLDING_PERIOD_YEARS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse20062DataTargetMarketRecommendedHoldingPeriod implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets holdingPeriod
   */
  public enum HoldingPeriodEnum {
    VERYSHORT("veryShort"),
    
    SHORT("short"),
    
    MEDIUM("medium"),
    
    LONG("long"),
    
    NEUTRAL("neutral");

    private String value;

    HoldingPeriodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HoldingPeriodEnum fromValue(String value) {
      for (HoldingPeriodEnum b : HoldingPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HOLDING_PERIOD = "holdingPeriod";
  private java.util.List<HoldingPeriodEnum> holdingPeriod = null;

  public static final String JSON_PROPERTY_HOLDING_PERIOD_YEARS = "holdingPeriodYears";
  private BigDecimal holdingPeriodYears;


  public InlineResponse20062DataTargetMarketRecommendedHoldingPeriod holdingPeriod(java.util.List<HoldingPeriodEnum> holdingPeriod) {
    this.holdingPeriod = holdingPeriod;
    return this;
  }

  public InlineResponse20062DataTargetMarketRecommendedHoldingPeriod addHoldingPeriodItem(HoldingPeriodEnum holdingPeriodItem) {
    if (this.holdingPeriod == null) {
      this.holdingPeriod = new java.util.ArrayList<>();
    }
    this.holdingPeriod.add(holdingPeriodItem);
    return this;
  }

   /**
   * Indicates the recommended holding period (RHP) of the investment product whereby more than one RHP per product may exist.
   * @return holdingPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates the recommended holding period (RHP) of the investment product whereby more than one RHP per product may exist.")
  @JsonProperty(JSON_PROPERTY_HOLDING_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<HoldingPeriodEnum> getHoldingPeriod() {
    return holdingPeriod;
  }


  @JsonProperty(JSON_PROPERTY_HOLDING_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHoldingPeriod(java.util.List<HoldingPeriodEnum> holdingPeriod) {
    this.holdingPeriod = holdingPeriod;
  }


  public InlineResponse20062DataTargetMarketRecommendedHoldingPeriod holdingPeriodYears(BigDecimal holdingPeriodYears) {
    this.holdingPeriodYears = holdingPeriodYears;
    return this;
  }

   /**
   * Indicates the length of the recommended holding period (RHP) of the investment product in years, not available if the attribute &#x60;holdingPeriod&#x60; is set.
   * @return holdingPeriodYears
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates the length of the recommended holding period (RHP) of the investment product in years, not available if the attribute `holdingPeriod` is set.")
  @JsonProperty(JSON_PROPERTY_HOLDING_PERIOD_YEARS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getHoldingPeriodYears() {
    return holdingPeriodYears;
  }


  @JsonProperty(JSON_PROPERTY_HOLDING_PERIOD_YEARS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHoldingPeriodYears(BigDecimal holdingPeriodYears) {
    this.holdingPeriodYears = holdingPeriodYears;
  }


  /**
   * Return true if this inline_response_200_62_data_targetMarket_recommendedHoldingPeriod object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20062DataTargetMarketRecommendedHoldingPeriod inlineResponse20062DataTargetMarketRecommendedHoldingPeriod = (InlineResponse20062DataTargetMarketRecommendedHoldingPeriod) o;
    return Objects.equals(this.holdingPeriod, inlineResponse20062DataTargetMarketRecommendedHoldingPeriod.holdingPeriod) &&
        Objects.equals(this.holdingPeriodYears, inlineResponse20062DataTargetMarketRecommendedHoldingPeriod.holdingPeriodYears);
  }

  @Override
  public int hashCode() {
    return Objects.hash(holdingPeriod, holdingPeriodYears);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20062DataTargetMarketRecommendedHoldingPeriod {\n");
    sb.append("    holdingPeriod: ").append(toIndentedString(holdingPeriod)).append("\n");
    sb.append("    holdingPeriodYears: ").append(toIndentedString(holdingPeriodYears)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

