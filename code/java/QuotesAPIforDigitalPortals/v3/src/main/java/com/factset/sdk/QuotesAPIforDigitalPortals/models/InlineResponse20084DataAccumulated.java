/*
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.QuotesAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.QuotesAPIforDigitalPortals.JSON;


/**
 * Summary data accumulated over all trades of the most recent trading day.
 */
@ApiModel(description = "Summary data accumulated over all trades of the most recent trading day.")
@JsonPropertyOrder({
  InlineResponse20084DataAccumulated.JSON_PROPERTY_NUMBER_TRADES,
  InlineResponse20084DataAccumulated.JSON_PROPERTY_TRADING_VOLUME,
  InlineResponse20084DataAccumulated.JSON_PROPERTY_TRADING_VALUE,
  InlineResponse20084DataAccumulated.JSON_PROPERTY_VOLUME_WEIGHTED_AVERAGE_PRICE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse20084DataAccumulated implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_NUMBER_TRADES = "numberTrades";
  private JsonNullable<BigDecimal> numberTrades = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_TRADING_VOLUME = "tradingVolume";
  private JsonNullable<BigDecimal> tradingVolume = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_TRADING_VALUE = "tradingValue";
  private JsonNullable<BigDecimal> tradingValue = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_VOLUME_WEIGHTED_AVERAGE_PRICE = "volumeWeightedAveragePrice";
  private JsonNullable<BigDecimal> volumeWeightedAveragePrice = JsonNullable.<BigDecimal>undefined();

  public InlineResponse20084DataAccumulated() { 
  }

  public InlineResponse20084DataAccumulated numberTrades(BigDecimal numberTrades) {
    this.numberTrades = JsonNullable.<BigDecimal>of(numberTrades);
    return this;
  }

   /**
   * Number of trades.
   * @return numberTrades
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of trades.")
  @JsonIgnore

  public BigDecimal getNumberTrades() {
        return numberTrades.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NUMBER_TRADES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getNumberTrades_JsonNullable() {
    return numberTrades;
  }
  
  @JsonProperty(JSON_PROPERTY_NUMBER_TRADES)
  public void setNumberTrades_JsonNullable(JsonNullable<BigDecimal> numberTrades) {
    this.numberTrades = numberTrades;
  }

  public void setNumberTrades(BigDecimal numberTrades) {
    this.numberTrades = JsonNullable.<BigDecimal>of(numberTrades);
  }


  public InlineResponse20084DataAccumulated tradingVolume(BigDecimal tradingVolume) {
    this.tradingVolume = JsonNullable.<BigDecimal>of(tradingVolume);
    return this;
  }

   /**
   * Number of units (e.g. shares) traded.
   * @return tradingVolume
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of units (e.g. shares) traded.")
  @JsonIgnore

  public BigDecimal getTradingVolume() {
        return tradingVolume.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRADING_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTradingVolume_JsonNullable() {
    return tradingVolume;
  }
  
  @JsonProperty(JSON_PROPERTY_TRADING_VOLUME)
  public void setTradingVolume_JsonNullable(JsonNullable<BigDecimal> tradingVolume) {
    this.tradingVolume = tradingVolume;
  }

  public void setTradingVolume(BigDecimal tradingVolume) {
    this.tradingVolume = JsonNullable.<BigDecimal>of(tradingVolume);
  }


  public InlineResponse20084DataAccumulated tradingValue(BigDecimal tradingValue) {
    this.tradingValue = JsonNullable.<BigDecimal>of(tradingValue);
    return this;
  }

   /**
   * Monetary equivalent (cash value) of the trades. See attribute &#x60;currency&#x60; for its unit.
   * @return tradingValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Monetary equivalent (cash value) of the trades. See attribute `currency` for its unit.")
  @JsonIgnore

  public BigDecimal getTradingValue() {
        return tradingValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRADING_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTradingValue_JsonNullable() {
    return tradingValue;
  }
  
  @JsonProperty(JSON_PROPERTY_TRADING_VALUE)
  public void setTradingValue_JsonNullable(JsonNullable<BigDecimal> tradingValue) {
    this.tradingValue = tradingValue;
  }

  public void setTradingValue(BigDecimal tradingValue) {
    this.tradingValue = JsonNullable.<BigDecimal>of(tradingValue);
  }


  public InlineResponse20084DataAccumulated volumeWeightedAveragePrice(BigDecimal volumeWeightedAveragePrice) {
    this.volumeWeightedAveragePrice = JsonNullable.<BigDecimal>of(volumeWeightedAveragePrice);
    return this;
  }

   /**
   * The volume-weighted average price (VWAP). See attribute &#x60;valueUnit&#x60; for its unit.
   * @return volumeWeightedAveragePrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The volume-weighted average price (VWAP). See attribute `valueUnit` for its unit.")
  @JsonIgnore

  public BigDecimal getVolumeWeightedAveragePrice() {
        return volumeWeightedAveragePrice.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VOLUME_WEIGHTED_AVERAGE_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getVolumeWeightedAveragePrice_JsonNullable() {
    return volumeWeightedAveragePrice;
  }
  
  @JsonProperty(JSON_PROPERTY_VOLUME_WEIGHTED_AVERAGE_PRICE)
  public void setVolumeWeightedAveragePrice_JsonNullable(JsonNullable<BigDecimal> volumeWeightedAveragePrice) {
    this.volumeWeightedAveragePrice = volumeWeightedAveragePrice;
  }

  public void setVolumeWeightedAveragePrice(BigDecimal volumeWeightedAveragePrice) {
    this.volumeWeightedAveragePrice = JsonNullable.<BigDecimal>of(volumeWeightedAveragePrice);
  }


  /**
   * Return true if this inline_response_200_84_data_accumulated object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20084DataAccumulated inlineResponse20084DataAccumulated = (InlineResponse20084DataAccumulated) o;
    return equalsNullable(this.numberTrades, inlineResponse20084DataAccumulated.numberTrades) &&
        equalsNullable(this.tradingVolume, inlineResponse20084DataAccumulated.tradingVolume) &&
        equalsNullable(this.tradingValue, inlineResponse20084DataAccumulated.tradingValue) &&
        equalsNullable(this.volumeWeightedAveragePrice, inlineResponse20084DataAccumulated.volumeWeightedAveragePrice);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(numberTrades), hashCodeNullable(tradingVolume), hashCodeNullable(tradingValue), hashCodeNullable(volumeWeightedAveragePrice));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20084DataAccumulated {\n");
    sb.append("    numberTrades: ").append(toIndentedString(numberTrades)).append("\n");
    sb.append("    tradingVolume: ").append(toIndentedString(tradingVolume)).append("\n");
    sb.append("    tradingValue: ").append(toIndentedString(tradingValue)).append("\n");
    sb.append("    volumeWeightedAveragePrice: ").append(toIndentedString(volumeWeightedAveragePrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

