/*
 * Quotes API For Digital Portals
 * The quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the Time Series API for Digital Portals for direct access to price histories, and the News API for Digital Portals for searching and fetching related news.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.QuotesAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.QuotesAPIforDigitalPortals.models.InlineResponse20028DataMainCurrency;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.QuotesAPIforDigitalPortals.JSON;


/**
 * Details of a fractional currency.
 */
@ApiModel(description = "Details of a fractional currency.")
@JsonPropertyOrder({
  InlineResponse20028Data.JSON_PROPERTY_CODE,
  InlineResponse20028Data.JSON_PROPERTY_NAME,
  InlineResponse20028Data.JSON_PROPERTY_FACTOR,
  InlineResponse20028Data.JSON_PROPERTY_MAIN_CURRENCY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse20028Data implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_FACTOR = "factor";
  private BigDecimal factor;

  public static final String JSON_PROPERTY_MAIN_CURRENCY = "mainCurrency";
  private InlineResponse20028DataMainCurrency mainCurrency;

  public InlineResponse20028Data() { 
  }

  public InlineResponse20028Data code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Code of the fractional currency such as GBp (for British pence), USc (for U.S. cents), EUc for (Euro cent).
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Code of the fractional currency such as GBp (for British pence), USc (for U.S. cents), EUc for (Euro cent).")
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(String code) {
    this.code = code;
  }


  public InlineResponse20028Data name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the fractional currency.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the fractional currency.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public InlineResponse20028Data factor(BigDecimal factor) {
    this.factor = factor;
    return this;
  }

   /**
   * Conversion factor between the fractional and its main currency. For example, the value 100 indicates that 100 US cents are equivalent to one US dollar.
   * @return factor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Conversion factor between the fractional and its main currency. For example, the value 100 indicates that 100 US cents are equivalent to one US dollar.")
  @JsonProperty(JSON_PROPERTY_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getFactor() {
    return factor;
  }


  @JsonProperty(JSON_PROPERTY_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFactor(BigDecimal factor) {
    this.factor = factor;
  }


  public InlineResponse20028Data mainCurrency(InlineResponse20028DataMainCurrency mainCurrency) {
    this.mainCurrency = mainCurrency;
    return this;
  }

   /**
   * Get mainCurrency
   * @return mainCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MAIN_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20028DataMainCurrency getMainCurrency() {
    return mainCurrency;
  }


  @JsonProperty(JSON_PROPERTY_MAIN_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMainCurrency(InlineResponse20028DataMainCurrency mainCurrency) {
    this.mainCurrency = mainCurrency;
  }


  /**
   * Return true if this inline_response_200_28_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20028Data inlineResponse20028Data = (InlineResponse20028Data) o;
    return Objects.equals(this.code, inlineResponse20028Data.code) &&
        Objects.equals(this.name, inlineResponse20028Data.name) &&
        Objects.equals(this.factor, inlineResponse20028Data.factor) &&
        Objects.equals(this.mainCurrency, inlineResponse20028Data.mainCurrency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, name, factor, mainCurrency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20028Data {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    factor: ").append(toIndentedString(factor)).append("\n");
    sb.append("    mainCurrency: ").append(toIndentedString(mainCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

