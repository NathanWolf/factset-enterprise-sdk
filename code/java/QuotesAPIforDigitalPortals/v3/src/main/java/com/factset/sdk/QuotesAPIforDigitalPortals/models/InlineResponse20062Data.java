/*
 * Quotes API For Digital Portals
 * The quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the Time Series API for Digital Portals for direct access to price histories, and the News API for Digital Portals for searching and fetching related news.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.QuotesAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.QuotesAPIforDigitalPortals.models.InlineResponse20062DataCostsAndCharges;
import com.factset.sdk.QuotesAPIforDigitalPortals.models.InlineResponse20062DataDistributionChannel;
import com.factset.sdk.QuotesAPIforDigitalPortals.models.InlineResponse20062DataGeneral;
import com.factset.sdk.QuotesAPIforDigitalPortals.models.InlineResponse20062DataTargetMarket;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.QuotesAPIforDigitalPortals.JSON;


/**
 * MiFID II data.
 */
@ApiModel(description = "MiFID II data.")
@JsonPropertyOrder({
  InlineResponse20062Data.JSON_PROPERTY_GENERAL,
  InlineResponse20062Data.JSON_PROPERTY_TARGET_MARKET,
  InlineResponse20062Data.JSON_PROPERTY_DISTRIBUTION_CHANNEL,
  InlineResponse20062Data.JSON_PROPERTY_COSTS_AND_CHARGES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse20062Data implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_GENERAL = "general";
  private InlineResponse20062DataGeneral general;

  public static final String JSON_PROPERTY_TARGET_MARKET = "targetMarket";
  private InlineResponse20062DataTargetMarket targetMarket;

  public static final String JSON_PROPERTY_DISTRIBUTION_CHANNEL = "distributionChannel";
  private InlineResponse20062DataDistributionChannel distributionChannel;

  public static final String JSON_PROPERTY_COSTS_AND_CHARGES = "costsAndCharges";
  private InlineResponse20062DataCostsAndCharges costsAndCharges;

  public InlineResponse20062Data() { 
  }

  public InlineResponse20062Data general(InlineResponse20062DataGeneral general) {
    this.general = general;
    return this;
  }

   /**
   * Get general
   * @return general
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_GENERAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20062DataGeneral getGeneral() {
    return general;
  }


  @JsonProperty(JSON_PROPERTY_GENERAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGeneral(InlineResponse20062DataGeneral general) {
    this.general = general;
  }


  public InlineResponse20062Data targetMarket(InlineResponse20062DataTargetMarket targetMarket) {
    this.targetMarket = targetMarket;
    return this;
  }

   /**
   * Get targetMarket
   * @return targetMarket
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TARGET_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20062DataTargetMarket getTargetMarket() {
    return targetMarket;
  }


  @JsonProperty(JSON_PROPERTY_TARGET_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetMarket(InlineResponse20062DataTargetMarket targetMarket) {
    this.targetMarket = targetMarket;
  }


  public InlineResponse20062Data distributionChannel(InlineResponse20062DataDistributionChannel distributionChannel) {
    this.distributionChannel = distributionChannel;
    return this;
  }

   /**
   * Get distributionChannel
   * @return distributionChannel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DISTRIBUTION_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20062DataDistributionChannel getDistributionChannel() {
    return distributionChannel;
  }


  @JsonProperty(JSON_PROPERTY_DISTRIBUTION_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistributionChannel(InlineResponse20062DataDistributionChannel distributionChannel) {
    this.distributionChannel = distributionChannel;
  }


  public InlineResponse20062Data costsAndCharges(InlineResponse20062DataCostsAndCharges costsAndCharges) {
    this.costsAndCharges = costsAndCharges;
    return this;
  }

   /**
   * Get costsAndCharges
   * @return costsAndCharges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COSTS_AND_CHARGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20062DataCostsAndCharges getCostsAndCharges() {
    return costsAndCharges;
  }


  @JsonProperty(JSON_PROPERTY_COSTS_AND_CHARGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCostsAndCharges(InlineResponse20062DataCostsAndCharges costsAndCharges) {
    this.costsAndCharges = costsAndCharges;
  }


  /**
   * Return true if this inline_response_200_62_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20062Data inlineResponse20062Data = (InlineResponse20062Data) o;
    return Objects.equals(this.general, inlineResponse20062Data.general) &&
        Objects.equals(this.targetMarket, inlineResponse20062Data.targetMarket) &&
        Objects.equals(this.distributionChannel, inlineResponse20062Data.distributionChannel) &&
        Objects.equals(this.costsAndCharges, inlineResponse20062Data.costsAndCharges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(general, targetMarket, distributionChannel, costsAndCharges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20062Data {\n");
    sb.append("    general: ").append(toIndentedString(general)).append("\n");
    sb.append("    targetMarket: ").append(toIndentedString(targetMarket)).append("\n");
    sb.append("    distributionChannel: ").append(toIndentedString(distributionChannel)).append("\n");
    sb.append("    costsAndCharges: ").append(toIndentedString(costsAndCharges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

