/*
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.QuotesAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.QuotesAPIforDigitalPortals.JSON;


/**
 * Performance values.
 */
@ApiModel(description = "Performance values.")
@JsonPropertyOrder({
  InlineResponse20075DataPerformance.JSON_PROPERTY_ABSOLUTE,
  InlineResponse20075DataPerformance.JSON_PROPERTY_RELATIVE,
  InlineResponse20075DataPerformance.JSON_PROPERTY_REFERENCE_PRICE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse20075DataPerformance implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ABSOLUTE = "absolute";
  private JsonNullable<BigDecimal> absolute = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_RELATIVE = "relative";
  private JsonNullable<BigDecimal> relative = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_REFERENCE_PRICE = "referencePrice";
  private JsonNullable<BigDecimal> referencePrice = JsonNullable.<BigDecimal>undefined();

  public InlineResponse20075DataPerformance() { 
  }

  public InlineResponse20075DataPerformance absolute(BigDecimal absolute) {
    this.absolute = JsonNullable.<BigDecimal>of(absolute);
    return this;
  }

   /**
   * Absolute difference of a notation&#39;s most recent EOD closing price against the EOD closing price on the reference date.
   * @return absolute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Absolute difference of a notation's most recent EOD closing price against the EOD closing price on the reference date.")
  @JsonIgnore

  public BigDecimal getAbsolute() {
        return absolute.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ABSOLUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getAbsolute_JsonNullable() {
    return absolute;
  }
  
  @JsonProperty(JSON_PROPERTY_ABSOLUTE)
  public void setAbsolute_JsonNullable(JsonNullable<BigDecimal> absolute) {
    this.absolute = absolute;
  }

  public void setAbsolute(BigDecimal absolute) {
    this.absolute = JsonNullable.<BigDecimal>of(absolute);
  }


  public InlineResponse20075DataPerformance relative(BigDecimal relative) {
    this.relative = JsonNullable.<BigDecimal>of(relative);
    return this;
  }

   /**
   * Difference of a notation&#39;s most recent EOD closing price against the EOD closing price on the reference date, relative to the EOD closing price on the reference date.
   * @return relative
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Difference of a notation's most recent EOD closing price against the EOD closing price on the reference date, relative to the EOD closing price on the reference date.")
  @JsonIgnore

  public BigDecimal getRelative() {
        return relative.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RELATIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getRelative_JsonNullable() {
    return relative;
  }
  
  @JsonProperty(JSON_PROPERTY_RELATIVE)
  public void setRelative_JsonNullable(JsonNullable<BigDecimal> relative) {
    this.relative = relative;
  }

  public void setRelative(BigDecimal relative) {
    this.relative = JsonNullable.<BigDecimal>of(relative);
  }


  public InlineResponse20075DataPerformance referencePrice(BigDecimal referencePrice) {
    this.referencePrice = JsonNullable.<BigDecimal>of(referencePrice);
    return this;
  }

   /**
   * EOD closing price as of the reference date (see attribute &#x60;referenceDate&#x60;) used for calculation.
   * @return referencePrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "EOD closing price as of the reference date (see attribute `referenceDate`) used for calculation.")
  @JsonIgnore

  public BigDecimal getReferencePrice() {
        return referencePrice.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REFERENCE_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getReferencePrice_JsonNullable() {
    return referencePrice;
  }
  
  @JsonProperty(JSON_PROPERTY_REFERENCE_PRICE)
  public void setReferencePrice_JsonNullable(JsonNullable<BigDecimal> referencePrice) {
    this.referencePrice = referencePrice;
  }

  public void setReferencePrice(BigDecimal referencePrice) {
    this.referencePrice = JsonNullable.<BigDecimal>of(referencePrice);
  }


  /**
   * Return true if this inline_response_200_75_data_performance object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20075DataPerformance inlineResponse20075DataPerformance = (InlineResponse20075DataPerformance) o;
    return equalsNullable(this.absolute, inlineResponse20075DataPerformance.absolute) &&
        equalsNullable(this.relative, inlineResponse20075DataPerformance.relative) &&
        equalsNullable(this.referencePrice, inlineResponse20075DataPerformance.referencePrice);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(absolute), hashCodeNullable(relative), hashCodeNullable(referencePrice));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20075DataPerformance {\n");
    sb.append("    absolute: ").append(toIndentedString(absolute)).append("\n");
    sb.append("    relative: ").append(toIndentedString(relative)).append("\n");
    sb.append("    referencePrice: ").append(toIndentedString(referencePrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

