/*
 * ID Lookup API
 * The Factset Identifier Lookup API provides the ability to search for various identifier types based on keyword. The API returns tickers, entity names and other identifiers that Factset supports. In addition, the API offers filters that allows users to refine the results. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.IDLookup.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.IDLookup.models.IncludeExcludeObject;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.IDLookup.JSON;


/**
 * The filters parameter (if used) must contain one or both of theinlcude and exclude filters 
 */
@ApiModel(description = "The filters parameter (if used) must contain one or both of theinlcude and exclude filters ")
@JsonPropertyOrder({
  FilterParams.JSON_PROPERTY_INCLUDE,
  FilterParams.JSON_PROPERTY_EXCLUDE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FilterParams implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_INCLUDE = "include";
  private java.util.List<IncludeExcludeObject> include = null;

  public static final String JSON_PROPERTY_EXCLUDE = "exclude";
  private java.util.List<IncludeExcludeObject> exclude = null;

  public FilterParams() { 
  }

  public FilterParams include(java.util.List<IncludeExcludeObject> include) {
    this.include = include;
    return this;
  }

  public FilterParams addIncludeItem(IncludeExcludeObject includeItem) {
    if (this.include == null) {
      this.include = new java.util.ArrayList<>();
    }
    this.include.add(includeItem);
    return this;
  }

   /**
   * This parameter filter objects to be included in the results
   * @return include
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "This parameter filter objects to be included in the results")
  @JsonProperty(JSON_PROPERTY_INCLUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<IncludeExcludeObject> getInclude() {
    return include;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInclude(java.util.List<IncludeExcludeObject> include) {
    this.include = include;
  }


  public FilterParams exclude(java.util.List<IncludeExcludeObject> exclude) {
    this.exclude = exclude;
    return this;
  }

  public FilterParams addExcludeItem(IncludeExcludeObject excludeItem) {
    if (this.exclude == null) {
      this.exclude = new java.util.ArrayList<>();
    }
    this.exclude.add(excludeItem);
    return this;
  }

   /**
   * This parameter filter objects to be excluded from the results
   * @return exclude
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "[]", value = "This parameter filter objects to be excluded from the results")
  @JsonProperty(JSON_PROPERTY_EXCLUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<IncludeExcludeObject> getExclude() {
    return exclude;
  }


  @JsonProperty(JSON_PROPERTY_EXCLUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExclude(java.util.List<IncludeExcludeObject> exclude) {
    this.exclude = exclude;
  }


  /**
   * Return true if this filter_params object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterParams filterParams = (FilterParams) o;
    return Objects.equals(this.include, filterParams.include) &&
        Objects.equals(this.exclude, filterParams.exclude);
  }

  @Override
  public int hashCode() {
    return Objects.hash(include, exclude);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterParams {\n");
    sb.append("    include: ").append(toIndentedString(include)).append("\n");
    sb.append("    exclude: ").append(toIndentedString(exclude)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

