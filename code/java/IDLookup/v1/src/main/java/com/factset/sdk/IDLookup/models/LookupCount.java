/*
 * ID Lookup API
 * The Factset Identifier Lookup API provides the ability to search for various identifier types based on keyword. The API returns tickers, entity names and other identifiers that Factset supports. In addition, the API offers filters that allows users to refine the results. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.IDLookup.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.IDLookup.models.LookupAssettype;
import com.factset.sdk.IDLookup.models.ResponseDetails;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.IDLookup.JSON;


/**
 * Returns the count of on entities
 */
@ApiModel(description = "Returns the count of on entities")
@JsonPropertyOrder({
  LookupCount.JSON_PROPERTY_RESULT_COUNT,
  LookupCount.JSON_PROPERTY_ERROR,
  LookupCount.JSON_PROPERTY_IS_SUCCESS,
  LookupCount.JSON_PROPERTY_RESULTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class LookupCount implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_RESULT_COUNT = "result_count";
  private LookupAssettype resultCount;

  public static final String JSON_PROPERTY_ERROR = "error";
  private String error;

  public static final String JSON_PROPERTY_IS_SUCCESS = "is_success";
  private Integer isSuccess;

  public static final String JSON_PROPERTY_RESULTS = "results";
  private java.util.List<ResponseDetails> results = null;

  public LookupCount() { 
  }

  public LookupCount resultCount(LookupAssettype resultCount) {
    this.resultCount = resultCount;
    return this;
  }

   /**
   * Get resultCount
   * @return resultCount
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RESULT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LookupAssettype getResultCount() {
    return resultCount;
  }


  @JsonProperty(JSON_PROPERTY_RESULT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResultCount(LookupAssettype resultCount) {
    this.resultCount = resultCount;
  }


  public LookupCount error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getError() {
    return error;
  }


  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setError(String error) {
    this.error = error;
  }


  public LookupCount isSuccess(Integer isSuccess) {
    this.isSuccess = isSuccess;
    return this;
  }

   /**
   * Get isSuccess
   * @return isSuccess
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")
  @JsonProperty(JSON_PROPERTY_IS_SUCCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getIsSuccess() {
    return isSuccess;
  }


  @JsonProperty(JSON_PROPERTY_IS_SUCCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsSuccess(Integer isSuccess) {
    this.isSuccess = isSuccess;
  }


  public LookupCount results(java.util.List<ResponseDetails> results) {
    this.results = results;
    return this;
  }

  public LookupCount addResultsItem(ResponseDetails resultsItem) {
    if (this.results == null) {
      this.results = new java.util.ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

   /**
   * Array of Lookup details for the query
   * @return results
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Array of Lookup details for the query")
  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<ResponseDetails> getResults() {
    return results;
  }


  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResults(java.util.List<ResponseDetails> results) {
    this.results = results;
  }


  /**
   * Return true if this lookup_count object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookupCount lookupCount = (LookupCount) o;
    return Objects.equals(this.resultCount, lookupCount.resultCount) &&
        Objects.equals(this.error, lookupCount.error) &&
        Objects.equals(this.isSuccess, lookupCount.isSuccess) &&
        Objects.equals(this.results, lookupCount.results);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resultCount, error, isSuccess, results);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookupCount {\n");
    sb.append("    resultCount: ").append(toIndentedString(resultCount)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    isSuccess: ").append(toIndentedString(isSuccess)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

