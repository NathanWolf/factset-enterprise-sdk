/*
 * ID Lookup API
 * The Factset Identifier Lookup API provides the ability to search for various identifier types based on keyword. The API returns tickers, entity names and other identifiers that Factset supports. In addition, the API offers filters that allows users to refine the results. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.IDLookup.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.IDLookup.JSON;


/**
 * Filters securities based on asset classes and other fields depending on the asset classes. 
 */
@ApiModel(description = "Filters securities based on asset classes and other fields depending on the asset classes. ")
@JsonPropertyOrder({
  IncludeExcludeObject.JSON_PROPERTY_FIELD,
  IncludeExcludeObject.JSON_PROPERTY_ENTITY,
  IncludeExcludeObject.JSON_PROPERTY_VALUES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class IncludeExcludeObject implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_FIELD = "field";
  private String field;

  public static final String JSON_PROPERTY_ENTITY = "entity";
  private String entity;

  public static final String JSON_PROPERTY_VALUES = "values";
  private java.util.List<Object> values = null;

  public IncludeExcludeObject() { 
  }

  public IncludeExcludeObject field(String field) {
    this.field = field;
    return this;
  }

   /**
   * String containing the field name to filter on. Each asset class has its own set of field (i.e. “equity_type”, “is_primary”, “region”,etc) 
   * @return field
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "maturity_year", value = "String containing the field name to filter on. Each asset class has its own set of field (i.e. “equity_type”, “is_primary”, “region”,etc) ")
  @JsonProperty(JSON_PROPERTY_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getField() {
    return field;
  }


  @JsonProperty(JSON_PROPERTY_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setField(String field) {
    this.field = field;
  }


  public IncludeExcludeObject entity(String entity) {
    this.entity = entity;
    return this;
  }

   /**
   * String containing the asset class for the filter to be applied on. If not included or left empty, it will apply the filter against all asset classes 
   * @return entity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "bonds", value = "String containing the asset class for the filter to be applied on. If not included or left empty, it will apply the filter against all asset classes ")
  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEntity() {
    return entity;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntity(String entity) {
    this.entity = entity;
  }


  public IncludeExcludeObject values(java.util.List<Object> values) {
    this.values = values;
    return this;
  }

  public IncludeExcludeObject addValuesItem(Object valuesItem) {
    if (this.values == null) {
      this.values = new java.util.ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Values you wish to filter on, as a comma-separated list. The values within this list are tied by an OR operation. 
   * @return values
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Values you wish to filter on, as a comma-separated list. The values within this list are tied by an OR operation. ")
  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<Object> getValues() {
    return values;
  }


  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValues(java.util.List<Object> values) {
    this.values = values;
  }


  /**
   * Return true if this include_exclude_object object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IncludeExcludeObject includeExcludeObject = (IncludeExcludeObject) o;
    return Objects.equals(this.field, includeExcludeObject.field) &&
        Objects.equals(this.entity, includeExcludeObject.entity) &&
        Objects.equals(this.values, includeExcludeObject.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, entity, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IncludeExcludeObject {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

