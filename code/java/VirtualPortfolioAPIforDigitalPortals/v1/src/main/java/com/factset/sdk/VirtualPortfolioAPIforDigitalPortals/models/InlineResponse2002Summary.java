/*
 * Virtual Portfolio API For Digital Portals
 * The virtual portfolio enables the analysis of the current allocation, broken down by asset classes, currencies,  regions, sectors, style, capitalization, style, maturity, risk, and more.  Relative performance and monthly returns can be measured against benchmarks, using portfolio position transaction (buy/sell) data. Both the realized profit/loss (resulting from closed transactions) and the potential profit/loss (resulting from positions that have not been sold yet) can be queried.  Portfolio endpoints allow creation and managing a transaction-based portfolio. A transaction-based portfolio contains a gapless history of all transactions to be able to accurately reproduce the investment record of the portfolio.  An instrument added to a portfolio is called a position. Each position consists of multiple buy and sell events called transactions. Portfolios are limited to 100 positions and 1000 transactions; adding more will result in an error.  A transaction-based portfolio can consist of the following transactions:  * A buy transaction opens or adds to a position in the portfolio, decreasing the cash value by the purchase price at the same time. If there is not enough cash in the portfolio to cover the transaction, the cash value becomes negative. * A sell transaction decreases or closes a position in the portfolio, increasing the cash value by the sale price at the same time. A sell transaction can only be created if the number of shares of a given position exceeds the number being sold. * A cash transaction increases or decreases the cash position of the portfolio. A portfolio can have only one cash position. The cash position is tracked automatically as each buy or sell transaction implicitly affects it. The cash position can be negative as a buy transaction does not check whether enough cash is available. The cash position does not generate interest; its performance is always 0%.  The chosen prices and key figures in the endpoints are using the same quality, which is configurable per application. Possible values are delayed (DLY), best (BST), end-of-day (EOD) or realtime (RLT). The default value for the price quality is BST.  The portfolio endpoints use different methods to calculate key figures. All key figures except the risk in /portfolio/detail/list, /portfolio/get, and /portfolio/position/list are calculated on-the-fly with current prices. The risk key figures are calculated on-the-fly with current prices, but the result is cached for 24 hours. The key figures in /portfolio/evaluation/list are calculated on end-of-day basis.  The Virtual Portfolio API for Digital Portals is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments in a watchlist. This also supports basic security identifier cross-reference. To complement the Watchlist API and Virtual Portfolio API with direct access to price histories, please refer to the Time Series API for Digital Portals.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.VirtualPortfolioAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.VirtualPortfolioAPIforDigitalPortals.models.InlineResponse2001DataSummaryCash;
import com.factset.sdk.VirtualPortfolioAPIforDigitalPortals.models.InlineResponse2002SummaryTransactions;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.VirtualPortfolioAPIforDigitalPortals.JSON;


/**
 * Summary of portfolio values in the portfolio&#39;s currency (see attribute &#x60;currency&#x60;).
 */
@ApiModel(description = "Summary of portfolio values in the portfolio's currency (see attribute `currency`).")
@JsonPropertyOrder({
  InlineResponse2002Summary.JSON_PROPERTY_TOTAL_VALUE,
  InlineResponse2002Summary.JSON_PROPERTY_MARKET_VALUE,
  InlineResponse2002Summary.JSON_PROPERTY_NUMBER_POSITIONS,
  InlineResponse2002Summary.JSON_PROPERTY_TRANSACTIONS,
  InlineResponse2002Summary.JSON_PROPERTY_CASH
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2002Summary implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TOTAL_VALUE = "totalValue";
  private BigDecimal totalValue;

  public static final String JSON_PROPERTY_MARKET_VALUE = "marketValue";
  private BigDecimal marketValue;

  public static final String JSON_PROPERTY_NUMBER_POSITIONS = "numberPositions";
  private BigDecimal numberPositions;

  public static final String JSON_PROPERTY_TRANSACTIONS = "transactions";
  private InlineResponse2002SummaryTransactions transactions;

  public static final String JSON_PROPERTY_CASH = "cash";
  private InlineResponse2001DataSummaryCash cash;

  public InlineResponse2002Summary() { 
  }

  public InlineResponse2002Summary totalValue(BigDecimal totalValue) {
    this.totalValue = totalValue;
    return this;
  }

   /**
   * The total portfolio value, i.e. the current market value of the portfolio plus cash.
   * @return totalValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total portfolio value, i.e. the current market value of the portfolio plus cash.")
  @JsonProperty(JSON_PROPERTY_TOTAL_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTotalValue() {
    return totalValue;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalValue(BigDecimal totalValue) {
    this.totalValue = totalValue;
  }


  public InlineResponse2002Summary marketValue(BigDecimal marketValue) {
    this.marketValue = marketValue;
    return this;
  }

   /**
   * The current market value of the securities in the portfolio.
   * @return marketValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current market value of the securities in the portfolio.")
  @JsonProperty(JSON_PROPERTY_MARKET_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMarketValue() {
    return marketValue;
  }


  @JsonProperty(JSON_PROPERTY_MARKET_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarketValue(BigDecimal marketValue) {
    this.marketValue = marketValue;
  }


  public InlineResponse2002Summary numberPositions(BigDecimal numberPositions) {
    this.numberPositions = numberPositions;
    return this;
  }

   /**
   * Number of positions in the portfolio.
   * @return numberPositions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of positions in the portfolio.")
  @JsonProperty(JSON_PROPERTY_NUMBER_POSITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getNumberPositions() {
    return numberPositions;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_POSITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberPositions(BigDecimal numberPositions) {
    this.numberPositions = numberPositions;
  }


  public InlineResponse2002Summary transactions(InlineResponse2002SummaryTransactions transactions) {
    this.transactions = transactions;
    return this;
  }

   /**
   * Get transactions
   * @return transactions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2002SummaryTransactions getTransactions() {
    return transactions;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactions(InlineResponse2002SummaryTransactions transactions) {
    this.transactions = transactions;
  }


  public InlineResponse2002Summary cash(InlineResponse2001DataSummaryCash cash) {
    this.cash = cash;
    return this;
  }

   /**
   * Get cash
   * @return cash
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2001DataSummaryCash getCash() {
    return cash;
  }


  @JsonProperty(JSON_PROPERTY_CASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCash(InlineResponse2001DataSummaryCash cash) {
    this.cash = cash;
  }


  /**
   * Return true if this inline_response_200_2_summary object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2002Summary inlineResponse2002Summary = (InlineResponse2002Summary) o;
    return Objects.equals(this.totalValue, inlineResponse2002Summary.totalValue) &&
        Objects.equals(this.marketValue, inlineResponse2002Summary.marketValue) &&
        Objects.equals(this.numberPositions, inlineResponse2002Summary.numberPositions) &&
        Objects.equals(this.transactions, inlineResponse2002Summary.transactions) &&
        Objects.equals(this.cash, inlineResponse2002Summary.cash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalValue, marketValue, numberPositions, transactions, cash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2002Summary {\n");
    sb.append("    totalValue: ").append(toIndentedString(totalValue)).append("\n");
    sb.append("    marketValue: ").append(toIndentedString(marketValue)).append("\n");
    sb.append("    numberPositions: ").append(toIndentedString(numberPositions)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    cash: ").append(toIndentedString(cash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

