/*
 * Virtual Portfolio API For Digital Portals
 * The virtual portfolio enables the analysis of the current allocation, broken down by asset classes, currencies,  regions, sectors, style, capitalization, style, maturity, risk, and more.  Relative performance and monthly returns can be measured against benchmarks, using portfolio position transaction (buy/sell) data. Both the realized profit/loss (resulting from closed transactions) and the potential profit/loss (resulting from positions that have not been sold yet) can be queried.  Portfolio endpoints allow creation and managing a transaction-based portfolio. A transaction-based portfolio contains a gapless history of all transactions to be able to accurately reproduce the investment record of the portfolio.  An instrument added to a portfolio is called a position. Each position consists of multiple buy and sell events called transactions. Portfolios are limited to 100 positions and 1000 transactions; adding more will result in an error.  A transaction-based portfolio can consist of the following transactions:  * A buy transaction opens or adds to a position in the portfolio, decreasing the cash value by the purchase price at the same time. If there is not enough cash in the portfolio to cover the transaction, the cash value becomes negative. * A sell transaction decreases or closes a position in the portfolio, increasing the cash value by the sale price at the same time. A sell transaction can only be created if the number of shares of a given position exceeds the number being sold. * A cash transaction increases or decreases the cash position of the portfolio. A portfolio can have only one cash position. The cash position is tracked automatically as each buy or sell transaction implicitly affects it. The cash position can be negative as a buy transaction does not check whether enough cash is available. The cash position does not generate interest; its performance is always 0%.  The chosen prices and key figures in the endpoints are using the same quality, which is configurable per application. Possible values are delayed (DLY), best (BST), end-of-day (EOD) or realtime (RLT). The default value for the price quality is BST.  The portfolio endpoints use different methods to calculate key figures. All key figures except the risk in /portfolio/detail/list, /portfolio/get, and /portfolio/position/list are calculated on-the-fly with current prices. The risk key figures are calculated on-the-fly with current prices, but the result is cached for 24 hours. The key figures in /portfolio/evaluation/list are calculated on end-of-day basis.  The Virtual Portfolio API for Digital Portals is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments in a watchlist. This also supports basic security identifier cross-reference. To complement the Watchlist API and Virtual Portfolio API with direct access to price histories, please refer to the Time Series API for Digital Portals.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.VirtualPortfolioAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.VirtualPortfolioAPIforDigitalPortals.models.InlineResponse2001DataCurrency;
import com.factset.sdk.VirtualPortfolioAPIforDigitalPortals.models.InlineResponse2001DataLifecycle;
import com.factset.sdk.VirtualPortfolioAPIforDigitalPortals.models.InlineResponse2001DataProfitLoss;
import com.factset.sdk.VirtualPortfolioAPIforDigitalPortals.models.InlineResponse2001DataRiskKeyFigures;
import com.factset.sdk.VirtualPortfolioAPIforDigitalPortals.models.InlineResponse2001DataSummary;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.VirtualPortfolioAPIforDigitalPortals.JSON;


/**
 * Details of the portfolio.
 */
@ApiModel(description = "Details of the portfolio.")
@JsonPropertyOrder({
  InlineResponse2001Data.JSON_PROPERTY_ID,
  InlineResponse2001Data.JSON_PROPERTY_NAME,
  InlineResponse2001Data.JSON_PROPERTY_CURRENCY,
  InlineResponse2001Data.JSON_PROPERTY_LIFECYCLE,
  InlineResponse2001Data.JSON_PROPERTY_AS_OF_DATE,
  InlineResponse2001Data.JSON_PROPERTY_SUMMARY,
  InlineResponse2001Data.JSON_PROPERTY_PROFIT_LOSS,
  InlineResponse2001Data.JSON_PROPERTY_RISK_KEY_FIGURES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2001Data implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private InlineResponse2001DataCurrency currency;

  public static final String JSON_PROPERTY_LIFECYCLE = "lifecycle";
  private InlineResponse2001DataLifecycle lifecycle;

  public static final String JSON_PROPERTY_AS_OF_DATE = "asOfDate";
  private String asOfDate;

  public static final String JSON_PROPERTY_SUMMARY = "summary";
  private InlineResponse2001DataSummary summary;

  public static final String JSON_PROPERTY_PROFIT_LOSS = "profitLoss";
  private InlineResponse2001DataProfitLoss profitLoss;

  public static final String JSON_PROPERTY_RISK_KEY_FIGURES = "riskKeyFigures";
  private InlineResponse2001DataRiskKeyFigures riskKeyFigures;

  public InlineResponse2001Data() { 
  }

  public InlineResponse2001Data id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of the portfolio.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier of the portfolio.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public InlineResponse2001Data name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the portfolio.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the portfolio.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public InlineResponse2001Data currency(InlineResponse2001DataCurrency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2001DataCurrency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(InlineResponse2001DataCurrency currency) {
    this.currency = currency;
  }


  public InlineResponse2001Data lifecycle(InlineResponse2001DataLifecycle lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

   /**
   * Get lifecycle
   * @return lifecycle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LIFECYCLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2001DataLifecycle getLifecycle() {
    return lifecycle;
  }


  @JsonProperty(JSON_PROPERTY_LIFECYCLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLifecycle(InlineResponse2001DataLifecycle lifecycle) {
    this.lifecycle = lifecycle;
  }


  public InlineResponse2001Data asOfDate(String asOfDate) {
    this.asOfDate = asOfDate;
    return this;
  }

   /**
   * Date and time of the portfolio valuation.
   * @return asOfDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time of the portfolio valuation.")
  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAsOfDate() {
    return asOfDate;
  }


  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsOfDate(String asOfDate) {
    this.asOfDate = asOfDate;
  }


  public InlineResponse2001Data summary(InlineResponse2001DataSummary summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2001DataSummary getSummary() {
    return summary;
  }


  @JsonProperty(JSON_PROPERTY_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSummary(InlineResponse2001DataSummary summary) {
    this.summary = summary;
  }


  public InlineResponse2001Data profitLoss(InlineResponse2001DataProfitLoss profitLoss) {
    this.profitLoss = profitLoss;
    return this;
  }

   /**
   * Get profitLoss
   * @return profitLoss
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PROFIT_LOSS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2001DataProfitLoss getProfitLoss() {
    return profitLoss;
  }


  @JsonProperty(JSON_PROPERTY_PROFIT_LOSS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProfitLoss(InlineResponse2001DataProfitLoss profitLoss) {
    this.profitLoss = profitLoss;
  }


  public InlineResponse2001Data riskKeyFigures(InlineResponse2001DataRiskKeyFigures riskKeyFigures) {
    this.riskKeyFigures = riskKeyFigures;
    return this;
  }

   /**
   * Get riskKeyFigures
   * @return riskKeyFigures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RISK_KEY_FIGURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2001DataRiskKeyFigures getRiskKeyFigures() {
    return riskKeyFigures;
  }


  @JsonProperty(JSON_PROPERTY_RISK_KEY_FIGURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRiskKeyFigures(InlineResponse2001DataRiskKeyFigures riskKeyFigures) {
    this.riskKeyFigures = riskKeyFigures;
  }


  /**
   * Return true if this inline_response_200_1_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2001Data inlineResponse2001Data = (InlineResponse2001Data) o;
    return Objects.equals(this.id, inlineResponse2001Data.id) &&
        Objects.equals(this.name, inlineResponse2001Data.name) &&
        Objects.equals(this.currency, inlineResponse2001Data.currency) &&
        Objects.equals(this.lifecycle, inlineResponse2001Data.lifecycle) &&
        Objects.equals(this.asOfDate, inlineResponse2001Data.asOfDate) &&
        Objects.equals(this.summary, inlineResponse2001Data.summary) &&
        Objects.equals(this.profitLoss, inlineResponse2001Data.profitLoss) &&
        Objects.equals(this.riskKeyFigures, inlineResponse2001Data.riskKeyFigures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, currency, lifecycle, asOfDate, summary, profitLoss, riskKeyFigures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2001Data {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    profitLoss: ").append(toIndentedString(profitLoss)).append("\n");
    sb.append("    riskKeyFigures: ").append(toIndentedString(riskKeyFigures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

