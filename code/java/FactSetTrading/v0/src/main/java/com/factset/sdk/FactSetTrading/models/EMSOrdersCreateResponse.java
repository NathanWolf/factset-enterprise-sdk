/*
 * EMS API
 * Allow clients to trade orders.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetTrading.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetTrading.models.EMSOrderMetadata;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetTrading.JSON;


/**
 * EMSOrdersCreateResponse
 */
@JsonPropertyOrder({
  EMSOrdersCreateResponse.JSON_PROPERTY_ACCEPTED,
  EMSOrdersCreateResponse.JSON_PROPERTY_REJECTED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EMSOrdersCreateResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ACCEPTED = "accepted";
  private JsonNullable<java.util.Map<String, EMSOrderMetadata>> accepted = JsonNullable.<java.util.Map<String, EMSOrderMetadata>>undefined();

  public static final String JSON_PROPERTY_REJECTED = "rejected";
  private JsonNullable<java.util.Map<String, EMSOrderMetadata>> rejected = JsonNullable.<java.util.Map<String, EMSOrderMetadata>>undefined();

  public EMSOrdersCreateResponse() { 
  }

  public EMSOrdersCreateResponse accepted(java.util.Map<String, EMSOrderMetadata> accepted) {
    this.accepted = JsonNullable.<java.util.Map<String, EMSOrderMetadata>>of(accepted);
    return this;
  }

  public EMSOrdersCreateResponse putAcceptedItem(String key, EMSOrderMetadata acceptedItem) {
    if (this.accepted == null || !this.accepted.isPresent()) {
      this.accepted = JsonNullable.<java.util.Map<String, EMSOrderMetadata>>of(new java.util.HashMap<>());
    }
    try {
      this.accepted.get().put(key, acceptedItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get accepted
   * @return accepted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.Map<String, EMSOrderMetadata> getAccepted() {
        return accepted.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ACCEPTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.Map<String, EMSOrderMetadata>> getAccepted_JsonNullable() {
    return accepted;
  }
  
  @JsonProperty(JSON_PROPERTY_ACCEPTED)
  public void setAccepted_JsonNullable(JsonNullable<java.util.Map<String, EMSOrderMetadata>> accepted) {
    this.accepted = accepted;
  }

  public void setAccepted(java.util.Map<String, EMSOrderMetadata> accepted) {
    this.accepted = JsonNullable.<java.util.Map<String, EMSOrderMetadata>>of(accepted);
  }


  public EMSOrdersCreateResponse rejected(java.util.Map<String, EMSOrderMetadata> rejected) {
    this.rejected = JsonNullable.<java.util.Map<String, EMSOrderMetadata>>of(rejected);
    return this;
  }

  public EMSOrdersCreateResponse putRejectedItem(String key, EMSOrderMetadata rejectedItem) {
    if (this.rejected == null || !this.rejected.isPresent()) {
      this.rejected = JsonNullable.<java.util.Map<String, EMSOrderMetadata>>of(new java.util.HashMap<>());
    }
    try {
      this.rejected.get().put(key, rejectedItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get rejected
   * @return rejected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.Map<String, EMSOrderMetadata> getRejected() {
        return rejected.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REJECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.Map<String, EMSOrderMetadata>> getRejected_JsonNullable() {
    return rejected;
  }
  
  @JsonProperty(JSON_PROPERTY_REJECTED)
  public void setRejected_JsonNullable(JsonNullable<java.util.Map<String, EMSOrderMetadata>> rejected) {
    this.rejected = rejected;
  }

  public void setRejected(java.util.Map<String, EMSOrderMetadata> rejected) {
    this.rejected = JsonNullable.<java.util.Map<String, EMSOrderMetadata>>of(rejected);
  }


  /**
   * Return true if this EMSOrdersCreateResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMSOrdersCreateResponse emSOrdersCreateResponse = (EMSOrdersCreateResponse) o;
    return equalsNullable(this.accepted, emSOrdersCreateResponse.accepted) &&
        equalsNullable(this.rejected, emSOrdersCreateResponse.rejected);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(accepted), hashCodeNullable(rejected));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMSOrdersCreateResponse {\n");
    sb.append("    accepted: ").append(toIndentedString(accepted)).append("\n");
    sb.append("    rejected: ").append(toIndentedString(rejected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

