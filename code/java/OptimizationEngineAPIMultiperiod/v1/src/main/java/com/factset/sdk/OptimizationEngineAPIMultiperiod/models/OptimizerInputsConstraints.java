/*
 * fpo_mp_input
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.OptimizationEngineAPIMultiperiod.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsDiversificationConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsExpectedReturnConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsFactorExposureConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsGeneralLinearConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsHoldingsThresholdConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsHoldingsWeightConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsLeverageConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsLimitRiskETLConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsNumberOfBuysConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsNumberOfSellsConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsNumberofAssetsConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsRiskContributionConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsRiskVolatilityConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsRoundlotsConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsSensitivityConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsTradeThresholdConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsTradingLimitTradeConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsTransactionCostConstraint;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsTurnoverConstraint;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.JSON;


/**
 * OptimizerInputsConstraints
 */
@JsonPropertyOrder({
  OptimizerInputsConstraints.JSON_PROPERTY_EXPECTED_RETURNS,
  OptimizerInputsConstraints.JSON_PROPERTY_DIVERSIFICATION,
  OptimizerInputsConstraints.JSON_PROPERTY_FACTOR_EXPOSURES,
  OptimizerInputsConstraints.JSON_PROPERTY_GENERAL_LINEAR,
  OptimizerInputsConstraints.JSON_PROPERTY_HOLDING_THRESHOLD,
  OptimizerInputsConstraints.JSON_PROPERTY_LEVERAGE,
  OptimizerInputsConstraints.JSON_PROPERTY_NUM_OF_ASSETS,
  OptimizerInputsConstraints.JSON_PROPERTY_SENSITIVITY,
  OptimizerInputsConstraints.JSON_PROPERTY_WEIGHT_CONSTRAINT,
  OptimizerInputsConstraints.JSON_PROPERTY_NUMBER_OF_BUYS,
  OptimizerInputsConstraints.JSON_PROPERTY_NUMBER_OF_SELLS,
  OptimizerInputsConstraints.JSON_PROPERTY_ROUND_LOTS,
  OptimizerInputsConstraints.JSON_PROPERTY_TRADE_THRESHOLD,
  OptimizerInputsConstraints.JSON_PROPERTY_TRANSACTION_COST,
  OptimizerInputsConstraints.JSON_PROPERTY_TRADING_TURNOVER,
  OptimizerInputsConstraints.JSON_PROPERTY_RISK_ETL,
  OptimizerInputsConstraints.JSON_PROPERTY_RISK_CONTRIBUTION,
  OptimizerInputsConstraints.JSON_PROPERTY_RISK_VOLATILITY,
  OptimizerInputsConstraints.JSON_PROPERTY_LIMIT_TRADE_CONSTRAINT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OptimizerInputsConstraints implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EXPECTED_RETURNS = "expected_returns";
  private java.util.List<OptimizerInputsExpectedReturnConstraint> expectedReturns = null;

  public static final String JSON_PROPERTY_DIVERSIFICATION = "diversification";
  private java.util.List<OptimizerInputsDiversificationConstraint> diversification = null;

  public static final String JSON_PROPERTY_FACTOR_EXPOSURES = "factor_exposures";
  private java.util.List<OptimizerInputsFactorExposureConstraint> factorExposures = null;

  public static final String JSON_PROPERTY_GENERAL_LINEAR = "general_linear";
  private java.util.List<OptimizerInputsGeneralLinearConstraint> generalLinear = null;

  public static final String JSON_PROPERTY_HOLDING_THRESHOLD = "holding_threshold";
  private java.util.List<OptimizerInputsHoldingsThresholdConstraint> holdingThreshold = null;

  public static final String JSON_PROPERTY_LEVERAGE = "leverage";
  private java.util.List<OptimizerInputsLeverageConstraint> leverage = null;

  public static final String JSON_PROPERTY_NUM_OF_ASSETS = "num_of_assets";
  private java.util.List<OptimizerInputsNumberofAssetsConstraint> numOfAssets = null;

  public static final String JSON_PROPERTY_SENSITIVITY = "sensitivity";
  private java.util.List<OptimizerInputsSensitivityConstraint> sensitivity = null;

  public static final String JSON_PROPERTY_WEIGHT_CONSTRAINT = "weight_constraint";
  private java.util.List<OptimizerInputsHoldingsWeightConstraint> weightConstraint = null;

  public static final String JSON_PROPERTY_NUMBER_OF_BUYS = "number_of_buys";
  private java.util.List<OptimizerInputsNumberOfBuysConstraint> numberOfBuys = null;

  public static final String JSON_PROPERTY_NUMBER_OF_SELLS = "number_of_sells";
  private java.util.List<OptimizerInputsNumberOfSellsConstraint> numberOfSells = null;

  public static final String JSON_PROPERTY_ROUND_LOTS = "round_lots";
  private java.util.List<OptimizerInputsRoundlotsConstraint> roundLots = null;

  public static final String JSON_PROPERTY_TRADE_THRESHOLD = "trade_threshold";
  private java.util.List<OptimizerInputsTradeThresholdConstraint> tradeThreshold = null;

  public static final String JSON_PROPERTY_TRANSACTION_COST = "transaction_cost";
  private java.util.List<OptimizerInputsTransactionCostConstraint> transactionCost = null;

  public static final String JSON_PROPERTY_TRADING_TURNOVER = "trading_turnover";
  private java.util.List<OptimizerInputsTurnoverConstraint> tradingTurnover = null;

  public static final String JSON_PROPERTY_RISK_ETL = "risk_etl";
  private java.util.List<OptimizerInputsLimitRiskETLConstraint> riskEtl = null;

  public static final String JSON_PROPERTY_RISK_CONTRIBUTION = "risk_contribution";
  private java.util.List<OptimizerInputsRiskContributionConstraint> riskContribution = null;

  public static final String JSON_PROPERTY_RISK_VOLATILITY = "risk_volatility";
  private java.util.List<OptimizerInputsRiskVolatilityConstraint> riskVolatility = null;

  public static final String JSON_PROPERTY_LIMIT_TRADE_CONSTRAINT = "limit_trade_constraint";
  private java.util.List<OptimizerInputsTradingLimitTradeConstraint> limitTradeConstraint = null;

  public OptimizerInputsConstraints() { 
  }

  public OptimizerInputsConstraints expectedReturns(java.util.List<OptimizerInputsExpectedReturnConstraint> expectedReturns) {
    this.expectedReturns = expectedReturns;
    return this;
  }

  public OptimizerInputsConstraints addExpectedReturnsItem(OptimizerInputsExpectedReturnConstraint expectedReturnsItem) {
    if (this.expectedReturns == null) {
      this.expectedReturns = new java.util.ArrayList<>();
    }
    this.expectedReturns.add(expectedReturnsItem);
    return this;
  }

   /**
   * Get expectedReturns
   * @return expectedReturns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXPECTED_RETURNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsExpectedReturnConstraint> getExpectedReturns() {
    return expectedReturns;
  }


  @JsonProperty(JSON_PROPERTY_EXPECTED_RETURNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpectedReturns(java.util.List<OptimizerInputsExpectedReturnConstraint> expectedReturns) {
    this.expectedReturns = expectedReturns;
  }


  public OptimizerInputsConstraints diversification(java.util.List<OptimizerInputsDiversificationConstraint> diversification) {
    this.diversification = diversification;
    return this;
  }

  public OptimizerInputsConstraints addDiversificationItem(OptimizerInputsDiversificationConstraint diversificationItem) {
    if (this.diversification == null) {
      this.diversification = new java.util.ArrayList<>();
    }
    this.diversification.add(diversificationItem);
    return this;
  }

   /**
   * Get diversification
   * @return diversification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DIVERSIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsDiversificationConstraint> getDiversification() {
    return diversification;
  }


  @JsonProperty(JSON_PROPERTY_DIVERSIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiversification(java.util.List<OptimizerInputsDiversificationConstraint> diversification) {
    this.diversification = diversification;
  }


  public OptimizerInputsConstraints factorExposures(java.util.List<OptimizerInputsFactorExposureConstraint> factorExposures) {
    this.factorExposures = factorExposures;
    return this;
  }

  public OptimizerInputsConstraints addFactorExposuresItem(OptimizerInputsFactorExposureConstraint factorExposuresItem) {
    if (this.factorExposures == null) {
      this.factorExposures = new java.util.ArrayList<>();
    }
    this.factorExposures.add(factorExposuresItem);
    return this;
  }

   /**
   * Get factorExposures
   * @return factorExposures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FACTOR_EXPOSURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsFactorExposureConstraint> getFactorExposures() {
    return factorExposures;
  }


  @JsonProperty(JSON_PROPERTY_FACTOR_EXPOSURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFactorExposures(java.util.List<OptimizerInputsFactorExposureConstraint> factorExposures) {
    this.factorExposures = factorExposures;
  }


  public OptimizerInputsConstraints generalLinear(java.util.List<OptimizerInputsGeneralLinearConstraint> generalLinear) {
    this.generalLinear = generalLinear;
    return this;
  }

  public OptimizerInputsConstraints addGeneralLinearItem(OptimizerInputsGeneralLinearConstraint generalLinearItem) {
    if (this.generalLinear == null) {
      this.generalLinear = new java.util.ArrayList<>();
    }
    this.generalLinear.add(generalLinearItem);
    return this;
  }

   /**
   * Get generalLinear
   * @return generalLinear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_GENERAL_LINEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsGeneralLinearConstraint> getGeneralLinear() {
    return generalLinear;
  }


  @JsonProperty(JSON_PROPERTY_GENERAL_LINEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGeneralLinear(java.util.List<OptimizerInputsGeneralLinearConstraint> generalLinear) {
    this.generalLinear = generalLinear;
  }


  public OptimizerInputsConstraints holdingThreshold(java.util.List<OptimizerInputsHoldingsThresholdConstraint> holdingThreshold) {
    this.holdingThreshold = holdingThreshold;
    return this;
  }

  public OptimizerInputsConstraints addHoldingThresholdItem(OptimizerInputsHoldingsThresholdConstraint holdingThresholdItem) {
    if (this.holdingThreshold == null) {
      this.holdingThreshold = new java.util.ArrayList<>();
    }
    this.holdingThreshold.add(holdingThresholdItem);
    return this;
  }

   /**
   * Get holdingThreshold
   * @return holdingThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HOLDING_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsHoldingsThresholdConstraint> getHoldingThreshold() {
    return holdingThreshold;
  }


  @JsonProperty(JSON_PROPERTY_HOLDING_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHoldingThreshold(java.util.List<OptimizerInputsHoldingsThresholdConstraint> holdingThreshold) {
    this.holdingThreshold = holdingThreshold;
  }


  public OptimizerInputsConstraints leverage(java.util.List<OptimizerInputsLeverageConstraint> leverage) {
    this.leverage = leverage;
    return this;
  }

  public OptimizerInputsConstraints addLeverageItem(OptimizerInputsLeverageConstraint leverageItem) {
    if (this.leverage == null) {
      this.leverage = new java.util.ArrayList<>();
    }
    this.leverage.add(leverageItem);
    return this;
  }

   /**
   * Get leverage
   * @return leverage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LEVERAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsLeverageConstraint> getLeverage() {
    return leverage;
  }


  @JsonProperty(JSON_PROPERTY_LEVERAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLeverage(java.util.List<OptimizerInputsLeverageConstraint> leverage) {
    this.leverage = leverage;
  }


  public OptimizerInputsConstraints numOfAssets(java.util.List<OptimizerInputsNumberofAssetsConstraint> numOfAssets) {
    this.numOfAssets = numOfAssets;
    return this;
  }

  public OptimizerInputsConstraints addNumOfAssetsItem(OptimizerInputsNumberofAssetsConstraint numOfAssetsItem) {
    if (this.numOfAssets == null) {
      this.numOfAssets = new java.util.ArrayList<>();
    }
    this.numOfAssets.add(numOfAssetsItem);
    return this;
  }

   /**
   * Get numOfAssets
   * @return numOfAssets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NUM_OF_ASSETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsNumberofAssetsConstraint> getNumOfAssets() {
    return numOfAssets;
  }


  @JsonProperty(JSON_PROPERTY_NUM_OF_ASSETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumOfAssets(java.util.List<OptimizerInputsNumberofAssetsConstraint> numOfAssets) {
    this.numOfAssets = numOfAssets;
  }


  public OptimizerInputsConstraints sensitivity(java.util.List<OptimizerInputsSensitivityConstraint> sensitivity) {
    this.sensitivity = sensitivity;
    return this;
  }

  public OptimizerInputsConstraints addSensitivityItem(OptimizerInputsSensitivityConstraint sensitivityItem) {
    if (this.sensitivity == null) {
      this.sensitivity = new java.util.ArrayList<>();
    }
    this.sensitivity.add(sensitivityItem);
    return this;
  }

   /**
   * Get sensitivity
   * @return sensitivity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SENSITIVITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsSensitivityConstraint> getSensitivity() {
    return sensitivity;
  }


  @JsonProperty(JSON_PROPERTY_SENSITIVITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSensitivity(java.util.List<OptimizerInputsSensitivityConstraint> sensitivity) {
    this.sensitivity = sensitivity;
  }


  public OptimizerInputsConstraints weightConstraint(java.util.List<OptimizerInputsHoldingsWeightConstraint> weightConstraint) {
    this.weightConstraint = weightConstraint;
    return this;
  }

  public OptimizerInputsConstraints addWeightConstraintItem(OptimizerInputsHoldingsWeightConstraint weightConstraintItem) {
    if (this.weightConstraint == null) {
      this.weightConstraint = new java.util.ArrayList<>();
    }
    this.weightConstraint.add(weightConstraintItem);
    return this;
  }

   /**
   * Get weightConstraint
   * @return weightConstraint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_WEIGHT_CONSTRAINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsHoldingsWeightConstraint> getWeightConstraint() {
    return weightConstraint;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT_CONSTRAINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWeightConstraint(java.util.List<OptimizerInputsHoldingsWeightConstraint> weightConstraint) {
    this.weightConstraint = weightConstraint;
  }


  public OptimizerInputsConstraints numberOfBuys(java.util.List<OptimizerInputsNumberOfBuysConstraint> numberOfBuys) {
    this.numberOfBuys = numberOfBuys;
    return this;
  }

  public OptimizerInputsConstraints addNumberOfBuysItem(OptimizerInputsNumberOfBuysConstraint numberOfBuysItem) {
    if (this.numberOfBuys == null) {
      this.numberOfBuys = new java.util.ArrayList<>();
    }
    this.numberOfBuys.add(numberOfBuysItem);
    return this;
  }

   /**
   * Get numberOfBuys
   * @return numberOfBuys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_BUYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsNumberOfBuysConstraint> getNumberOfBuys() {
    return numberOfBuys;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_BUYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfBuys(java.util.List<OptimizerInputsNumberOfBuysConstraint> numberOfBuys) {
    this.numberOfBuys = numberOfBuys;
  }


  public OptimizerInputsConstraints numberOfSells(java.util.List<OptimizerInputsNumberOfSellsConstraint> numberOfSells) {
    this.numberOfSells = numberOfSells;
    return this;
  }

  public OptimizerInputsConstraints addNumberOfSellsItem(OptimizerInputsNumberOfSellsConstraint numberOfSellsItem) {
    if (this.numberOfSells == null) {
      this.numberOfSells = new java.util.ArrayList<>();
    }
    this.numberOfSells.add(numberOfSellsItem);
    return this;
  }

   /**
   * Get numberOfSells
   * @return numberOfSells
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_SELLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsNumberOfSellsConstraint> getNumberOfSells() {
    return numberOfSells;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_SELLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfSells(java.util.List<OptimizerInputsNumberOfSellsConstraint> numberOfSells) {
    this.numberOfSells = numberOfSells;
  }


  public OptimizerInputsConstraints roundLots(java.util.List<OptimizerInputsRoundlotsConstraint> roundLots) {
    this.roundLots = roundLots;
    return this;
  }

  public OptimizerInputsConstraints addRoundLotsItem(OptimizerInputsRoundlotsConstraint roundLotsItem) {
    if (this.roundLots == null) {
      this.roundLots = new java.util.ArrayList<>();
    }
    this.roundLots.add(roundLotsItem);
    return this;
  }

   /**
   * Get roundLots
   * @return roundLots
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ROUND_LOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsRoundlotsConstraint> getRoundLots() {
    return roundLots;
  }


  @JsonProperty(JSON_PROPERTY_ROUND_LOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoundLots(java.util.List<OptimizerInputsRoundlotsConstraint> roundLots) {
    this.roundLots = roundLots;
  }


  public OptimizerInputsConstraints tradeThreshold(java.util.List<OptimizerInputsTradeThresholdConstraint> tradeThreshold) {
    this.tradeThreshold = tradeThreshold;
    return this;
  }

  public OptimizerInputsConstraints addTradeThresholdItem(OptimizerInputsTradeThresholdConstraint tradeThresholdItem) {
    if (this.tradeThreshold == null) {
      this.tradeThreshold = new java.util.ArrayList<>();
    }
    this.tradeThreshold.add(tradeThresholdItem);
    return this;
  }

   /**
   * Get tradeThreshold
   * @return tradeThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRADE_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsTradeThresholdConstraint> getTradeThreshold() {
    return tradeThreshold;
  }


  @JsonProperty(JSON_PROPERTY_TRADE_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTradeThreshold(java.util.List<OptimizerInputsTradeThresholdConstraint> tradeThreshold) {
    this.tradeThreshold = tradeThreshold;
  }


  public OptimizerInputsConstraints transactionCost(java.util.List<OptimizerInputsTransactionCostConstraint> transactionCost) {
    this.transactionCost = transactionCost;
    return this;
  }

  public OptimizerInputsConstraints addTransactionCostItem(OptimizerInputsTransactionCostConstraint transactionCostItem) {
    if (this.transactionCost == null) {
      this.transactionCost = new java.util.ArrayList<>();
    }
    this.transactionCost.add(transactionCostItem);
    return this;
  }

   /**
   * Get transactionCost
   * @return transactionCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsTransactionCostConstraint> getTransactionCost() {
    return transactionCost;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionCost(java.util.List<OptimizerInputsTransactionCostConstraint> transactionCost) {
    this.transactionCost = transactionCost;
  }


  public OptimizerInputsConstraints tradingTurnover(java.util.List<OptimizerInputsTurnoverConstraint> tradingTurnover) {
    this.tradingTurnover = tradingTurnover;
    return this;
  }

  public OptimizerInputsConstraints addTradingTurnoverItem(OptimizerInputsTurnoverConstraint tradingTurnoverItem) {
    if (this.tradingTurnover == null) {
      this.tradingTurnover = new java.util.ArrayList<>();
    }
    this.tradingTurnover.add(tradingTurnoverItem);
    return this;
  }

   /**
   * Get tradingTurnover
   * @return tradingTurnover
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRADING_TURNOVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsTurnoverConstraint> getTradingTurnover() {
    return tradingTurnover;
  }


  @JsonProperty(JSON_PROPERTY_TRADING_TURNOVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTradingTurnover(java.util.List<OptimizerInputsTurnoverConstraint> tradingTurnover) {
    this.tradingTurnover = tradingTurnover;
  }


  public OptimizerInputsConstraints riskEtl(java.util.List<OptimizerInputsLimitRiskETLConstraint> riskEtl) {
    this.riskEtl = riskEtl;
    return this;
  }

  public OptimizerInputsConstraints addRiskEtlItem(OptimizerInputsLimitRiskETLConstraint riskEtlItem) {
    if (this.riskEtl == null) {
      this.riskEtl = new java.util.ArrayList<>();
    }
    this.riskEtl.add(riskEtlItem);
    return this;
  }

   /**
   * Get riskEtl
   * @return riskEtl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RISK_ETL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsLimitRiskETLConstraint> getRiskEtl() {
    return riskEtl;
  }


  @JsonProperty(JSON_PROPERTY_RISK_ETL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRiskEtl(java.util.List<OptimizerInputsLimitRiskETLConstraint> riskEtl) {
    this.riskEtl = riskEtl;
  }


  public OptimizerInputsConstraints riskContribution(java.util.List<OptimizerInputsRiskContributionConstraint> riskContribution) {
    this.riskContribution = riskContribution;
    return this;
  }

  public OptimizerInputsConstraints addRiskContributionItem(OptimizerInputsRiskContributionConstraint riskContributionItem) {
    if (this.riskContribution == null) {
      this.riskContribution = new java.util.ArrayList<>();
    }
    this.riskContribution.add(riskContributionItem);
    return this;
  }

   /**
   * Get riskContribution
   * @return riskContribution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RISK_CONTRIBUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsRiskContributionConstraint> getRiskContribution() {
    return riskContribution;
  }


  @JsonProperty(JSON_PROPERTY_RISK_CONTRIBUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRiskContribution(java.util.List<OptimizerInputsRiskContributionConstraint> riskContribution) {
    this.riskContribution = riskContribution;
  }


  public OptimizerInputsConstraints riskVolatility(java.util.List<OptimizerInputsRiskVolatilityConstraint> riskVolatility) {
    this.riskVolatility = riskVolatility;
    return this;
  }

  public OptimizerInputsConstraints addRiskVolatilityItem(OptimizerInputsRiskVolatilityConstraint riskVolatilityItem) {
    if (this.riskVolatility == null) {
      this.riskVolatility = new java.util.ArrayList<>();
    }
    this.riskVolatility.add(riskVolatilityItem);
    return this;
  }

   /**
   * Get riskVolatility
   * @return riskVolatility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RISK_VOLATILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsRiskVolatilityConstraint> getRiskVolatility() {
    return riskVolatility;
  }


  @JsonProperty(JSON_PROPERTY_RISK_VOLATILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRiskVolatility(java.util.List<OptimizerInputsRiskVolatilityConstraint> riskVolatility) {
    this.riskVolatility = riskVolatility;
  }


  public OptimizerInputsConstraints limitTradeConstraint(java.util.List<OptimizerInputsTradingLimitTradeConstraint> limitTradeConstraint) {
    this.limitTradeConstraint = limitTradeConstraint;
    return this;
  }

  public OptimizerInputsConstraints addLimitTradeConstraintItem(OptimizerInputsTradingLimitTradeConstraint limitTradeConstraintItem) {
    if (this.limitTradeConstraint == null) {
      this.limitTradeConstraint = new java.util.ArrayList<>();
    }
    this.limitTradeConstraint.add(limitTradeConstraintItem);
    return this;
  }

   /**
   * Get limitTradeConstraint
   * @return limitTradeConstraint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LIMIT_TRADE_CONSTRAINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OptimizerInputsTradingLimitTradeConstraint> getLimitTradeConstraint() {
    return limitTradeConstraint;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT_TRADE_CONSTRAINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimitTradeConstraint(java.util.List<OptimizerInputsTradingLimitTradeConstraint> limitTradeConstraint) {
    this.limitTradeConstraint = limitTradeConstraint;
  }


  /**
   * Return true if this optimizer.inputs.Constraints object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptimizerInputsConstraints optimizerInputsConstraints = (OptimizerInputsConstraints) o;
    return Objects.equals(this.expectedReturns, optimizerInputsConstraints.expectedReturns) &&
        Objects.equals(this.diversification, optimizerInputsConstraints.diversification) &&
        Objects.equals(this.factorExposures, optimizerInputsConstraints.factorExposures) &&
        Objects.equals(this.generalLinear, optimizerInputsConstraints.generalLinear) &&
        Objects.equals(this.holdingThreshold, optimizerInputsConstraints.holdingThreshold) &&
        Objects.equals(this.leverage, optimizerInputsConstraints.leverage) &&
        Objects.equals(this.numOfAssets, optimizerInputsConstraints.numOfAssets) &&
        Objects.equals(this.sensitivity, optimizerInputsConstraints.sensitivity) &&
        Objects.equals(this.weightConstraint, optimizerInputsConstraints.weightConstraint) &&
        Objects.equals(this.numberOfBuys, optimizerInputsConstraints.numberOfBuys) &&
        Objects.equals(this.numberOfSells, optimizerInputsConstraints.numberOfSells) &&
        Objects.equals(this.roundLots, optimizerInputsConstraints.roundLots) &&
        Objects.equals(this.tradeThreshold, optimizerInputsConstraints.tradeThreshold) &&
        Objects.equals(this.transactionCost, optimizerInputsConstraints.transactionCost) &&
        Objects.equals(this.tradingTurnover, optimizerInputsConstraints.tradingTurnover) &&
        Objects.equals(this.riskEtl, optimizerInputsConstraints.riskEtl) &&
        Objects.equals(this.riskContribution, optimizerInputsConstraints.riskContribution) &&
        Objects.equals(this.riskVolatility, optimizerInputsConstraints.riskVolatility) &&
        Objects.equals(this.limitTradeConstraint, optimizerInputsConstraints.limitTradeConstraint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expectedReturns, diversification, factorExposures, generalLinear, holdingThreshold, leverage, numOfAssets, sensitivity, weightConstraint, numberOfBuys, numberOfSells, roundLots, tradeThreshold, transactionCost, tradingTurnover, riskEtl, riskContribution, riskVolatility, limitTradeConstraint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptimizerInputsConstraints {\n");
    sb.append("    expectedReturns: ").append(toIndentedString(expectedReturns)).append("\n");
    sb.append("    diversification: ").append(toIndentedString(diversification)).append("\n");
    sb.append("    factorExposures: ").append(toIndentedString(factorExposures)).append("\n");
    sb.append("    generalLinear: ").append(toIndentedString(generalLinear)).append("\n");
    sb.append("    holdingThreshold: ").append(toIndentedString(holdingThreshold)).append("\n");
    sb.append("    leverage: ").append(toIndentedString(leverage)).append("\n");
    sb.append("    numOfAssets: ").append(toIndentedString(numOfAssets)).append("\n");
    sb.append("    sensitivity: ").append(toIndentedString(sensitivity)).append("\n");
    sb.append("    weightConstraint: ").append(toIndentedString(weightConstraint)).append("\n");
    sb.append("    numberOfBuys: ").append(toIndentedString(numberOfBuys)).append("\n");
    sb.append("    numberOfSells: ").append(toIndentedString(numberOfSells)).append("\n");
    sb.append("    roundLots: ").append(toIndentedString(roundLots)).append("\n");
    sb.append("    tradeThreshold: ").append(toIndentedString(tradeThreshold)).append("\n");
    sb.append("    transactionCost: ").append(toIndentedString(transactionCost)).append("\n");
    sb.append("    tradingTurnover: ").append(toIndentedString(tradingTurnover)).append("\n");
    sb.append("    riskEtl: ").append(toIndentedString(riskEtl)).append("\n");
    sb.append("    riskContribution: ").append(toIndentedString(riskContribution)).append("\n");
    sb.append("    riskVolatility: ").append(toIndentedString(riskVolatility)).append("\n");
    sb.append("    limitTradeConstraint: ").append(toIndentedString(limitTradeConstraint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

