/*
 * fpo_mp_input
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.OptimizationEngineAPIMultiperiod.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsDenseMatrix;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsLabels;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsSparseMatrix;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.JSON;


/**
 * OptimizerInputsQuantRiskModelRawData
 */
@JsonPropertyOrder({
  OptimizerInputsQuantRiskModelRawData.JSON_PROPERTY_LABELS,
  OptimizerInputsQuantRiskModelRawData.JSON_PROPERTY_RAW_ASSET_COVARIANCE_MATRIX,
  OptimizerInputsQuantRiskModelRawData.JSON_PROPERTY_RAW_FACTOR_EXPOSURE,
  OptimizerInputsQuantRiskModelRawData.JSON_PROPERTY_RAW_FACTOR_COVARIANCE_MATRIX,
  OptimizerInputsQuantRiskModelRawData.JSON_PROPERTY_RISK_MODEL_COVERAGE_FLAG
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class OptimizerInputsQuantRiskModelRawData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_LABELS = "labels";
  private OptimizerInputsLabels labels;

  public static final String JSON_PROPERTY_RAW_ASSET_COVARIANCE_MATRIX = "RawAssetCovarianceMatrix";
  private OptimizerInputsSparseMatrix rawAssetCovarianceMatrix;

  public static final String JSON_PROPERTY_RAW_FACTOR_EXPOSURE = "RawFactorExposure";
  private OptimizerInputsSparseMatrix rawFactorExposure;

  public static final String JSON_PROPERTY_RAW_FACTOR_COVARIANCE_MATRIX = "RawFactorCovarianceMatrix";
  private OptimizerInputsDenseMatrix rawFactorCovarianceMatrix;

  public static final String JSON_PROPERTY_RISK_MODEL_COVERAGE_FLAG = "RiskModelCoverageFlag";
  private java.util.List<Integer> riskModelCoverageFlag = null;

  public OptimizerInputsQuantRiskModelRawData() { 
  }

  public OptimizerInputsQuantRiskModelRawData labels(OptimizerInputsLabels labels) {
    this.labels = labels;
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OptimizerInputsLabels getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(OptimizerInputsLabels labels) {
    this.labels = labels;
  }


  public OptimizerInputsQuantRiskModelRawData rawAssetCovarianceMatrix(OptimizerInputsSparseMatrix rawAssetCovarianceMatrix) {
    this.rawAssetCovarianceMatrix = rawAssetCovarianceMatrix;
    return this;
  }

   /**
   * Get rawAssetCovarianceMatrix
   * @return rawAssetCovarianceMatrix
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RAW_ASSET_COVARIANCE_MATRIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OptimizerInputsSparseMatrix getRawAssetCovarianceMatrix() {
    return rawAssetCovarianceMatrix;
  }


  @JsonProperty(JSON_PROPERTY_RAW_ASSET_COVARIANCE_MATRIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRawAssetCovarianceMatrix(OptimizerInputsSparseMatrix rawAssetCovarianceMatrix) {
    this.rawAssetCovarianceMatrix = rawAssetCovarianceMatrix;
  }


  public OptimizerInputsQuantRiskModelRawData rawFactorExposure(OptimizerInputsSparseMatrix rawFactorExposure) {
    this.rawFactorExposure = rawFactorExposure;
    return this;
  }

   /**
   * Get rawFactorExposure
   * @return rawFactorExposure
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RAW_FACTOR_EXPOSURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OptimizerInputsSparseMatrix getRawFactorExposure() {
    return rawFactorExposure;
  }


  @JsonProperty(JSON_PROPERTY_RAW_FACTOR_EXPOSURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRawFactorExposure(OptimizerInputsSparseMatrix rawFactorExposure) {
    this.rawFactorExposure = rawFactorExposure;
  }


  public OptimizerInputsQuantRiskModelRawData rawFactorCovarianceMatrix(OptimizerInputsDenseMatrix rawFactorCovarianceMatrix) {
    this.rawFactorCovarianceMatrix = rawFactorCovarianceMatrix;
    return this;
  }

   /**
   * Get rawFactorCovarianceMatrix
   * @return rawFactorCovarianceMatrix
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RAW_FACTOR_COVARIANCE_MATRIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OptimizerInputsDenseMatrix getRawFactorCovarianceMatrix() {
    return rawFactorCovarianceMatrix;
  }


  @JsonProperty(JSON_PROPERTY_RAW_FACTOR_COVARIANCE_MATRIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRawFactorCovarianceMatrix(OptimizerInputsDenseMatrix rawFactorCovarianceMatrix) {
    this.rawFactorCovarianceMatrix = rawFactorCovarianceMatrix;
  }


  public OptimizerInputsQuantRiskModelRawData riskModelCoverageFlag(java.util.List<Integer> riskModelCoverageFlag) {
    this.riskModelCoverageFlag = riskModelCoverageFlag;
    return this;
  }

  public OptimizerInputsQuantRiskModelRawData addRiskModelCoverageFlagItem(Integer riskModelCoverageFlagItem) {
    if (this.riskModelCoverageFlag == null) {
      this.riskModelCoverageFlag = new java.util.ArrayList<>();
    }
    this.riskModelCoverageFlag.add(riskModelCoverageFlagItem);
    return this;
  }

   /**
   * Get riskModelCoverageFlag
   * @return riskModelCoverageFlag
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RISK_MODEL_COVERAGE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<Integer> getRiskModelCoverageFlag() {
    return riskModelCoverageFlag;
  }


  @JsonProperty(JSON_PROPERTY_RISK_MODEL_COVERAGE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRiskModelCoverageFlag(java.util.List<Integer> riskModelCoverageFlag) {
    this.riskModelCoverageFlag = riskModelCoverageFlag;
  }


  /**
   * Return true if this optimizer.inputs.QuantRiskModelRawData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptimizerInputsQuantRiskModelRawData optimizerInputsQuantRiskModelRawData = (OptimizerInputsQuantRiskModelRawData) o;
    return Objects.equals(this.labels, optimizerInputsQuantRiskModelRawData.labels) &&
        Objects.equals(this.rawAssetCovarianceMatrix, optimizerInputsQuantRiskModelRawData.rawAssetCovarianceMatrix) &&
        Objects.equals(this.rawFactorExposure, optimizerInputsQuantRiskModelRawData.rawFactorExposure) &&
        Objects.equals(this.rawFactorCovarianceMatrix, optimizerInputsQuantRiskModelRawData.rawFactorCovarianceMatrix) &&
        Objects.equals(this.riskModelCoverageFlag, optimizerInputsQuantRiskModelRawData.riskModelCoverageFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(labels, rawAssetCovarianceMatrix, rawFactorExposure, rawFactorCovarianceMatrix, riskModelCoverageFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptimizerInputsQuantRiskModelRawData {\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    rawAssetCovarianceMatrix: ").append(toIndentedString(rawAssetCovarianceMatrix)).append("\n");
    sb.append("    rawFactorExposure: ").append(toIndentedString(rawFactorExposure)).append("\n");
    sb.append("    rawFactorCovarianceMatrix: ").append(toIndentedString(rawFactorCovarianceMatrix)).append("\n");
    sb.append("    riskModelCoverageFlag: ").append(toIndentedString(riskModelCoverageFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

