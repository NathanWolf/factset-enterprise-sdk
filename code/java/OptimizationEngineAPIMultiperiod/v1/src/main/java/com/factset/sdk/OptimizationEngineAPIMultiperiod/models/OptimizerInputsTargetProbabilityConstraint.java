/*
 * fpo_mp_input
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.OptimizationEngineAPIMultiperiod.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsValue;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.JSON;


/**
 * OptimizerInputsTargetProbabilityConstraint
 */
@JsonPropertyOrder({
  OptimizerInputsTargetProbabilityConstraint.JSON_PROPERTY_NAME,
  OptimizerInputsTargetProbabilityConstraint.JSON_PROPERTY_THRESHOLD_MIN,
  OptimizerInputsTargetProbabilityConstraint.JSON_PROPERTY_THRESHOLD_MAX,
  OptimizerInputsTargetProbabilityConstraint.JSON_PROPERTY_MIN_PROBABILITY,
  OptimizerInputsTargetProbabilityConstraint.JSON_PROPERTY_MAX_PROBABILITY,
  OptimizerInputsTargetProbabilityConstraint.JSON_PROPERTY_HIERARCHY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class OptimizerInputsTargetProbabilityConstraint implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_THRESHOLD_MIN = "threshold_min";
  private OptimizerInputsValue thresholdMin;

  public static final String JSON_PROPERTY_THRESHOLD_MAX = "threshold_max";
  private OptimizerInputsValue thresholdMax;

  public static final String JSON_PROPERTY_MIN_PROBABILITY = "min_probability";
  private OptimizerInputsValue minProbability;

  public static final String JSON_PROPERTY_MAX_PROBABILITY = "max_probability";
  private OptimizerInputsValue maxProbability;

  public static final String JSON_PROPERTY_HIERARCHY = "hierarchy";
  private Integer hierarchy;

  public OptimizerInputsTargetProbabilityConstraint() { 
  }

  public OptimizerInputsTargetProbabilityConstraint name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public OptimizerInputsTargetProbabilityConstraint thresholdMin(OptimizerInputsValue thresholdMin) {
    this.thresholdMin = thresholdMin;
    return this;
  }

   /**
   * Get thresholdMin
   * @return thresholdMin
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_THRESHOLD_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OptimizerInputsValue getThresholdMin() {
    return thresholdMin;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLD_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThresholdMin(OptimizerInputsValue thresholdMin) {
    this.thresholdMin = thresholdMin;
  }


  public OptimizerInputsTargetProbabilityConstraint thresholdMax(OptimizerInputsValue thresholdMax) {
    this.thresholdMax = thresholdMax;
    return this;
  }

   /**
   * Get thresholdMax
   * @return thresholdMax
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_THRESHOLD_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OptimizerInputsValue getThresholdMax() {
    return thresholdMax;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLD_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThresholdMax(OptimizerInputsValue thresholdMax) {
    this.thresholdMax = thresholdMax;
  }


  public OptimizerInputsTargetProbabilityConstraint minProbability(OptimizerInputsValue minProbability) {
    this.minProbability = minProbability;
    return this;
  }

   /**
   * Get minProbability
   * @return minProbability
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MIN_PROBABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OptimizerInputsValue getMinProbability() {
    return minProbability;
  }


  @JsonProperty(JSON_PROPERTY_MIN_PROBABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinProbability(OptimizerInputsValue minProbability) {
    this.minProbability = minProbability;
  }


  public OptimizerInputsTargetProbabilityConstraint maxProbability(OptimizerInputsValue maxProbability) {
    this.maxProbability = maxProbability;
    return this;
  }

   /**
   * Get maxProbability
   * @return maxProbability
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MAX_PROBABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OptimizerInputsValue getMaxProbability() {
    return maxProbability;
  }


  @JsonProperty(JSON_PROPERTY_MAX_PROBABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxProbability(OptimizerInputsValue maxProbability) {
    this.maxProbability = maxProbability;
  }


  public OptimizerInputsTargetProbabilityConstraint hierarchy(Integer hierarchy) {
    this.hierarchy = hierarchy;
    return this;
  }

   /**
   * Get hierarchy
   * @return hierarchy
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HIERARCHY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHierarchy() {
    return hierarchy;
  }


  @JsonProperty(JSON_PROPERTY_HIERARCHY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHierarchy(Integer hierarchy) {
    this.hierarchy = hierarchy;
  }


  /**
   * Return true if this optimizer.inputs.TargetProbabilityConstraint object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptimizerInputsTargetProbabilityConstraint optimizerInputsTargetProbabilityConstraint = (OptimizerInputsTargetProbabilityConstraint) o;
    return Objects.equals(this.name, optimizerInputsTargetProbabilityConstraint.name) &&
        Objects.equals(this.thresholdMin, optimizerInputsTargetProbabilityConstraint.thresholdMin) &&
        Objects.equals(this.thresholdMax, optimizerInputsTargetProbabilityConstraint.thresholdMax) &&
        Objects.equals(this.minProbability, optimizerInputsTargetProbabilityConstraint.minProbability) &&
        Objects.equals(this.maxProbability, optimizerInputsTargetProbabilityConstraint.maxProbability) &&
        Objects.equals(this.hierarchy, optimizerInputsTargetProbabilityConstraint.hierarchy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, thresholdMin, thresholdMax, minProbability, maxProbability, hierarchy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptimizerInputsTargetProbabilityConstraint {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    thresholdMin: ").append(toIndentedString(thresholdMin)).append("\n");
    sb.append("    thresholdMax: ").append(toIndentedString(thresholdMax)).append("\n");
    sb.append("    minProbability: ").append(toIndentedString(minProbability)).append("\n");
    sb.append("    maxProbability: ").append(toIndentedString(maxProbability)).append("\n");
    sb.append("    hierarchy: ").append(toIndentedString(hierarchy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

