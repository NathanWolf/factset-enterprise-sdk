/*
 * fpo_mp_input
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.OptimizationEngineAPIMultiperiod.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.models.OptimizerInputsRange;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.OptimizationEngineAPIMultiperiod.JSON;


/**
 * OptimizerInputsFrontierSettings
 */
@JsonPropertyOrder({
  OptimizerInputsFrontierSettings.JSON_PROPERTY_CONSTRAINT_NAME,
  OptimizerInputsFrontierSettings.JSON_PROPERTY_OBJECTIVE_TERM_NAME,
  OptimizerInputsFrontierSettings.JSON_PROPERTY_MIN,
  OptimizerInputsFrontierSettings.JSON_PROPERTY_MAX
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class OptimizerInputsFrontierSettings implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CONSTRAINT_NAME = "constraint_name";
  private String constraintName;

  public static final String JSON_PROPERTY_OBJECTIVE_TERM_NAME = "objective_term_name";
  private String objectiveTermName;

  public static final String JSON_PROPERTY_MIN = "min";
  private OptimizerInputsRange min;

  public static final String JSON_PROPERTY_MAX = "max";
  private OptimizerInputsRange max;

  public OptimizerInputsFrontierSettings() { 
  }

  public OptimizerInputsFrontierSettings constraintName(String constraintName) {
    this.constraintName = constraintName;
    return this;
  }

   /**
   * Get constraintName
   * @return constraintName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CONSTRAINT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConstraintName() {
    return constraintName;
  }


  @JsonProperty(JSON_PROPERTY_CONSTRAINT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConstraintName(String constraintName) {
    this.constraintName = constraintName;
  }


  public OptimizerInputsFrontierSettings objectiveTermName(String objectiveTermName) {
    this.objectiveTermName = objectiveTermName;
    return this;
  }

   /**
   * Get objectiveTermName
   * @return objectiveTermName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OBJECTIVE_TERM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getObjectiveTermName() {
    return objectiveTermName;
  }


  @JsonProperty(JSON_PROPERTY_OBJECTIVE_TERM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setObjectiveTermName(String objectiveTermName) {
    this.objectiveTermName = objectiveTermName;
  }


  public OptimizerInputsFrontierSettings min(OptimizerInputsRange min) {
    this.min = min;
    return this;
  }

   /**
   * Get min
   * @return min
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OptimizerInputsRange getMin() {
    return min;
  }


  @JsonProperty(JSON_PROPERTY_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMin(OptimizerInputsRange min) {
    this.min = min;
  }


  public OptimizerInputsFrontierSettings max(OptimizerInputsRange max) {
    this.max = max;
    return this;
  }

   /**
   * Get max
   * @return max
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OptimizerInputsRange getMax() {
    return max;
  }


  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMax(OptimizerInputsRange max) {
    this.max = max;
  }


  /**
   * Return true if this optimizer.inputs.FrontierSettings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptimizerInputsFrontierSettings optimizerInputsFrontierSettings = (OptimizerInputsFrontierSettings) o;
    return Objects.equals(this.constraintName, optimizerInputsFrontierSettings.constraintName) &&
        Objects.equals(this.objectiveTermName, optimizerInputsFrontierSettings.objectiveTermName) &&
        Objects.equals(this.min, optimizerInputsFrontierSettings.min) &&
        Objects.equals(this.max, optimizerInputsFrontierSettings.max);
  }

  @Override
  public int hashCode() {
    return Objects.hash(constraintName, objectiveTermName, min, max);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptimizerInputsFrontierSettings {\n");
    sb.append("    constraintName: ").append(toIndentedString(constraintName)).append("\n");
    sb.append("    objectiveTermName: ").append(toIndentedString(objectiveTermName)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

